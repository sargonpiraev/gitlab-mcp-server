import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js'
import { z } from 'zod'
import axios, { AxiosInstance } from 'axios'
import dotenv from 'dotenv'
import { CallToolResult } from '@modelcontextprotocol/sdk/types.js'

dotenv.config()

export const envSchema = z.object({
  GITLAB_API_TOKEN: z.string(),
})

export const mcpServer = new McpServer(
  {
    name: '@sargonpiraev/gitlab-mcp-server',
    version: 'v4',
  },
  {
    instructions: ``,
    capabilities: {
      tools: {},
      logging: {},
    },
  }
)

export const env = envSchema.parse(process.env)

export const apiClient: AxiosInstance = axios.create({
  baseURL: '',
  headers: {
    Accept: 'application/json',
  },
  timeout: 30000,
})

apiClient.interceptors.request.use(
  (config) => {
    if (env.GITLAB_API_TOKEN) {
      config.headers['PRIVATE-TOKEN'] = env.GITLAB_API_TOKEN
    }

    return config
  },
  (error) => {
    return Promise.reject(error)
  }
)

function handleResult(data: unknown): CallToolResult {
  return {
    content: [
      {
        type: 'text',
        text: JSON.stringify(data, null, 2),
      },
    ],
  }
}

function handleError(error: unknown): CallToolResult {
  console.error(error)

  if (axios.isAxiosError(error)) {
    const message = error.response?.data?.message || error.message
    return {
      isError: true,
      content: [{ type: 'text', text: `API Error: ${message}` }],
    } as CallToolResult
  }

  return {
    isError: true,
    content: [{ type: 'text', text: `Error: ${error}` }],
  } as CallToolResult
}

// Register tools
mcpServer.tool(
  'get-api-v4-groups-id-access-requests',
  `Gets a list of access requests for a group.`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/access_requests`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-access-requests',
  `Requests access for the authenticated user to a group.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/access_requests`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-access-requests-user-id-approve',
  `Approves an access request for the given user.`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...requestData } = args
      const url = `/api/v4/groups/${id}/access_requests/${userId}/approve`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-access-requests-user-id',
  `Denies an access request for the given user.`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/access_requests/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-epics-epic-iid-award-emoji',
  `List an awardable&#x27;s emoji reactions for groups`,
  {
    id: z.string(),
    epicIid: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, epicIid, ...queryParams } = args
      const url = `/api/v4/groups/${id}/epics/${epicIid}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('epicIid' in mappedParams) {
        mappedParams['epic_iid'] = mappedParams['epicIid']
        delete mappedParams['epicIid']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-epics-epic-iid-award-emoji',
  `Add a new emoji reaction`,
  {
    id: z.string(),
    epicIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, epicIid, ...requestData } = args
      const url = `/api/v4/groups/${id}/epics/${epicIid}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('epicIid' in mappedParams) {
        mappedParams['epic_iid'] = mappedParams['epicIid']
        delete mappedParams['epicIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-epics-epic-iid-award-emoji-award-id',
  `Get a single emoji reaction`,
  {
    id: z.string(),
    epicIid: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, epicIid, awardId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/epics/${epicIid}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('epicIid' in mappedParams) {
        mappedParams['epic_iid'] = mappedParams['epicIid']
        delete mappedParams['epicIid']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-epics-epic-iid-award-emoji-award-id',
  `Delete an emoji reaction`,
  {
    id: z.string(),
    epicIid: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, epicIid, awardId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/epics/${epicIid}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('epicIid' in mappedParams) {
        mappedParams['epic_iid'] = mappedParams['epicIid']
        delete mappedParams['epicIid']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-epics-epic-iid-notes-note-id-award-emoji',
  `List an awardable&#x27;s emoji reactions for groups`,
  {
    id: z.string(),
    epicIid: z.string(),
    noteId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, epicIid, noteId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/epics/${epicIid}/notes/${noteId}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('epicIid' in mappedParams) {
        mappedParams['epic_iid'] = mappedParams['epicIid']
        delete mappedParams['epicIid']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-epics-epic-iid-notes-note-id-award-emoji',
  `Add a new emoji reaction`,
  {
    id: z.string(),
    epicIid: z.string(),
    noteId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, epicIid, noteId, ...requestData } = args
      const url = `/api/v4/groups/${id}/epics/${epicIid}/notes/${noteId}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('epicIid' in mappedParams) {
        mappedParams['epic_iid'] = mappedParams['epicIid']
        delete mappedParams['epicIid']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-epics-epic-iid-notes-note-id-award-emoji-award-id',
  `Get a single emoji reaction`,
  {
    id: z.string(),
    epicIid: z.string(),
    noteId: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, epicIid, noteId, awardId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/epics/${epicIid}/notes/${noteId}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('epicIid' in mappedParams) {
        mappedParams['epic_iid'] = mappedParams['epicIid']
        delete mappedParams['epicIid']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-epics-epic-iid-notes-note-id-award-emoji-award-id',
  `Delete an emoji reaction`,
  {
    id: z.string(),
    epicIid: z.string(),
    noteId: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, epicIid, noteId, awardId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/epics/${epicIid}/notes/${noteId}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('epicIid' in mappedParams) {
        mappedParams['epic_iid'] = mappedParams['epicIid']
        delete mappedParams['epicIid']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-badges',
  `Gets a list of group badges viewable by the authenticated user.`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    name: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/badges`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-badges',
  `Adds a badge to a group.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/badges`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-badges-render',
  `Preview a badge from a group.`,
  {
    id: z.string(),
    linkUrl: z.string(),
    imageUrl: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/badges/render`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('linkUrl' in mappedParams) {
        mappedParams['link_url'] = mappedParams['linkUrl']
        delete mappedParams['linkUrl']
      }
      if ('imageUrl' in mappedParams) {
        mappedParams['image_url'] = mappedParams['imageUrl']
        delete mappedParams['imageUrl']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-badges-badge-id',
  `Gets a badge of a group.`,
  {
    id: z.string(),
    badgeId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, badgeId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/badges/${badgeId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('badgeId' in mappedParams) {
        mappedParams['badge_id'] = mappedParams['badgeId']
        delete mappedParams['badgeId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-badges-badge-id',
  `Updates a badge of a group.`,
  {
    id: z.string(),
    badgeId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, badgeId, ...requestData } = args
      const url = `/api/v4/groups/${id}/badges/${badgeId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('badgeId' in mappedParams) {
        mappedParams['badge_id'] = mappedParams['badgeId']
        delete mappedParams['badgeId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-badges-badge-id',
  `Removes a badge from the group.`,
  {
    id: z.string(),
    badgeId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, badgeId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/badges/${badgeId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('badgeId' in mappedParams) {
        mappedParams['badge_id'] = mappedParams['badgeId']
        delete mappedParams['badgeId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-custom-attributes',
  `Get all custom attributes on a group`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/custom_attributes`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-custom-attributes-key',
  `Get a custom attribute on a group`,
  {
    id: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...queryParams } = args
      const url = `/api/v4/groups/${id}/custom_attributes/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-custom-attributes-key',
  `Set a custom attribute on a group`,
  {
    id: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...requestData } = args
      const url = `/api/v4/groups/${id}/custom_attributes/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-custom-attributes-key',
  `Delete a custom attribute on a group`,
  {
    id: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...queryParams } = args
      const url = `/api/v4/groups/${id}/custom_attributes/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups',
  `Get a groups list`,
  {
    statistics: z.string().optional(),
    archived: z.string().optional(),
    skipGroups: z.string().optional(),
    allAvailable: z.string().optional(),
    visibility: z.string().optional(),
    search: z.string().optional(),
    owned: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    minAccessLevel: z.string().optional(),
    topLevelOnly: z.string().optional(),
    markedForDeletionOn: z.string().optional(),
    active: z.string().optional(),
    repositoryStorage: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    withCustomAttributes: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('skipGroups' in mappedParams) {
        mappedParams['skip_groups'] = mappedParams['skipGroups']
        delete mappedParams['skipGroups']
      }
      if ('allAvailable' in mappedParams) {
        mappedParams['all_available'] = mappedParams['allAvailable']
        delete mappedParams['allAvailable']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('topLevelOnly' in mappedParams) {
        mappedParams['top_level_only'] = mappedParams['topLevelOnly']
        delete mappedParams['topLevelOnly']
      }
      if ('markedForDeletionOn' in mappedParams) {
        mappedParams['marked_for_deletion_on'] = mappedParams['markedForDeletionOn']
        delete mappedParams['markedForDeletionOn']
      }
      if ('repositoryStorage' in mappedParams) {
        mappedParams['repository_storage'] = mappedParams['repositoryStorage']
        delete mappedParams['repositoryStorage']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/groups',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups',
  `Create a group. Available only for users who can create groups.`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/groups',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id',
  `Update a group. Available only for users who can administrate groups.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id',
  `Get a single group, with containing projects.`,
  {
    id: z.string(),
    withCustomAttributes: z.string().optional(),
    withProjects: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }
      if ('withProjects' in mappedParams) {
        mappedParams['with_projects'] = mappedParams['withProjects']
        delete mappedParams['withProjects']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id',
  `Remove a group.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-archive',
  `Archive a group`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/archive`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-unarchive',
  `Unarchive a group`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/unarchive`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-restore',
  `Restore a group.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/restore`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-groups-shared',
  `Get a list of shared groups this group was invited to`,
  {
    id: z.string(),
    skipGroups: z.string().optional(),
    visibility: z.string().optional(),
    search: z.string().optional(),
    minAccessLevel: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    withCustomAttributes: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/groups/shared`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('skipGroups' in mappedParams) {
        mappedParams['skip_groups'] = mappedParams['skipGroups']
        delete mappedParams['skipGroups']
      }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-invited-groups',
  `Get a list of invited groups in this group`,
  {
    id: z.string(),
    relation: z.string().optional(),
    search: z.string().optional(),
    minAccessLevel: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    withCustomAttributes: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/invited_groups`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-projects',
  `Get a list of projects in this group.`,
  {
    id: z.string(),
    archived: z.string().optional(),
    visibility: z.string().optional(),
    search: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    simple: z.string().optional(),
    owned: z.string().optional(),
    starred: z.string().optional(),
    withIssuesEnabled: z.string().optional(),
    withMergeRequestsEnabled: z.string().optional(),
    withShared: z.string().optional(),
    includeSubgroups: z.string().optional(),
    includeAncestorGroups: z.string().optional(),
    minAccessLevel: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    withCustomAttributes: z.string().optional(),
    withSecurityReports: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/projects`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('withIssuesEnabled' in mappedParams) {
        mappedParams['with_issues_enabled'] = mappedParams['withIssuesEnabled']
        delete mappedParams['withIssuesEnabled']
      }
      if ('withMergeRequestsEnabled' in mappedParams) {
        mappedParams['with_merge_requests_enabled'] = mappedParams['withMergeRequestsEnabled']
        delete mappedParams['withMergeRequestsEnabled']
      }
      if ('withShared' in mappedParams) {
        mappedParams['with_shared'] = mappedParams['withShared']
        delete mappedParams['withShared']
      }
      if ('includeSubgroups' in mappedParams) {
        mappedParams['include_subgroups'] = mappedParams['includeSubgroups']
        delete mappedParams['includeSubgroups']
      }
      if ('includeAncestorGroups' in mappedParams) {
        mappedParams['include_ancestor_groups'] = mappedParams['includeAncestorGroups']
        delete mappedParams['includeAncestorGroups']
      }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }
      if ('withSecurityReports' in mappedParams) {
        mappedParams['with_security_reports'] = mappedParams['withSecurityReports']
        delete mappedParams['withSecurityReports']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-projects-shared',
  `Get a list of shared projects in this group`,
  {
    id: z.string(),
    archived: z.string().optional(),
    visibility: z.string().optional(),
    search: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    simple: z.string().optional(),
    starred: z.string().optional(),
    withIssuesEnabled: z.string().optional(),
    withMergeRequestsEnabled: z.string().optional(),
    minAccessLevel: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    withCustomAttributes: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/projects/shared`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('withIssuesEnabled' in mappedParams) {
        mappedParams['with_issues_enabled'] = mappedParams['withIssuesEnabled']
        delete mappedParams['withIssuesEnabled']
      }
      if ('withMergeRequestsEnabled' in mappedParams) {
        mappedParams['with_merge_requests_enabled'] = mappedParams['withMergeRequestsEnabled']
        delete mappedParams['withMergeRequestsEnabled']
      }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-subgroups',
  `Get a list of subgroups in this group.`,
  {
    id: z.string(),
    statistics: z.string().optional(),
    archived: z.string().optional(),
    skipGroups: z.string().optional(),
    allAvailable: z.string().optional(),
    visibility: z.string().optional(),
    search: z.string().optional(),
    owned: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    minAccessLevel: z.string().optional(),
    topLevelOnly: z.string().optional(),
    markedForDeletionOn: z.string().optional(),
    active: z.string().optional(),
    repositoryStorage: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    withCustomAttributes: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/subgroups`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('skipGroups' in mappedParams) {
        mappedParams['skip_groups'] = mappedParams['skipGroups']
        delete mappedParams['skipGroups']
      }
      if ('allAvailable' in mappedParams) {
        mappedParams['all_available'] = mappedParams['allAvailable']
        delete mappedParams['allAvailable']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('topLevelOnly' in mappedParams) {
        mappedParams['top_level_only'] = mappedParams['topLevelOnly']
        delete mappedParams['topLevelOnly']
      }
      if ('markedForDeletionOn' in mappedParams) {
        mappedParams['marked_for_deletion_on'] = mappedParams['markedForDeletionOn']
        delete mappedParams['markedForDeletionOn']
      }
      if ('repositoryStorage' in mappedParams) {
        mappedParams['repository_storage'] = mappedParams['repositoryStorage']
        delete mappedParams['repositoryStorage']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-descendant-groups',
  `Get a list of descendant groups of this group.`,
  {
    id: z.string(),
    statistics: z.string().optional(),
    archived: z.string().optional(),
    skipGroups: z.string().optional(),
    allAvailable: z.string().optional(),
    visibility: z.string().optional(),
    search: z.string().optional(),
    owned: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    minAccessLevel: z.string().optional(),
    topLevelOnly: z.string().optional(),
    markedForDeletionOn: z.string().optional(),
    active: z.string().optional(),
    repositoryStorage: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    withCustomAttributes: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/descendant_groups`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('skipGroups' in mappedParams) {
        mappedParams['skip_groups'] = mappedParams['skipGroups']
        delete mappedParams['skipGroups']
      }
      if ('allAvailable' in mappedParams) {
        mappedParams['all_available'] = mappedParams['allAvailable']
        delete mappedParams['allAvailable']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('topLevelOnly' in mappedParams) {
        mappedParams['top_level_only'] = mappedParams['topLevelOnly']
        delete mappedParams['topLevelOnly']
      }
      if ('markedForDeletionOn' in mappedParams) {
        mappedParams['marked_for_deletion_on'] = mappedParams['markedForDeletionOn']
        delete mappedParams['markedForDeletionOn']
      }
      if ('repositoryStorage' in mappedParams) {
        mappedParams['repository_storage'] = mappedParams['repositoryStorage']
        delete mappedParams['repositoryStorage']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-projects-project-id',
  `Transfer a project to the group namespace. Available only for admin.`,
  {
    id: z.string(),
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, projectId, ...requestData } = args
      const url = `/api/v4/groups/${id}/projects/${projectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-transfer-locations',
  `Get the groups to where the current group can be transferred to`,
  {
    id: z.string(),
    search: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/transfer_locations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-transfer',
  `Transfer a group to a new parent group or promote a subgroup to a top-level group`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/transfer`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-share',
  `Share a group with a group`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/share`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-share-group-id',
  `DELETE /api/v4/groups/{id}/share/{group_id}`,
  {
    id: z.string(),
    groupId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, groupId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/share/${groupId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('groupId' in mappedParams) {
        mappedParams['group_id'] = mappedParams['groupId']
        delete mappedParams['groupId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-tokens-revoke',
  `Revoke a single token`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/tokens/revoke`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-ldap-sync',
  `Sync a group with LDAP.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/ldap_sync`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-audit-events',
  `Get a list of audit events in this group.`,
  {
    id: z.string(),
    createdAfter: z.string().optional(),
    createdBefore: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/audit_events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-audit-events-audit-event-id',
  `Get a specific audit event in this group.`,
  {
    id: z.string(),
    auditEventId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, auditEventId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/audit_events/${auditEventId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('auditEventId' in mappedParams) {
        mappedParams['audit_event_id'] = mappedParams['auditEventId']
        delete mappedParams['auditEventId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-saml-users',
  `Get a list of SAML users of the group`,
  {
    id: z.string(),
    username: z.string().optional(),
    search: z.string().optional(),
    active: z.string().optional(),
    blocked: z.string().optional(),
    createdAfter: z.string().optional(),
    createdBefore: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/saml_users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-provisioned-users',
  `Get a list of users provisioned by the group`,
  {
    id: z.string(),
    username: z.string().optional(),
    search: z.string().optional(),
    active: z.string().optional(),
    blocked: z.string().optional(),
    createdAfter: z.string().optional(),
    createdBefore: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/provisioned_users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-users',
  `Get a list of users for the group`,
  {
    id: z.string(),
    search: z.string().optional(),
    active: z.string().optional(),
    includeSamlUsers: z.string().optional(),
    includeServiceAccounts: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('includeSamlUsers' in mappedParams) {
        mappedParams['include_saml_users'] = mappedParams['includeSamlUsers']
        delete mappedParams['includeSamlUsers']
      }
      if ('includeServiceAccounts' in mappedParams) {
        mappedParams['include_service_accounts'] = mappedParams['includeServiceAccounts']
        delete mappedParams['includeServiceAccounts']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-ssh-certificates',
  `Get a list of Groups::SshCertificate for a Group.`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/ssh_certificates`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-ssh-certificates',
  `Add a Groups::SshCertificate.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/ssh_certificates`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-ssh-certificates-ssh-certificates-id',
  `Removes an ssh certificate from a group.`,
  {
    id: z.string(),
    sshCertificatesId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, sshCertificatesId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/ssh_certificates/${sshCertificatesId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('sshCertificatesId' in mappedParams) {
        mappedParams['ssh_certificates_id'] = mappedParams['sshCertificatesId']
        delete mappedParams['sshCertificatesId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-runners',
  `List group&#x27;s runners`,
  {
    id: z.string(),
    type: z.string().optional(),
    paused: z.string().optional(),
    status: z.string().optional(),
    tagList: z.string().optional(),
    versionPrefix: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/runners`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagList' in mappedParams) {
        mappedParams['tag_list'] = mappedParams['tagList']
        delete mappedParams['tagList']
      }
      if ('versionPrefix' in mappedParams) {
        mappedParams['version_prefix'] = mappedParams['versionPrefix']
        delete mappedParams['versionPrefix']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-runners-reset-registration-token',
  `Reset the runner registration token for a group`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/runners/reset_registration_token`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-debian-dists',
  `The Release file signature`,
  {
    id: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, distribution, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/debian/dists/${distribution}/Release.gpg`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-debian-dists',
  `The unsigned Release file`,
  {
    id: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, distribution, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/debian/dists/${distribution}/Release`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-debian-dists',
  `The signed Release file`,
  {
    id: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, distribution, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/debian/dists/${distribution}/InRelease`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-debian-dists',
  `The installer (udeb) binary files index`,
  {
    id: z.string(),
    component: z.string(),
    architecture: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, component, architecture, distribution, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/debian/dists/${distribution}/${component}/debian-installer/binary-${architecture}/Packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-debian-dists',
  `The installer (udeb) binary files index by hash`,
  {
    id: z.string(),
    component: z.string(),
    architecture: z.string(),
    fileSha256: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, component, architecture, fileSha256, distribution, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/debian/dists/${distribution}/${component}/debian-installer/binary-${architecture}/by-hash/SHA256/${fileSha256}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileSha256' in mappedParams) {
        mappedParams['file_sha256'] = mappedParams['fileSha256']
        delete mappedParams['fileSha256']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-debian-dists',
  `The source files index`,
  {
    id: z.string(),
    component: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, component, distribution, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/debian/dists/${distribution}/${component}/source/Sources`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-debian-dists',
  `The source files index by hash`,
  {
    id: z.string(),
    component: z.string(),
    fileSha256: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, component, fileSha256, distribution, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/debian/dists/${distribution}/${component}/source/by-hash/SHA256/${fileSha256}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileSha256' in mappedParams) {
        mappedParams['file_sha256'] = mappedParams['fileSha256']
        delete mappedParams['fileSha256']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-debian-dists',
  `The binary files index`,
  {
    id: z.string(),
    component: z.string(),
    architecture: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, component, architecture, distribution, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/debian/dists/${distribution}/${component}/binary-${architecture}/Packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-debian-dists',
  `The binary files index by hash`,
  {
    id: z.string(),
    component: z.string(),
    architecture: z.string(),
    fileSha256: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, component, architecture, fileSha256, distribution, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/debian/dists/${distribution}/${component}/binary-${architecture}/by-hash/SHA256/${fileSha256}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileSha256' in mappedParams) {
        mappedParams['file_sha256'] = mappedParams['fileSha256']
        delete mappedParams['fileSha256']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-debian-pool-distribution-project-id-letter-package-name-package-version-file-name',
  `Download Debian package`,
  {
    id: z.string(),
    distribution: z.string(),
    projectId: z.string(),
    letter: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, distribution, projectId, letter, packageName, packageVersion, fileName, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/debian/pool/${distribution}/${projectId}/${letter}/${packageName}/${packageVersion}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-dependency-proxy-cache',
  `Purge the dependency proxy for a group`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/dependency_proxy/cache`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-deploy-tokens',
  `List group deploy tokens`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    active: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/deploy_tokens`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-deploy-tokens',
  `Create a group deploy token`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/deploy_tokens`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-deploy-tokens-token-id',
  `Get a group deploy token`,
  {
    id: z.string(),
    tokenId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tokenId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/deploy_tokens/${tokenId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tokenId' in mappedParams) {
        mappedParams['token_id'] = mappedParams['tokenId']
        delete mappedParams['tokenId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-deploy-tokens-token-id',
  `Delete a group deploy token`,
  {
    id: z.string(),
    tokenId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tokenId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/deploy_tokens/${tokenId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tokenId' in mappedParams) {
        mappedParams['token_id'] = mappedParams['tokenId']
        delete mappedParams['tokenId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-avatar',
  `Download the group avatar`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/avatar`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-clusters',
  `List group clusters`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/clusters`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-clusters-cluster-id',
  `Get a single group cluster`,
  {
    id: z.string(),
    clusterId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, clusterId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/clusters/${clusterId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('clusterId' in mappedParams) {
        mappedParams['cluster_id'] = mappedParams['clusterId']
        delete mappedParams['clusterId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-clusters-cluster-id',
  `Edit group cluster`,
  {
    id: z.string(),
    clusterId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, clusterId, ...requestData } = args
      const url = `/api/v4/groups/${id}/clusters/${clusterId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('clusterId' in mappedParams) {
        mappedParams['cluster_id'] = mappedParams['clusterId']
        delete mappedParams['clusterId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-clusters-cluster-id',
  `Delete group cluster`,
  {
    id: z.string(),
    clusterId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, clusterId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/clusters/${clusterId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('clusterId' in mappedParams) {
        mappedParams['cluster_id'] = mappedParams['clusterId']
        delete mappedParams['clusterId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-clusters-user',
  `Add existing cluster to group`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/clusters/user`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-registry-repositories',
  `List registry repositories within a group`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/registry/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-debian-distributions',
  `Create a Debian Distribution`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/-/debian_distributions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-debian-distributions',
  `Get a list of Debian Distributions`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    codename: z.string().optional(),
    suite: z.string().optional(),
    origin: z.string().optional(),
    label: z.string().optional(),
    version: z.string().optional(),
    description: z.string().optional(),
    validTimeDurationSeconds: z.string().optional(),
    components: z.string().optional(),
    architectures: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/debian_distributions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('validTimeDurationSeconds' in mappedParams) {
        mappedParams['valid_time_duration_seconds'] = mappedParams['validTimeDurationSeconds']
        delete mappedParams['validTimeDurationSeconds']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-debian-distributions-codename',
  `Get a Debian Distribution`,
  {
    id: z.string(),
    codename: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, codename, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/debian_distributions/${codename}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-debian-distributions-codename',
  `Update a Debian Distribution`,
  {
    id: z.string(),
    codename: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, codename, ...requestData } = args
      const url = `/api/v4/groups/${id}/-/debian_distributions/${codename}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-debian-distributions-codename',
  `Delete a Debian Distribution`,
  {
    id: z.string(),
    codename: z.string(),
    suite: z.string().optional(),
    origin: z.string().optional(),
    label: z.string().optional(),
    version: z.string().optional(),
    description: z.string().optional(),
    validTimeDurationSeconds: z.string().optional(),
    components: z.string().optional(),
    architectures: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, codename, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/debian_distributions/${codename}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('validTimeDurationSeconds' in mappedParams) {
        mappedParams['valid_time_duration_seconds'] = mappedParams['validTimeDurationSeconds']
        delete mappedParams['validTimeDurationSeconds']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-debian-distributions-codename-key-asc',
  `Get a Debian Distribution Key`,
  {
    id: z.string(),
    codename: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, codename, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/debian_distributions/${codename}/key.asc`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-export-download',
  `Download export`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/export/download`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-export',
  `Start export`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/export`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-export-relations',
  `Start relations export`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/export_relations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-export-relations-download',
  `Download relations export`,
  {
    id: z.string(),
    relation: z.string(),
    batched: z.string().optional(),
    batchNumber: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/export_relations/download`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('batchNumber' in mappedParams) {
        mappedParams['batch_number'] = mappedParams['batchNumber']
        delete mappedParams['batchNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-export-relations-status',
  `Relations export status`,
  {
    id: z.string(),
    relation: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/export_relations/status`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-import-authorize',
  `Workhorse authorize the group import upload`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/groups/import/authorize',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-groups-import', `Create a new group import`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/groups/import',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-groups-id-packages',
  `List packages within a group`,
  {
    id: z.string(),
    excludeSubgroups: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    packageType: z.string().optional(),
    packageName: z.string().optional(),
    packageVersion: z.string().optional(),
    includeVersionless: z.string().optional(),
    status: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('excludeSubgroups' in mappedParams) {
        mappedParams['exclude_subgroups'] = mappedParams['excludeSubgroups']
        delete mappedParams['excludeSubgroups']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('includeVersionless' in mappedParams) {
        mappedParams['include_versionless'] = mappedParams['includeVersionless']
        delete mappedParams['includeVersionless']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-placeholder-reassignments',
  `Download the list of pending placeholder assignments for a group`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/placeholder_reassignments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-placeholder-reassignments',
  `POST /api/v4/groups/{id}/placeholder_reassignments`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/placeholder_reassignments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-placeholder-reassignments-authorize',
  `Workhorse authorization for the reassignment CSV file`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/placeholder_reassignments/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-variables',
  `Get a list of group-level variables`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-variables',
  `Create a new variable in a group`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-variables-key',
  `Get the details of a group’s specific variable`,
  {
    id: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...queryParams } = args
      const url = `/api/v4/groups/${id}/variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-variables-key',
  `Update an existing variable from a group`,
  {
    id: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...requestData } = args
      const url = `/api/v4/groups/${id}/variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-variables-key',
  `Delete an existing variable from a group`,
  {
    id: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...queryParams } = args
      const url = `/api/v4/groups/${id}/variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-integrations',
  `List all active integrations`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/integrations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-apple-app-store',
  `Create/Edit Apple App Store integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/apple-app-store`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-asana',
  `Create/Edit Asana integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/asana`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-assembla',
  `Create/Edit Assembla integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/assembla`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-bamboo',
  `Create/Edit Bamboo integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/bamboo`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-bugzilla',
  `Create/Edit Bugzilla integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/bugzilla`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-buildkite',
  `Create/Edit Buildkite integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/buildkite`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-campfire',
  `Create/Edit Campfire integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/campfire`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-confluence',
  `Create/Edit Confluence integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/confluence`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-custom-issue-tracker',
  `Create/Edit Custom Issue Tracker integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/custom-issue-tracker`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-datadog',
  `Create/Edit Datadog integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/datadog`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-diffblue-cover',
  `Create/Edit Diffblue Cover integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/diffblue-cover`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-discord',
  `Create/Edit Discord integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/discord`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-drone-ci',
  `Create/Edit Drone Ci integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/drone-ci`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-emails-on-push',
  `Create/Edit Emails On Push integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/emails-on-push`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-external-wiki',
  `Create/Edit External Wiki integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/external-wiki`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-gitlab-slack-application',
  `Create/Edit Gitlab Slack Application integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/gitlab-slack-application`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-google-play',
  `Create/Edit Google Play integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/google-play`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-hangouts-chat',
  `Create/Edit Hangouts Chat integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/hangouts-chat`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-harbor',
  `Create/Edit Harbor integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/harbor`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-irker',
  `Create/Edit Irker integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/irker`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-jenkins',
  `Create/Edit Jenkins integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/jenkins`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-jira',
  `Create/Edit Jira integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/jira`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-jira-cloud-app',
  `Create/Edit Jira Cloud App integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/jira-cloud-app`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-matrix',
  `Create/Edit Matrix integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/matrix`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-mattermost-slash-commands',
  `Create/Edit Mattermost Slash Commands integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/mattermost-slash-commands`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-slack-slash-commands',
  `Create/Edit Slack Slash Commands integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/slack-slash-commands`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-packagist',
  `Create/Edit Packagist integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/packagist`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-phorge',
  `Create/Edit Phorge integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/phorge`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-pipelines-email',
  `Create/Edit Pipelines Email integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/pipelines-email`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-pivotaltracker',
  `Create/Edit Pivotaltracker integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/pivotaltracker`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-pumble',
  `Create/Edit Pumble integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/pumble`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-pushover',
  `Create/Edit Pushover integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/pushover`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-redmine',
  `Create/Edit Redmine integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/redmine`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-ewm',
  `Create/Edit Ewm integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/ewm`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-youtrack',
  `Create/Edit Youtrack integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/youtrack`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-clickup',
  `Create/Edit Clickup integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/clickup`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-slack',
  `Create/Edit Slack integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/slack`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-microsoft-teams',
  `Create/Edit Microsoft Teams integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/microsoft-teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-mattermost',
  `Create/Edit Mattermost integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/mattermost`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-teamcity',
  `Create/Edit Teamcity integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/teamcity`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-telegram',
  `Create/Edit Telegram integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/telegram`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-unify-circuit',
  `Create/Edit Unify Circuit integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/unify-circuit`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-webex-teams',
  `Create/Edit Webex Teams integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/webex-teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-zentao',
  `Create/Edit Zentao integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/zentao`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-squash-tm',
  `Create/Edit Squash Tm integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/squash-tm`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-github',
  `Create/Edit Github integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/github`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-git-guardian',
  `Create/Edit Git Guardian integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/git-guardian`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-google-cloud-platform-artifact-registry',
  `Create/Edit Google Cloud Platform Artifact Registry integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/google-cloud-platform-artifact-registry`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-google-cloud-platform-workload-identity-federation',
  `Create/Edit Google Cloud Platform Workload Identity Federation integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/google-cloud-platform-workload-identity-federation`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-mock-ci',
  `Create/Edit Mock Ci integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/mock-ci`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-integrations-mock-monitoring',
  `Create/Edit Mock Monitoring integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/integrations/mock-monitoring`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-integrations-slug',
  `Disable an integration`,
  {
    id: z.string(),
    slug: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, slug, ...queryParams } = args
      const url = `/api/v4/groups/${id}/integrations/${slug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-integrations-slug',
  `Get an integration settings`,
  {
    id: z.string(),
    slug: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, slug, ...queryParams } = args
      const url = `/api/v4/groups/${id}/integrations/${slug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-invitations',
  `Invite non-members by email address to a group or project.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/invitations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-invitations',
  `Get a list of group or project invitations viewable by the authenticated user`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    query: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/invitations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-invitations-email',
  `Updates a group or project invitation.`,
  {
    id: z.string(),
    email: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, email, ...requestData } = args
      const url = `/api/v4/groups/${id}/invitations/${email}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-invitations-email',
  `Removes an invitation from a group or project.`,
  {
    id: z.string(),
    email: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, email, ...queryParams } = args
      const url = `/api/v4/groups/${id}/invitations/${email}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-uploads',
  `Get the list of uploads of a group`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/uploads`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-uploads-upload-id',
  `Download a single group upload by ID`,
  {
    id: z.string(),
    uploadId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, uploadId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/uploads/${uploadId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('uploadId' in mappedParams) {
        mappedParams['upload_id'] = mappedParams['uploadId']
        delete mappedParams['uploadId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-uploads-upload-id',
  `Delete a single group upload`,
  {
    id: z.string(),
    uploadId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, uploadId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/uploads/${uploadId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('uploadId' in mappedParams) {
        mappedParams['upload_id'] = mappedParams['uploadId']
        delete mappedParams['uploadId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-uploads-secret-filename',
  `Download a single project upload by secret and filename`,
  {
    id: z.string(),
    secret: z.string(),
    filename: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, secret, filename, ...queryParams } = args
      const url = `/api/v4/groups/${id}/uploads/${secret}/${filename}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-uploads-secret-filename',
  `Delete a single group upload by secret and filename`,
  {
    id: z.string(),
    secret: z.string(),
    filename: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, secret, filename, ...queryParams } = args
      const url = `/api/v4/groups/${id}/uploads/${secret}/${filename}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-maven',
  `Download the maven package file at a group level`,
  {
    id: z.string(),
    fileName: z.string(),
    path: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, fileName, path, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/maven/${path}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-members',
  `Gets a list of group or project members viewable by the authenticated user.`,
  {
    id: z.string(),
    query: z.string().optional(),
    userIds: z.string().optional(),
    skipUsers: z.string().optional(),
    showSeatInfo: z.string().optional(),
    withSamlIdentity: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/members`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userIds' in mappedParams) {
        mappedParams['user_ids'] = mappedParams['userIds']
        delete mappedParams['userIds']
      }
      if ('skipUsers' in mappedParams) {
        mappedParams['skip_users'] = mappedParams['skipUsers']
        delete mappedParams['skipUsers']
      }
      if ('showSeatInfo' in mappedParams) {
        mappedParams['show_seat_info'] = mappedParams['showSeatInfo']
        delete mappedParams['showSeatInfo']
      }
      if ('withSamlIdentity' in mappedParams) {
        mappedParams['with_saml_identity'] = mappedParams['withSamlIdentity']
        delete mappedParams['withSamlIdentity']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-members',
  `Adds a member to a group or project.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/members`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-members-all',
  `Gets a list of group or project members viewable by the authenticated user, including those who gained membership through ancestor group.`,
  {
    id: z.string(),
    query: z.string().optional(),
    userIds: z.string().optional(),
    showSeatInfo: z.string().optional(),
    state: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/members/all`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userIds' in mappedParams) {
        mappedParams['user_ids'] = mappedParams['userIds']
        delete mappedParams['userIds']
      }
      if ('showSeatInfo' in mappedParams) {
        mappedParams['show_seat_info'] = mappedParams['showSeatInfo']
        delete mappedParams['showSeatInfo']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-members-user-id',
  `Gets a member of a group or project.`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/members/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-members-user-id',
  `Updates a member of a group or project.`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...requestData } = args
      const url = `/api/v4/groups/${id}/members/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-members-user-id',
  `Removes a user from a group or project.`,
  {
    id: z.string(),
    userId: z.string(),
    skipSubresources: z.string().optional(),
    unassignIssuables: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/members/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }
      if ('skipSubresources' in mappedParams) {
        mappedParams['skip_subresources'] = mappedParams['skipSubresources']
        delete mappedParams['skipSubresources']
      }
      if ('unassignIssuables' in mappedParams) {
        mappedParams['unassign_issuables'] = mappedParams['unassignIssuables']
        delete mappedParams['unassignIssuables']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-members-all-user-id',
  `Gets a member of a group or project, including those who gained membership through ancestor group`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/members/all/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-members-user-id-override',
  `Overrides the access level of an LDAP group member.`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...requestData } = args
      const url = `/api/v4/groups/${id}/members/${userId}/override`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-members-user-id-override',
  `Remove an LDAP group member access level override.`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/members/${userId}/override`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-members-member-id-approve',
  `Approves a pending member`,
  {
    id: z.string(),
    memberId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, memberId, ...requestData } = args
      const url = `/api/v4/groups/${id}/members/${memberId}/approve`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('memberId' in mappedParams) {
        mappedParams['member_id'] = mappedParams['memberId']
        delete mappedParams['memberId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-members-approve-all',
  `Approves all pending members`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/members/approve_all`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-pending-members',
  `Lists all pending members for a group including invited users`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/pending_members`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-billable-members',
  `Gets a list of billable users of top-level group.`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    search: z.string().optional(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/billable_members`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-members-user-id-state',
  `Changes the state of the memberships of a user in the group`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...requestData } = args
      const url = `/api/v4/groups/${id}/members/${userId}/state`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-billable-members-user-id-memberships',
  `Get the direct memberships of a billable user of a top-level group.`,
  {
    id: z.string(),
    userId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/billable_members/${userId}/memberships`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-billable-members-user-id-indirect',
  `Get the indirect memberships of a billable user of a top-level group.`,
  {
    id: z.string(),
    userId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/billable_members/${userId}/indirect`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-billable-members-user-id',
  `Removes a billable member from a group or project.`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...queryParams } = args
      const url = `/api/v4/groups/${id}/billable_members/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-merge-requests',
  `List group merge requests`,
  {
    id: z.string(),
    authorId: z.string().optional(),
    authorUsername: z.string().optional(),
    assigneeId: z.string().optional(),
    assigneeUsername: z.string().optional(),
    reviewerUsername: z.string().optional(),
    labels: z.string().optional(),
    milestone: z.string().optional(),
    myReactionEmoji: z.string().optional(),
    reviewerId: z.string().optional(),
    state: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    withLabelsDetails: z.string().optional(),
    withMergeStatusRecheck: z.string().optional(),
    createdAfter: z.string().optional(),
    createdBefore: z.string().optional(),
    updatedAfter: z.string().optional(),
    updatedBefore: z.string().optional(),
    view: z.string().optional(),
    scope: z.string().optional(),
    sourceBranch: z.string().optional(),
    sourceProjectId: z.string().optional(),
    targetBranch: z.string().optional(),
    search: z.string().optional(),
    in: z.string().optional(),
    wip: z.string().optional(),
    'not[authorId]': z.string().optional(),
    'not[authorUsername]': z.string().optional(),
    'not[assigneeId]': z.string().optional(),
    'not[assigneeUsername]': z.string().optional(),
    'not[reviewerUsername]': z.string().optional(),
    'not[labels]': z.string().optional(),
    'not[milestone]': z.string().optional(),
    'not[myReactionEmoji]': z.string().optional(),
    'not[reviewerId]': z.string().optional(),
    deployedBefore: z.string().optional(),
    deployedAfter: z.string().optional(),
    environment: z.string().optional(),
    approved: z.string().optional(),
    mergeUserId: z.string().optional(),
    mergeUserUsername: z.string().optional(),
    approverIds: z.string().optional(),
    approvedByIds: z.string().optional(),
    approvedByUsernames: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    nonArchived: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/merge_requests`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('authorId' in mappedParams) {
        mappedParams['author_id'] = mappedParams['authorId']
        delete mappedParams['authorId']
      }
      if ('authorUsername' in mappedParams) {
        mappedParams['author_username'] = mappedParams['authorUsername']
        delete mappedParams['authorUsername']
      }
      if ('assigneeId' in mappedParams) {
        mappedParams['assignee_id'] = mappedParams['assigneeId']
        delete mappedParams['assigneeId']
      }
      if ('assigneeUsername' in mappedParams) {
        mappedParams['assignee_username'] = mappedParams['assigneeUsername']
        delete mappedParams['assigneeUsername']
      }
      if ('reviewerUsername' in mappedParams) {
        mappedParams['reviewer_username'] = mappedParams['reviewerUsername']
        delete mappedParams['reviewerUsername']
      }
      if ('myReactionEmoji' in mappedParams) {
        mappedParams['my_reaction_emoji'] = mappedParams['myReactionEmoji']
        delete mappedParams['myReactionEmoji']
      }
      if ('reviewerId' in mappedParams) {
        mappedParams['reviewer_id'] = mappedParams['reviewerId']
        delete mappedParams['reviewerId']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('withLabelsDetails' in mappedParams) {
        mappedParams['with_labels_details'] = mappedParams['withLabelsDetails']
        delete mappedParams['withLabelsDetails']
      }
      if ('withMergeStatusRecheck' in mappedParams) {
        mappedParams['with_merge_status_recheck'] = mappedParams['withMergeStatusRecheck']
        delete mappedParams['withMergeStatusRecheck']
      }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('updatedAfter' in mappedParams) {
        mappedParams['updated_after'] = mappedParams['updatedAfter']
        delete mappedParams['updatedAfter']
      }
      if ('updatedBefore' in mappedParams) {
        mappedParams['updated_before'] = mappedParams['updatedBefore']
        delete mappedParams['updatedBefore']
      }
      if ('sourceBranch' in mappedParams) {
        mappedParams['source_branch'] = mappedParams['sourceBranch']
        delete mappedParams['sourceBranch']
      }
      if ('sourceProjectId' in mappedParams) {
        mappedParams['source_project_id'] = mappedParams['sourceProjectId']
        delete mappedParams['sourceProjectId']
      }
      if ('targetBranch' in mappedParams) {
        mappedParams['target_branch'] = mappedParams['targetBranch']
        delete mappedParams['targetBranch']
      }
      if ('not[authorId]' in mappedParams) {
        mappedParams['not[author_id]'] = mappedParams['not[authorId]']
        delete mappedParams['not[authorId]']
      }
      if ('not[authorUsername]' in mappedParams) {
        mappedParams['not[author_username]'] = mappedParams['not[authorUsername]']
        delete mappedParams['not[authorUsername]']
      }
      if ('not[assigneeId]' in mappedParams) {
        mappedParams['not[assignee_id]'] = mappedParams['not[assigneeId]']
        delete mappedParams['not[assigneeId]']
      }
      if ('not[assigneeUsername]' in mappedParams) {
        mappedParams['not[assignee_username]'] = mappedParams['not[assigneeUsername]']
        delete mappedParams['not[assigneeUsername]']
      }
      if ('not[reviewerUsername]' in mappedParams) {
        mappedParams['not[reviewer_username]'] = mappedParams['not[reviewerUsername]']
        delete mappedParams['not[reviewerUsername]']
      }
      if ('not[myReactionEmoji]' in mappedParams) {
        mappedParams['not[my_reaction_emoji]'] = mappedParams['not[myReactionEmoji]']
        delete mappedParams['not[myReactionEmoji]']
      }
      if ('not[reviewerId]' in mappedParams) {
        mappedParams['not[reviewer_id]'] = mappedParams['not[reviewerId]']
        delete mappedParams['not[reviewerId]']
      }
      if ('deployedBefore' in mappedParams) {
        mappedParams['deployed_before'] = mappedParams['deployedBefore']
        delete mappedParams['deployedBefore']
      }
      if ('deployedAfter' in mappedParams) {
        mappedParams['deployed_after'] = mappedParams['deployedAfter']
        delete mappedParams['deployedAfter']
      }
      if ('mergeUserId' in mappedParams) {
        mappedParams['merge_user_id'] = mappedParams['mergeUserId']
        delete mappedParams['mergeUserId']
      }
      if ('mergeUserUsername' in mappedParams) {
        mappedParams['merge_user_username'] = mappedParams['mergeUserUsername']
        delete mappedParams['mergeUserUsername']
      }
      if ('approverIds' in mappedParams) {
        mappedParams['approver_ids'] = mappedParams['approverIds']
        delete mappedParams['approverIds']
      }
      if ('approvedByIds' in mappedParams) {
        mappedParams['approved_by_ids'] = mappedParams['approvedByIds']
        delete mappedParams['approvedByIds']
      }
      if ('approvedByUsernames' in mappedParams) {
        mappedParams['approved_by_usernames'] = mappedParams['approvedByUsernames']
        delete mappedParams['approvedByUsernames']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('nonArchived' in mappedParams) {
        mappedParams['non_archived'] = mappedParams['nonArchived']
        delete mappedParams['nonArchived']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-npm-package',
  `Get all tags for a given an NPM package`,
  {
    id: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/npm/-/package/${packageName}/dist-tags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-packages-npm-package',
  `Create or Update the given tag for the given NPM package and version`,
  {
    id: z.string(),
    tag: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tag, packageName, ...requestData } = args
      const url = `/api/v4/groups/${id}/-/packages/npm/-/package/${packageName}/dist-tags/${tag}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-packages-npm-package',
  `Deletes the given tag`,
  {
    id: z.string(),
    tag: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tag, packageName, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/npm/-/package/${packageName}/dist-tags/${tag}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-packages-npm-npm-v1-security-advisories-bulk',
  `NPM registry bulk advisory endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/-/packages/npm/-/npm/v1/security/advisories/bulk`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-packages-npm-npm-v1-security-audits-quick',
  `NPM registry quick audit endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/-/packages/npm/-/npm/v1/security/audits/quick`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-npm',
  `NPM registry metadata endpoint`,
  {
    id: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/npm/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-nuget-index',
  `The NuGet V3 Feed Service Index`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/nuget/index`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-nuget-symbolfilessignature',
  `The NuGet Symbol File Download Endpoint`,
  {
    id: z.string(),
    fileName: z.string(),
    signature: z.string(),
    sameFileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, fileName, signature, sameFileName, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/nuget/symbolfiles/${fileName}/${signature}/${sameFileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }
      if ('sameFileName' in mappedParams) {
        mappedParams['same_file_name'] = mappedParams['sameFileName']
        delete mappedParams['sameFileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-nuget-v2',
  `The NuGet V2 Feed Service Index`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/nuget/v2`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-nuget-v2$metadata',
  `The NuGet V2 Feed Package $metadata endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/nuget/v2/$metadata`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-nuget-metadata',
  `The NuGet Metadata Service - Package name level`,
  {
    id: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/nuget/metadata/${packageName}/index`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-nuget-metadatapackage-version',
  `The NuGet Metadata Service - Package name and version level`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/nuget/metadata/${packageName}/${packageVersion}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-nuget-query',
  `The NuGet Search Service`,
  {
    id: z.string(),
    q: z.string().optional(),
    skip: z.string().optional(),
    take: z.string().optional(),
    prerelease: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/nuget/query`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-pypi-files-sha256',
  `Download a package file from a group`,
  {
    id: z.string(),
    sha256: z.string(),
    fileIdentifier: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, sha256, fileIdentifier, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/pypi/files/${sha256}/${fileIdentifier}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileIdentifier' in mappedParams) {
        mappedParams['file_identifier'] = mappedParams['fileIdentifier']
        delete mappedParams['fileIdentifier']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-pypi-simple',
  `The PyPi Simple Group Index Endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/pypi/simple`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-packages-pypi-simple',
  `The PyPi Simple Group Package Endpoint`,
  {
    id: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...queryParams } = args
      const url = `/api/v4/groups/${id}/-/packages/pypi/simple/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-releases',
  `List group releases`,
  {
    id: z.string(),
    sort: z.string().optional(),
    simple: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/releases`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-access-tokens-self-rotate',
  `Rotate a resource access token`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/access_tokens/self/rotate`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-wikis',
  `Get a list of wiki pages`,
  {
    id: z.string(),
    withContent: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/groups/${id}/wikis`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('withContent' in mappedParams) {
        mappedParams['with_content'] = mappedParams['withContent']
        delete mappedParams['withContent']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-wikis',
  `Create a wiki page`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/wikis`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-groups-id-wikis-slug',
  `Get a wiki page`,
  {
    id: z.string(),
    slug: z.string(),
    version: z.string().optional(),
    renderHtml: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, slug, ...queryParams } = args
      const url = `/api/v4/groups/${id}/wikis/${slug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('renderHtml' in mappedParams) {
        mappedParams['render_html'] = mappedParams['renderHtml']
        delete mappedParams['renderHtml']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-groups-id-wikis-slug',
  `Update a wiki page`,
  {
    id: z.string(),
    slug: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, slug, ...requestData } = args
      const url = `/api/v4/groups/${id}/wikis/${slug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-groups-id-wikis-slug',
  `Delete a wiki page`,
  {
    id: z.string(),
    slug: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, slug, ...queryParams } = args
      const url = `/api/v4/groups/${id}/wikis/${slug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-groups-id-wikis-attachments',
  `Upload an attachment to the wiki repository`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/groups/${id}/wikis/attachments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-access-requests',
  `Gets a list of access requests for a project.`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/access_requests`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-access-requests',
  `Requests access for the authenticated user to a project.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/access_requests`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-access-requests-user-id-approve',
  `Approves an access request for the given user.`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...requestData } = args
      const url = `/api/v4/projects/${id}/access_requests/${userId}/approve`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-access-requests-user-id',
  `Denies an access request for the given user.`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/access_requests/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-alert-management-alerts-alert-iid-metric-images-authorize',
  `Workhorse authorize metric image file upload`,
  {
    id: z.string(),
    alertIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, alertIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/alert_management_alerts/${alertIid}/metric_images/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('alertIid' in mappedParams) {
        mappedParams['alert_iid'] = mappedParams['alertIid']
        delete mappedParams['alertIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-alert-management-alerts-alert-iid-metric-images',
  `Upload a metric image for an alert`,
  {
    id: z.string(),
    alertIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, alertIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/alert_management_alerts/${alertIid}/metric_images`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('alertIid' in mappedParams) {
        mappedParams['alert_iid'] = mappedParams['alertIid']
        delete mappedParams['alertIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-alert-management-alerts-alert-iid-metric-images',
  `Metric Images for alert`,
  {
    id: z.string(),
    alertIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, alertIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/alert_management_alerts/${alertIid}/metric_images`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('alertIid' in mappedParams) {
        mappedParams['alert_iid'] = mappedParams['alertIid']
        delete mappedParams['alertIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-alert-management-alerts-alert-iid-metric-images-metric-image-id',
  `Update a metric image for an alert`,
  {
    id: z.string(),
    alertIid: z.string(),
    metricImageId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, alertIid, metricImageId, ...requestData } = args
      const url = `/api/v4/projects/${id}/alert_management_alerts/${alertIid}/metric_images/${metricImageId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('alertIid' in mappedParams) {
        mappedParams['alert_iid'] = mappedParams['alertIid']
        delete mappedParams['alertIid']
      }
      if ('metricImageId' in mappedParams) {
        mappedParams['metric_image_id'] = mappedParams['metricImageId']
        delete mappedParams['metricImageId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-alert-management-alerts-alert-iid-metric-images-metric-image-id',
  `Remove a metric image for an alert`,
  {
    id: z.string(),
    alertIid: z.string(),
    metricImageId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, alertIid, metricImageId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/alert_management_alerts/${alertIid}/metric_images/${metricImageId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('alertIid' in mappedParams) {
        mappedParams['alert_iid'] = mappedParams['alertIid']
        delete mappedParams['alertIid']
      }
      if ('metricImageId' in mappedParams) {
        mappedParams['metric_image_id'] = mappedParams['metricImageId']
        delete mappedParams['metricImageId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-issues-issue-iid-award-emoji',
  `List an awardable&#x27;s emoji reactions for projects`,
  {
    id: z.string(),
    issueIid: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, issueIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/issues/${issueIid}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueIid' in mappedParams) {
        mappedParams['issue_iid'] = mappedParams['issueIid']
        delete mappedParams['issueIid']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-issues-issue-iid-award-emoji',
  `Add a new emoji reaction`,
  {
    id: z.string(),
    issueIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, issueIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/issues/${issueIid}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueIid' in mappedParams) {
        mappedParams['issue_iid'] = mappedParams['issueIid']
        delete mappedParams['issueIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-issues-issue-iid-award-emoji-award-id',
  `Get a single emoji reaction`,
  {
    id: z.string(),
    issueIid: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, issueIid, awardId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/issues/${issueIid}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueIid' in mappedParams) {
        mappedParams['issue_iid'] = mappedParams['issueIid']
        delete mappedParams['issueIid']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-issues-issue-iid-award-emoji-award-id',
  `Delete an emoji reaction`,
  {
    id: z.string(),
    issueIid: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, issueIid, awardId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/issues/${issueIid}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueIid' in mappedParams) {
        mappedParams['issue_iid'] = mappedParams['issueIid']
        delete mappedParams['issueIid']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-issues-issue-iid-notes-note-id-award-emoji',
  `List an awardable&#x27;s emoji reactions for projects`,
  {
    id: z.string(),
    issueIid: z.string(),
    noteId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, issueIid, noteId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/issues/${issueIid}/notes/${noteId}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueIid' in mappedParams) {
        mappedParams['issue_iid'] = mappedParams['issueIid']
        delete mappedParams['issueIid']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-issues-issue-iid-notes-note-id-award-emoji',
  `Add a new emoji reaction`,
  {
    id: z.string(),
    issueIid: z.string(),
    noteId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, issueIid, noteId, ...requestData } = args
      const url = `/api/v4/projects/${id}/issues/${issueIid}/notes/${noteId}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueIid' in mappedParams) {
        mappedParams['issue_iid'] = mappedParams['issueIid']
        delete mappedParams['issueIid']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-issues-issue-iid-notes-note-id-award-emoji-award-id',
  `Get a single emoji reaction`,
  {
    id: z.string(),
    issueIid: z.string(),
    noteId: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, issueIid, noteId, awardId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/issues/${issueIid}/notes/${noteId}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueIid' in mappedParams) {
        mappedParams['issue_iid'] = mappedParams['issueIid']
        delete mappedParams['issueIid']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-issues-issue-iid-notes-note-id-award-emoji-award-id',
  `Delete an emoji reaction`,
  {
    id: z.string(),
    issueIid: z.string(),
    noteId: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, issueIid, noteId, awardId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/issues/${issueIid}/notes/${noteId}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueIid' in mappedParams) {
        mappedParams['issue_iid'] = mappedParams['issueIid']
        delete mappedParams['issueIid']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-award-emoji',
  `List an awardable&#x27;s emoji reactions for projects`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-award-emoji',
  `Add a new emoji reaction`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-award-emoji-award-id',
  `Get a single emoji reaction`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, awardId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-merge-requests-merge-request-iid-award-emoji-award-id',
  `Delete an emoji reaction`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, awardId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-notes-note-id-award-emoji',
  `List an awardable&#x27;s emoji reactions for projects`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    noteId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, noteId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/notes/${noteId}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-notes-note-id-award-emoji',
  `Add a new emoji reaction`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    noteId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, noteId, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/notes/${noteId}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-notes-note-id-award-emoji-award-id',
  `Get a single emoji reaction`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    noteId: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, noteId, awardId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/notes/${noteId}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-merge-requests-merge-request-iid-notes-note-id-award-emoji-award-id',
  `Delete an emoji reaction`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    noteId: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, noteId, awardId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/notes/${noteId}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-snippets-snippet-id-award-emoji',
  `List an awardable&#x27;s emoji reactions for projects`,
  {
    id: z.string(),
    snippetId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-snippets-snippet-id-award-emoji',
  `Add a new emoji reaction`,
  {
    id: z.string(),
    snippetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, ...requestData } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-snippets-snippet-id-award-emoji-award-id',
  `Get a single emoji reaction`,
  {
    id: z.string(),
    snippetId: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, awardId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-snippets-snippet-id-award-emoji-award-id',
  `Delete an emoji reaction`,
  {
    id: z.string(),
    snippetId: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, awardId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-snippets-snippet-id-notes-note-id-award-emoji',
  `List an awardable&#x27;s emoji reactions for projects`,
  {
    id: z.string(),
    snippetId: z.string(),
    noteId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, noteId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}/notes/${noteId}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-snippets-snippet-id-notes-note-id-award-emoji',
  `Add a new emoji reaction`,
  {
    id: z.string(),
    snippetId: z.string(),
    noteId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, noteId, ...requestData } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}/notes/${noteId}/award_emoji`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-snippets-snippet-id-notes-note-id-award-emoji-award-id',
  `Get a single emoji reaction`,
  {
    id: z.string(),
    snippetId: z.string(),
    noteId: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, noteId, awardId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}/notes/${noteId}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-snippets-snippet-id-notes-note-id-award-emoji-award-id',
  `Delete an emoji reaction`,
  {
    id: z.string(),
    snippetId: z.string(),
    noteId: z.string(),
    awardId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, noteId, awardId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}/notes/${noteId}/award_emoji/${awardId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }
      if ('noteId' in mappedParams) {
        mappedParams['note_id'] = mappedParams['noteId']
        delete mappedParams['noteId']
      }
      if ('awardId' in mappedParams) {
        mappedParams['award_id'] = mappedParams['awardId']
        delete mappedParams['awardId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-badges',
  `Gets a list of project badges viewable by the authenticated user.`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    name: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/badges`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-badges',
  `Adds a badge to a project.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/badges`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-badges-render',
  `Preview a badge from a project.`,
  {
    id: z.string(),
    linkUrl: z.string(),
    imageUrl: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/badges/render`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('linkUrl' in mappedParams) {
        mappedParams['link_url'] = mappedParams['linkUrl']
        delete mappedParams['linkUrl']
      }
      if ('imageUrl' in mappedParams) {
        mappedParams['image_url'] = mappedParams['imageUrl']
        delete mappedParams['imageUrl']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-badges-badge-id',
  `Gets a badge of a project.`,
  {
    id: z.string(),
    badgeId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, badgeId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/badges/${badgeId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('badgeId' in mappedParams) {
        mappedParams['badge_id'] = mappedParams['badgeId']
        delete mappedParams['badgeId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-badges-badge-id',
  `Updates a badge of a project.`,
  {
    id: z.string(),
    badgeId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, badgeId, ...requestData } = args
      const url = `/api/v4/projects/${id}/badges/${badgeId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('badgeId' in mappedParams) {
        mappedParams['badge_id'] = mappedParams['badgeId']
        delete mappedParams['badgeId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-badges-badge-id',
  `Removes a badge from the project.`,
  {
    id: z.string(),
    badgeId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, badgeId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/badges/${badgeId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('badgeId' in mappedParams) {
        mappedParams['badge_id'] = mappedParams['badgeId']
        delete mappedParams['badgeId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-branches',
  `Get a project repository branches`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    search: z.string().optional(),
    regex: z.string().optional(),
    sort: z.string().optional(),
    pageToken: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/branches`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('pageToken' in mappedParams) {
        mappedParams['page_token'] = mappedParams['pageToken']
        delete mappedParams['pageToken']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-repository-branches',
  `Create branch`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository/branches`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-branches-branch',
  `Get a single repository branch`,
  {
    id: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, branch, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/branches/${branch}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-repository-branches-branch',
  `Delete a branch`,
  {
    id: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, branch, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/branches/${branch}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-repository-branches-branch-protect',
  `Protect a single branch`,
  {
    id: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, branch, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository/branches/${branch}/protect`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-repository-branches-branch-unprotect',
  `Unprotect a single branch`,
  {
    id: z.string(),
    branch: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, branch, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository/branches/${branch}/unprotect`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-repository-merged-branches',
  `Delete all merged branches`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/merged_branches`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-catalog-publish',
  `Publish a new component project release as version to the CI/CD catalog`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/catalog/publish`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-jobs-artifacts-ref-name-download',
  `Download the artifacts archive from a job`,
  {
    id: z.string(),
    refName: z.string(),
    job: z.string(),
    jobToken: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, refName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/jobs/artifacts/${refName}/download`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('refName' in mappedParams) {
        mappedParams['ref_name'] = mappedParams['refName']
        delete mappedParams['refName']
      }
      if ('jobToken' in mappedParams) {
        mappedParams['job_token'] = mappedParams['jobToken']
        delete mappedParams['jobToken']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-jobs-artifacts-ref-name-raw',
  `Download a specific file from artifacts archive from a ref`,
  {
    id: z.string(),
    refName: z.string(),
    artifactPath: z.string(),
    job: z.string(),
    jobToken: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, refName, artifactPath, ...queryParams } = args
      const url = `/api/v4/projects/${id}/jobs/artifacts/${refName}/raw/${artifactPath}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('refName' in mappedParams) {
        mappedParams['ref_name'] = mappedParams['refName']
        delete mappedParams['refName']
      }
      if ('artifactPath' in mappedParams) {
        mappedParams['artifact_path'] = mappedParams['artifactPath']
        delete mappedParams['artifactPath']
      }
      if ('jobToken' in mappedParams) {
        mappedParams['job_token'] = mappedParams['jobToken']
        delete mappedParams['jobToken']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-jobs-job-id-artifacts',
  `Download the artifacts archive from a job`,
  {
    id: z.string(),
    jobId: z.string(),
    jobToken: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, jobId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/jobs/${jobId}/artifacts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }
      if ('jobToken' in mappedParams) {
        mappedParams['job_token'] = mappedParams['jobToken']
        delete mappedParams['jobToken']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-jobs-job-id-artifacts',
  `Delete the artifacts files from a job`,
  {
    id: z.string(),
    jobId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, jobId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/jobs/${jobId}/artifacts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-jobs-job-id-artifacts',
  `Download a specific file from artifacts archive`,
  {
    id: z.string(),
    jobId: z.string(),
    artifactPath: z.string(),
    jobToken: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, jobId, artifactPath, ...queryParams } = args
      const url = `/api/v4/projects/${id}/jobs/${jobId}/artifacts/${artifactPath}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }
      if ('artifactPath' in mappedParams) {
        mappedParams['artifact_path'] = mappedParams['artifactPath']
        delete mappedParams['artifactPath']
      }
      if ('jobToken' in mappedParams) {
        mappedParams['job_token'] = mappedParams['jobToken']
        delete mappedParams['jobToken']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-jobs-job-id-artifacts-keep',
  `Keep the artifacts to prevent them from being deleted`,
  {
    id: z.string(),
    jobId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, jobId, ...requestData } = args
      const url = `/api/v4/projects/${id}/jobs/${jobId}/artifacts/keep`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-artifacts',
  `Expire the artifacts files from a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/artifacts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-jobs',
  `Get a projects jobs`,
  {
    id: z.string(),
    scope: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/jobs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-jobs-job-id',
  `Get a specific job of a project`,
  {
    id: z.string(),
    jobId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, jobId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/jobs/${jobId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-jobs-job-id-trace',
  `Get a trace of a specific job of a project`,
  {
    id: z.string(),
    jobId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, jobId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/jobs/${jobId}/trace`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-jobs-job-id-cancel',
  `Cancel a specific job of a project`,
  {
    id: z.string(),
    jobId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, jobId, ...requestData } = args
      const url = `/api/v4/projects/${id}/jobs/${jobId}/cancel`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-jobs-job-id-retry',
  `Retry a specific job of a project`,
  {
    id: z.string(),
    jobId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, jobId, ...requestData } = args
      const url = `/api/v4/projects/${id}/jobs/${jobId}/retry`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-jobs-job-id-erase',
  `Erase job (remove artifacts and the trace)`,
  {
    id: z.string(),
    jobId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, jobId, ...requestData } = args
      const url = `/api/v4/projects/${id}/jobs/${jobId}/erase`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-jobs-job-id-play',
  `Trigger an actionable job (manual, delayed, etc)`,
  {
    id: z.string(),
    jobId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, jobId, ...requestData } = args
      const url = `/api/v4/projects/${id}/jobs/${jobId}/play`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('jobId' in mappedParams) {
        mappedParams['job_id'] = mappedParams['jobId']
        delete mappedParams['jobId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-resource-groups',
  `Get all resource groups for a project`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/resource_groups`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-resource-groups-key',
  `Get a specific resource group`,
  {
    id: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...queryParams } = args
      const url = `/api/v4/projects/${id}/resource_groups/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-resource-groups-key',
  `Edit an existing resource group`,
  {
    id: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...requestData } = args
      const url = `/api/v4/projects/${id}/resource_groups/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-resource-groups-key-upcoming-jobs',
  `List upcoming jobs for a specific resource group`,
  {
    id: z.string(),
    key: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...queryParams } = args
      const url = `/api/v4/projects/${id}/resource_groups/${key}/upcoming_jobs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-runners',
  `List project&#x27;s runners`,
  {
    id: z.string(),
    scope: z.string().optional(),
    type: z.string().optional(),
    paused: z.string().optional(),
    status: z.string().optional(),
    tagList: z.string().optional(),
    versionPrefix: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/runners`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagList' in mappedParams) {
        mappedParams['tag_list'] = mappedParams['tagList']
        delete mappedParams['tagList']
      }
      if ('versionPrefix' in mappedParams) {
        mappedParams['version_prefix'] = mappedParams['versionPrefix']
        delete mappedParams['versionPrefix']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-runners',
  `Assign a runner to project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/runners`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-runners-runner-id',
  `Unassign a project runner from the project`,
  {
    id: z.string(),
    runnerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, runnerId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/runners/${runnerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('runnerId' in mappedParams) {
        mappedParams['runner_id'] = mappedParams['runnerId']
        delete mappedParams['runnerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-runners-reset-registration-token',
  `Reset the runner registration token for a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/runners/reset_registration_token`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-secure-files',
  `Get list of secure files in a project`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/secure_files`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-secure-files',
  `Create a secure file`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/secure_files`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-secure-files-secure-file-id',
  `Get the details of a specific secure file in a project`,
  {
    id: z.string(),
    secureFileId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, secureFileId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/secure_files/${secureFileId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secureFileId' in mappedParams) {
        mappedParams['secure_file_id'] = mappedParams['secureFileId']
        delete mappedParams['secureFileId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-secure-files-secure-file-id',
  `Remove a secure file`,
  {
    id: z.string(),
    secureFileId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, secureFileId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/secure_files/${secureFileId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secureFileId' in mappedParams) {
        mappedParams['secure_file_id'] = mappedParams['secureFileId']
        delete mappedParams['secureFileId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-secure-files-secure-file-id-download',
  `Download secure file`,
  {
    id: z.string(),
    secureFileId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, secureFileId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/secure_files/${secureFileId}/download`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('secureFileId' in mappedParams) {
        mappedParams['secure_file_id'] = mappedParams['secureFileId']
        delete mappedParams['secureFileId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pipelines',
  `Get all Pipelines of the project`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    scope: z.string().optional(),
    status: z.string().optional(),
    ref: z.string().optional(),
    sha: z.string().optional(),
    yamlErrors: z.string().optional(),
    username: z.string().optional(),
    updatedBefore: z.string().optional(),
    updatedAfter: z.string().optional(),
    createdBefore: z.string().optional(),
    createdAfter: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    source: z.string().optional(),
    name: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipelines`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('yamlErrors' in mappedParams) {
        mappedParams['yaml_errors'] = mappedParams['yamlErrors']
        delete mappedParams['yamlErrors']
      }
      if ('updatedBefore' in mappedParams) {
        mappedParams['updated_before'] = mappedParams['updatedBefore']
        delete mappedParams['updatedBefore']
      }
      if ('updatedAfter' in mappedParams) {
        mappedParams['updated_after'] = mappedParams['updatedAfter']
        delete mappedParams['updatedAfter']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-pipeline',
  `Create a new pipeline`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/pipeline`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pipelines-latest',
  `Gets the latest pipeline for the project branch`,
  {
    id: z.string(),
    ref: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipelines/latest`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pipelines-pipeline-id',
  `Gets a specific pipeline for the project`,
  {
    id: z.string(),
    pipelineId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipelines/${pipelineId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pipelineId' in mappedParams) {
        mappedParams['pipeline_id'] = mappedParams['pipelineId']
        delete mappedParams['pipelineId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-pipelines-pipeline-id',
  `Deletes a pipeline`,
  {
    id: z.string(),
    pipelineId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipelines/${pipelineId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pipelineId' in mappedParams) {
        mappedParams['pipeline_id'] = mappedParams['pipelineId']
        delete mappedParams['pipelineId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pipelines-pipeline-id-jobs',
  `Get pipeline jobs`,
  {
    id: z.string(),
    pipelineId: z.string(),
    includeRetried: z.string().optional(),
    scope: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipelines/${pipelineId}/jobs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pipelineId' in mappedParams) {
        mappedParams['pipeline_id'] = mappedParams['pipelineId']
        delete mappedParams['pipelineId']
      }
      if ('includeRetried' in mappedParams) {
        mappedParams['include_retried'] = mappedParams['includeRetried']
        delete mappedParams['includeRetried']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pipelines-pipeline-id-bridges',
  `Get pipeline bridge jobs`,
  {
    id: z.string(),
    pipelineId: z.string(),
    scope: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipelines/${pipelineId}/bridges`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pipelineId' in mappedParams) {
        mappedParams['pipeline_id'] = mappedParams['pipelineId']
        delete mappedParams['pipelineId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pipelines-pipeline-id-variables',
  `Gets the variables for a given pipeline`,
  {
    id: z.string(),
    pipelineId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipelines/${pipelineId}/variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pipelineId' in mappedParams) {
        mappedParams['pipeline_id'] = mappedParams['pipelineId']
        delete mappedParams['pipelineId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pipelines-pipeline-id-test-report',
  `Gets the test report for a given pipeline`,
  {
    id: z.string(),
    pipelineId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipelines/${pipelineId}/test_report`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pipelineId' in mappedParams) {
        mappedParams['pipeline_id'] = mappedParams['pipelineId']
        delete mappedParams['pipelineId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pipelines-pipeline-id-test-report-summary',
  `Gets the test report summary for a given pipeline`,
  {
    id: z.string(),
    pipelineId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipelines/${pipelineId}/test_report_summary`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pipelineId' in mappedParams) {
        mappedParams['pipeline_id'] = mappedParams['pipelineId']
        delete mappedParams['pipelineId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-pipelines-pipeline-id-metadata',
  `Updates pipeline metadata`,
  {
    id: z.string(),
    pipelineId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineId, ...requestData } = args
      const url = `/api/v4/projects/${id}/pipelines/${pipelineId}/metadata`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pipelineId' in mappedParams) {
        mappedParams['pipeline_id'] = mappedParams['pipelineId']
        delete mappedParams['pipelineId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-pipelines-pipeline-id-retry',
  `Retry builds in the pipeline`,
  {
    id: z.string(),
    pipelineId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineId, ...requestData } = args
      const url = `/api/v4/projects/${id}/pipelines/${pipelineId}/retry`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pipelineId' in mappedParams) {
        mappedParams['pipeline_id'] = mappedParams['pipelineId']
        delete mappedParams['pipelineId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-pipelines-pipeline-id-cancel',
  `Cancel all builds in the pipeline`,
  {
    id: z.string(),
    pipelineId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineId, ...requestData } = args
      const url = `/api/v4/projects/${id}/pipelines/${pipelineId}/cancel`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pipelineId' in mappedParams) {
        mappedParams['pipeline_id'] = mappedParams['pipelineId']
        delete mappedParams['pipelineId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pipeline-schedules',
  `Get all pipeline schedules`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    scope: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipeline_schedules`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-pipeline-schedules',
  `Create a new pipeline schedule`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/pipeline_schedules`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pipeline-schedules-pipeline-schedule-id',
  `Get a single pipeline schedule`,
  {
    id: z.string(),
    pipelineScheduleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineScheduleId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipeline_schedules/${pipelineScheduleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pipelineScheduleId' in mappedParams) {
        mappedParams['pipeline_schedule_id'] = mappedParams['pipelineScheduleId']
        delete mappedParams['pipelineScheduleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-pipeline-schedules-pipeline-schedule-id',
  `Edit a pipeline schedule`,
  {
    id: z.string(),
    pipelineScheduleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineScheduleId, ...requestData } = args
      const url = `/api/v4/projects/${id}/pipeline_schedules/${pipelineScheduleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pipelineScheduleId' in mappedParams) {
        mappedParams['pipeline_schedule_id'] = mappedParams['pipelineScheduleId']
        delete mappedParams['pipelineScheduleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-pipeline-schedules-pipeline-schedule-id',
  `Delete a pipeline schedule`,
  {
    id: z.string(),
    pipelineScheduleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineScheduleId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipeline_schedules/${pipelineScheduleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pipelineScheduleId' in mappedParams) {
        mappedParams['pipeline_schedule_id'] = mappedParams['pipelineScheduleId']
        delete mappedParams['pipelineScheduleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pipeline-schedules-pipeline-schedule-id-pipelines',
  `Get all pipelines triggered from a pipeline schedule`,
  {
    id: z.string(),
    pipelineScheduleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineScheduleId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipeline_schedules/${pipelineScheduleId}/pipelines`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pipelineScheduleId' in mappedParams) {
        mappedParams['pipeline_schedule_id'] = mappedParams['pipelineScheduleId']
        delete mappedParams['pipelineScheduleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-pipeline-schedules-pipeline-schedule-id-take-ownership',
  `Take ownership of a pipeline schedule`,
  {
    id: z.string(),
    pipelineScheduleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineScheduleId, ...requestData } = args
      const url = `/api/v4/projects/${id}/pipeline_schedules/${pipelineScheduleId}/take_ownership`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pipelineScheduleId' in mappedParams) {
        mappedParams['pipeline_schedule_id'] = mappedParams['pipelineScheduleId']
        delete mappedParams['pipelineScheduleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-pipeline-schedules-pipeline-schedule-id-play',
  `Play a scheduled pipeline immediately`,
  {
    id: z.string(),
    pipelineScheduleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineScheduleId, ...requestData } = args
      const url = `/api/v4/projects/${id}/pipeline_schedules/${pipelineScheduleId}/play`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pipelineScheduleId' in mappedParams) {
        mappedParams['pipeline_schedule_id'] = mappedParams['pipelineScheduleId']
        delete mappedParams['pipelineScheduleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-pipeline-schedules-pipeline-schedule-id-variables',
  `Create a new pipeline schedule variable`,
  {
    id: z.string(),
    pipelineScheduleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineScheduleId, ...requestData } = args
      const url = `/api/v4/projects/${id}/pipeline_schedules/${pipelineScheduleId}/variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pipelineScheduleId' in mappedParams) {
        mappedParams['pipeline_schedule_id'] = mappedParams['pipelineScheduleId']
        delete mappedParams['pipelineScheduleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-pipeline-schedules-pipeline-schedule-id-variables-key',
  `Edit a pipeline schedule variable`,
  {
    id: z.string(),
    pipelineScheduleId: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineScheduleId, key, ...requestData } = args
      const url = `/api/v4/projects/${id}/pipeline_schedules/${pipelineScheduleId}/variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('pipelineScheduleId' in mappedParams) {
        mappedParams['pipeline_schedule_id'] = mappedParams['pipelineScheduleId']
        delete mappedParams['pipelineScheduleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-pipeline-schedules-pipeline-schedule-id-variables-key',
  `Delete a pipeline schedule variable`,
  {
    id: z.string(),
    pipelineScheduleId: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, pipelineScheduleId, key, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pipeline_schedules/${pipelineScheduleId}/variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pipelineScheduleId' in mappedParams) {
        mappedParams['pipeline_schedule_id'] = mappedParams['pipelineScheduleId']
        delete mappedParams['pipelineScheduleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-idtrigger-pipeline',
  `Trigger a GitLab project pipeline`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/trigger/pipeline`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-triggers',
  `Get trigger tokens list`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/triggers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-triggers',
  `Create a trigger token`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/triggers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-triggers-trigger-id',
  `Get specific trigger token of a project`,
  {
    id: z.string(),
    triggerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, triggerId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/triggers/${triggerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('triggerId' in mappedParams) {
        mappedParams['trigger_id'] = mappedParams['triggerId']
        delete mappedParams['triggerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-triggers-trigger-id',
  `Update a trigger token`,
  {
    id: z.string(),
    triggerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, triggerId, ...requestData } = args
      const url = `/api/v4/projects/${id}/triggers/${triggerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('triggerId' in mappedParams) {
        mappedParams['trigger_id'] = mappedParams['triggerId']
        delete mappedParams['triggerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-triggers-trigger-id',
  `Delete a trigger token`,
  {
    id: z.string(),
    triggerId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, triggerId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/triggers/${triggerId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('triggerId' in mappedParams) {
        mappedParams['trigger_id'] = mappedParams['triggerId']
        delete mappedParams['triggerId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-variables',
  `Get project variables`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-variables',
  `Create a new variable in a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/variables`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-variables-key',
  `Get the details of a single variable from a project`,
  {
    id: z.string(),
    key: z.string(),
    'filter[environmentScope]': z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...queryParams } = args
      const url = `/api/v4/projects/${id}/variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('filter[environmentScope]' in mappedParams) {
        mappedParams['filter[environment_scope]'] = mappedParams['filter[environmentScope]']
        delete mappedParams['filter[environmentScope]']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-variables-key',
  `Update an existing variable from a project`,
  {
    id: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...requestData } = args
      const url = `/api/v4/projects/${id}/variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-variables-key',
  `Delete an existing variable from a project`,
  {
    id: z.string(),
    key: z.string(),
    'filter[environmentScope]': z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...queryParams } = args
      const url = `/api/v4/projects/${id}/variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('filter[environmentScope]' in mappedParams) {
        mappedParams['filter[environment_scope]'] = mappedParams['filter[environmentScope]']
        delete mappedParams['filter[environmentScope]']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-cluster-agents-agent-id-tokens',
  `List tokens for an agent`,
  {
    id: z.string(),
    agentId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, agentId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/cluster_agents/${agentId}/tokens`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('agentId' in mappedParams) {
        mappedParams['agent_id'] = mappedParams['agentId']
        delete mappedParams['agentId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-cluster-agents-agent-id-tokens',
  `Create an agent token`,
  {
    id: z.string(),
    agentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, agentId, ...requestData } = args
      const url = `/api/v4/projects/${id}/cluster_agents/${agentId}/tokens`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('agentId' in mappedParams) {
        mappedParams['agent_id'] = mappedParams['agentId']
        delete mappedParams['agentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-cluster-agents-agent-id-tokens-token-id',
  `Get a single agent token`,
  {
    id: z.string(),
    agentId: z.string(),
    tokenId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, agentId, tokenId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/cluster_agents/${agentId}/tokens/${tokenId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('agentId' in mappedParams) {
        mappedParams['agent_id'] = mappedParams['agentId']
        delete mappedParams['agentId']
      }
      if ('tokenId' in mappedParams) {
        mappedParams['token_id'] = mappedParams['tokenId']
        delete mappedParams['tokenId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-cluster-agents-agent-id-tokens-token-id',
  `Revoke an agent token`,
  {
    id: z.string(),
    agentId: z.string(),
    tokenId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, agentId, tokenId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/cluster_agents/${agentId}/tokens/${tokenId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('agentId' in mappedParams) {
        mappedParams['agent_id'] = mappedParams['agentId']
        delete mappedParams['agentId']
      }
      if ('tokenId' in mappedParams) {
        mappedParams['token_id'] = mappedParams['tokenId']
        delete mappedParams['tokenId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-cluster-agents',
  `List the agents for a project`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/cluster_agents`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-cluster-agents',
  `Register an agent with a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/cluster_agents`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-cluster-agents-agent-id',
  `Get details about an agent`,
  {
    id: z.string(),
    agentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, agentId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/cluster_agents/${agentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('agentId' in mappedParams) {
        mappedParams['agent_id'] = mappedParams['agentId']
        delete mappedParams['agentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-cluster-agents-agent-id',
  `Delete a registered agent`,
  {
    id: z.string(),
    agentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, agentId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/cluster_agents/${agentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('agentId' in mappedParams) {
        mappedParams['agent_id'] = mappedParams['agentId']
        delete mappedParams['agentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-cargo-config-json',
  `Get config.json`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/cargo/config.json`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-commits',
  `Get a project repository commits`,
  {
    id: z.string(),
    refName: z.string().optional(),
    since: z.string().optional(),
    until: z.string().optional(),
    path: z.string().optional(),
    author: z.string().optional(),
    all: z.string().optional(),
    withStats: z.string().optional(),
    firstParent: z.string().optional(),
    order: z.string().optional(),
    trailers: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/commits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('refName' in mappedParams) {
        mappedParams['ref_name'] = mappedParams['refName']
        delete mappedParams['refName']
      }
      if ('withStats' in mappedParams) {
        mappedParams['with_stats'] = mappedParams['withStats']
        delete mappedParams['withStats']
      }
      if ('firstParent' in mappedParams) {
        mappedParams['first_parent'] = mappedParams['firstParent']
        delete mappedParams['firstParent']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-repository-commits',
  `Commit multiple file changes as one commit`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository/commits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-commits-sha',
  `Get a specific commit of a project`,
  {
    id: z.string(),
    sha: z.string(),
    stats: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/commits/${sha}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-commits-sha-diff',
  `Get the diff for a specific commit of a project`,
  {
    id: z.string(),
    sha: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    unidiff: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/commits/${sha}/diff`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-commits-sha-comments',
  `Get a commit&#x27;s comments`,
  {
    id: z.string(),
    sha: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/commits/${sha}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-repository-commits-sha-comments',
  `Post comment to commit`,
  {
    id: z.string(),
    sha: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository/commits/${sha}/comments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-commits-sha-sequence',
  `Get the sequence count of a commit SHA`,
  {
    id: z.string(),
    sha: z.string(),
    firstParent: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/commits/${sha}/sequence`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('firstParent' in mappedParams) {
        mappedParams['first_parent'] = mappedParams['firstParent']
        delete mappedParams['firstParent']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-repository-commits-sha-cherry-pick',
  `Cherry pick commit into a branch`,
  {
    id: z.string(),
    sha: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository/commits/${sha}/cherry_pick`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-repository-commits-sha-revert',
  `Revert a commit in a branch`,
  {
    id: z.string(),
    sha: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository/commits/${sha}/revert`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-commits-sha-refs',
  `Get all references a commit is pushed to`,
  {
    id: z.string(),
    sha: z.string(),
    type: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/commits/${sha}/refs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-commits-sha-merge-requests',
  `Get Merge Requests associated with a commit`,
  {
    id: z.string(),
    sha: z.string(),
    state: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/commits/${sha}/merge_requests`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-commits-sha-signature',
  `Get a commit&#x27;s signature`,
  {
    id: z.string(),
    sha: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/commits/${sha}/signature`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-commits-sha-statuses',
  `Get a commit&#x27;s statuses`,
  {
    id: z.string(),
    sha: z.string(),
    ref: z.string().optional(),
    stage: z.string().optional(),
    name: z.string().optional(),
    pipelineId: z.string().optional(),
    all: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/commits/${sha}/statuses`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('pipelineId' in mappedParams) {
        mappedParams['pipeline_id'] = mappedParams['pipelineId']
        delete mappedParams['pipelineId']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-statuses-sha',
  `Post status to a commit`,
  {
    id: z.string(),
    sha: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...requestData } = args
      const url = `/api/v4/projects/${id}/statuses/${sha}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-composer',
  `Composer packages endpoint for registering packages`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/composer`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-composer-archives',
  `Composer package endpoint to download a package archive`,
  {
    id: z.string(),
    packageName: z.string(),
    sha: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/composer/archives/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-users-authenticate',
  `Authenticate user against conan CLI`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/users/authenticate`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-users-check-credentials',
  `Check for valid user credentials per conan CLI`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/users/check_credentials`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-conans-search',
  `Search for packages`,
  {
    id: z.string(),
    q: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/conans/search`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-search',
  `Get package references metadata`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/search`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-ping',
  `Ping the Conan API`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/ping`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-packages-conan-package-reference',
  `Package Snapshot`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    conanPackageReference: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        conanPackageReference,
        ...queryParams
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/packages/${conanPackageReference}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-conans-package-name-package-version-package-username-package-channel',
  `Recipe Snapshot`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-packages-conan-v1-conans-package-name-package-version-package-username-package-channel',
  `Delete Package`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-packages-conan-package-reference-digest',
  `Package Digest`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    conanPackageReference: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        conanPackageReference,
        ...queryParams
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/packages/${conanPackageReference}/digest`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-digest',
  `Recipe Digest`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/digest`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-packages-conan-package-reference-download-urls',
  `Package Download Urls`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    conanPackageReference: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        conanPackageReference,
        ...queryParams
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/packages/${conanPackageReference}/download_urls`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-download-urls',
  `Recipe Download Urls`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/download_urls`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-packages-conan-package-reference-upload-urls',
  `Package Upload Urls`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    conanPackageReference: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        conanPackageReference,
        ...requestData
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/packages/${conanPackageReference}/upload_urls`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-upload-urls',
  `Recipe Upload Urls`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageUsername, packageChannel, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/upload_urls`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-files-package-name-package-version-package-username-package-channel-recipe-revision-export-file-name',
  `Download recipe files`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        fileName,
        ...queryParams
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/files/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/${recipeRevision}/export/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-conan-v1-files-package-name-package-version-package-username-package-channel-recipe-revision-export-file-name',
  `Upload recipe package files`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        fileName,
        ...requestData
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/files/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/${recipeRevision}/export/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-conan-v1-files-package-name-package-version-package-username-package-channel-recipe-revision-export-file-name-authorize',
  `Workhorse authorize the conan recipe file`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        fileName,
        ...requestData
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/files/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/${recipeRevision}/export/${fileName}/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v1-files-package-name-package-version-package-username-package-channel-recipe-revision-package-conan-package-reference-package-revision-file-name',
  `Download package files`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
    packageRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        packageRevision,
        fileName,
        ...queryParams
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/files/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/${recipeRevision}/package/${conanPackageReference}/${packageRevision}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }
      if ('packageRevision' in mappedParams) {
        mappedParams['package_revision'] = mappedParams['packageRevision']
        delete mappedParams['packageRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-conan-v1-files-package-name-package-version-package-username-package-channel-recipe-revision-package-conan-package-reference-package-revision-file-name',
  `Upload package files`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
    packageRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        packageRevision,
        fileName,
        ...requestData
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/files/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/${recipeRevision}/package/${conanPackageReference}/${packageRevision}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }
      if ('packageRevision' in mappedParams) {
        mappedParams['package_revision'] = mappedParams['packageRevision']
        delete mappedParams['packageRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-conan-v1-files-package-name-package-version-package-username-package-channel-recipe-revision-package-conan-package-reference-package-revision-file-name-authorize',
  `Workhorse authorize the conan package file`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
    packageRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        packageRevision,
        fileName,
        ...requestData
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v1/files/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/${recipeRevision}/package/${conanPackageReference}/${packageRevision}/${fileName}/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }
      if ('packageRevision' in mappedParams) {
        mappedParams['package_revision'] = mappedParams['packageRevision']
        delete mappedParams['packageRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-users-authenticate',
  `Authenticate user against conan CLI`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/users/authenticate`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-users-check-credentials',
  `Check for valid user credentials per conan CLI`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/users/check_credentials`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-conans-search',
  `Search for packages`,
  {
    id: z.string(),
    q: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/search`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-search',
  `Get package references metadata`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/search`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-latest',
  `Get the latest recipe revision`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/latest`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions',
  `Get the list of revisions`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision',
  `Delete recipe revision`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageUsername, packageChannel, recipeRevision, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision-files',
  `List recipe files`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageUsername, packageChannel, recipeRevision, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}/files`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision-files-file-name',
  `Download recipe files`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        fileName,
        ...queryParams
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}/files/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision-files-file-name',
  `Upload recipe package files`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        fileName,
        ...requestData
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}/files/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision-files-file-name-authorize',
  `Workhorse authorize the conan recipe file`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        fileName,
        ...requestData
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}/files/${fileName}/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision-search',
  `Get package references metadata`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageUsername, packageChannel, recipeRevision, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}/search`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision-packages-conan-package-reference-latest',
  `Get the latest package revision`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        ...queryParams
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}/packages/${conanPackageReference}/latest`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision-packages-conan-package-reference-revisions',
  `Get the list of package revisions`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        ...queryParams
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}/packages/${conanPackageReference}/revisions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision-packages-conan-package-reference-revisions-package-revision',
  `Delete package revision`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
    packageRevision: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        packageRevision,
        ...queryParams
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}/packages/${conanPackageReference}/revisions/${packageRevision}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }
      if ('packageRevision' in mappedParams) {
        mappedParams['package_revision'] = mappedParams['packageRevision']
        delete mappedParams['packageRevision']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision-packages-conan-package-reference-revisions-package-revision-files',
  `List package files`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
    packageRevision: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        packageRevision,
        ...queryParams
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}/packages/${conanPackageReference}/revisions/${packageRevision}/files`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }
      if ('packageRevision' in mappedParams) {
        mappedParams['package_revision'] = mappedParams['packageRevision']
        delete mappedParams['packageRevision']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision-packages-conan-package-reference-revisions-package-revision-files-file-name',
  `Download package files`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
    packageRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        packageRevision,
        fileName,
        ...queryParams
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}/packages/${conanPackageReference}/revisions/${packageRevision}/files/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }
      if ('packageRevision' in mappedParams) {
        mappedParams['package_revision'] = mappedParams['packageRevision']
        delete mappedParams['packageRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision-packages-conan-package-reference-revisions-package-revision-files-file-name',
  `Upload package files`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
    packageRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        packageRevision,
        fileName,
        ...requestData
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}/packages/${conanPackageReference}/revisions/${packageRevision}/files/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }
      if ('packageRevision' in mappedParams) {
        mappedParams['package_revision'] = mappedParams['packageRevision']
        delete mappedParams['packageRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-conan-v2-conans-package-name-package-version-package-username-package-channel-revisions-recipe-revision-packages-conan-package-reference-revisions-package-revision-files-file-name-authorize',
  `Workhorse authorize the conan package file`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
    packageRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        id,
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        packageRevision,
        fileName,
        ...requestData
      } = args
      const url = `/api/v4/projects/${id}/packages/conan/v2/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/revisions/${recipeRevision}/packages/${conanPackageReference}/revisions/${packageRevision}/files/${fileName}/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }
      if ('packageRevision' in mappedParams) {
        mappedParams['package_revision'] = mappedParams['packageRevision']
        delete mappedParams['packageRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-debian-dists',
  `The Release file signature`,
  {
    id: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, distribution, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/debian/dists/${distribution}/Release.gpg`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-debian-dists',
  `The unsigned Release file`,
  {
    id: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, distribution, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/debian/dists/${distribution}/Release`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-debian-dists',
  `The signed Release file`,
  {
    id: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, distribution, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/debian/dists/${distribution}/InRelease`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-debian-dists',
  `The installer (udeb) binary files index`,
  {
    id: z.string(),
    component: z.string(),
    architecture: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, component, architecture, distribution, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/debian/dists/${distribution}/${component}/debian-installer/binary-${architecture}/Packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-debian-dists',
  `The installer (udeb) binary files index by hash`,
  {
    id: z.string(),
    component: z.string(),
    architecture: z.string(),
    fileSha256: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, component, architecture, fileSha256, distribution, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/debian/dists/${distribution}/${component}/debian-installer/binary-${architecture}/by-hash/SHA256/${fileSha256}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileSha256' in mappedParams) {
        mappedParams['file_sha256'] = mappedParams['fileSha256']
        delete mappedParams['fileSha256']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-debian-dists',
  `The source files index`,
  {
    id: z.string(),
    component: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, component, distribution, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/debian/dists/${distribution}/${component}/source/Sources`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-debian-dists',
  `The source files index by hash`,
  {
    id: z.string(),
    component: z.string(),
    fileSha256: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, component, fileSha256, distribution, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/debian/dists/${distribution}/${component}/source/by-hash/SHA256/${fileSha256}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileSha256' in mappedParams) {
        mappedParams['file_sha256'] = mappedParams['fileSha256']
        delete mappedParams['fileSha256']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-debian-dists',
  `The binary files index`,
  {
    id: z.string(),
    component: z.string(),
    architecture: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, component, architecture, distribution, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/debian/dists/${distribution}/${component}/binary-${architecture}/Packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-debian-dists',
  `The binary files index by hash`,
  {
    id: z.string(),
    component: z.string(),
    architecture: z.string(),
    fileSha256: z.string(),
    distribution: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, component, architecture, fileSha256, distribution, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/debian/dists/${distribution}/${component}/binary-${architecture}/by-hash/SHA256/${fileSha256}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileSha256' in mappedParams) {
        mappedParams['file_sha256'] = mappedParams['fileSha256']
        delete mappedParams['fileSha256']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-debian-pool-distribution-letter-package-name-package-version-file-name',
  `Download Debian package`,
  {
    id: z.string(),
    distribution: z.string(),
    letter: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, distribution, letter, packageName, packageVersion, fileName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/debian/pool/${distribution}/${letter}/${packageName}/${packageVersion}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-debian-file-name',
  `Upload Debian package`,
  {
    id: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, fileName, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/debian/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-debian-file-name-authorize',
  `Authorize Debian package upload`,
  {
    id: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, fileName, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/debian/${fileName}/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-deploy-keys',
  `List deploy keys for project`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/deploy_keys`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-deploy-keys',
  `Add deploy key`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/deploy_keys`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-deploy-keys-key-id',
  `Get a single deploy key`,
  {
    id: z.string(),
    keyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, keyId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/deploy_keys/${keyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('keyId' in mappedParams) {
        mappedParams['key_id'] = mappedParams['keyId']
        delete mappedParams['keyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-deploy-keys-key-id',
  `Update deploy key`,
  {
    id: z.string(),
    keyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, keyId, ...requestData } = args
      const url = `/api/v4/projects/${id}/deploy_keys/${keyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('keyId' in mappedParams) {
        mappedParams['key_id'] = mappedParams['keyId']
        delete mappedParams['keyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-deploy-keys-key-id',
  `Delete deploy key`,
  {
    id: z.string(),
    keyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, keyId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/deploy_keys/${keyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('keyId' in mappedParams) {
        mappedParams['key_id'] = mappedParams['keyId']
        delete mappedParams['keyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-deploy-keys-key-id-enable',
  `Enable a deploy key`,
  {
    id: z.string(),
    keyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, keyId, ...requestData } = args
      const url = `/api/v4/projects/${id}/deploy_keys/${keyId}/enable`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('keyId' in mappedParams) {
        mappedParams['key_id'] = mappedParams['keyId']
        delete mappedParams['keyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-deploy-tokens',
  `List project deploy tokens`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    active: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/deploy_tokens`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-deploy-tokens',
  `Create a project deploy token`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/deploy_tokens`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-deploy-tokens-token-id',
  `Get a project deploy token`,
  {
    id: z.string(),
    tokenId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tokenId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/deploy_tokens/${tokenId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tokenId' in mappedParams) {
        mappedParams['token_id'] = mappedParams['tokenId']
        delete mappedParams['tokenId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-deploy-tokens-token-id',
  `Delete a project deploy token`,
  {
    id: z.string(),
    tokenId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tokenId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/deploy_tokens/${tokenId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tokenId' in mappedParams) {
        mappedParams['token_id'] = mappedParams['tokenId']
        delete mappedParams['tokenId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-deployments',
  `List project deployments`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    updatedAfter: z.string().optional(),
    updatedBefore: z.string().optional(),
    finishedAfter: z.string().optional(),
    finishedBefore: z.string().optional(),
    environment: z.string().optional(),
    status: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/deployments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('updatedAfter' in mappedParams) {
        mappedParams['updated_after'] = mappedParams['updatedAfter']
        delete mappedParams['updatedAfter']
      }
      if ('updatedBefore' in mappedParams) {
        mappedParams['updated_before'] = mappedParams['updatedBefore']
        delete mappedParams['updatedBefore']
      }
      if ('finishedAfter' in mappedParams) {
        mappedParams['finished_after'] = mappedParams['finishedAfter']
        delete mappedParams['finishedAfter']
      }
      if ('finishedBefore' in mappedParams) {
        mappedParams['finished_before'] = mappedParams['finishedBefore']
        delete mappedParams['finishedBefore']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-deployments',
  `Create a deployment`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/deployments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-deployments-deployment-id',
  `Get a specific deployment`,
  {
    id: z.string(),
    deploymentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, deploymentId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/deployments/${deploymentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('deploymentId' in mappedParams) {
        mappedParams['deployment_id'] = mappedParams['deploymentId']
        delete mappedParams['deploymentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-deployments-deployment-id',
  `Update a deployment`,
  {
    id: z.string(),
    deploymentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, deploymentId, ...requestData } = args
      const url = `/api/v4/projects/${id}/deployments/${deploymentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('deploymentId' in mappedParams) {
        mappedParams['deployment_id'] = mappedParams['deploymentId']
        delete mappedParams['deploymentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-deployments-deployment-id',
  `Delete a specific deployment`,
  {
    id: z.string(),
    deploymentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, deploymentId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/deployments/${deploymentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('deploymentId' in mappedParams) {
        mappedParams['deployment_id'] = mappedParams['deploymentId']
        delete mappedParams['deploymentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-deployments-deployment-id-merge-requests',
  `List of merge requests associated with a deployment`,
  {
    id: z.string(),
    deploymentId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    authorId: z.string().optional(),
    authorUsername: z.string().optional(),
    assigneeId: z.string().optional(),
    assigneeUsername: z.string().optional(),
    reviewerUsername: z.string().optional(),
    labels: z.string().optional(),
    milestone: z.string().optional(),
    myReactionEmoji: z.string().optional(),
    reviewerId: z.string().optional(),
    state: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    withLabelsDetails: z.string().optional(),
    withMergeStatusRecheck: z.string().optional(),
    createdAfter: z.string().optional(),
    createdBefore: z.string().optional(),
    updatedAfter: z.string().optional(),
    updatedBefore: z.string().optional(),
    view: z.string().optional(),
    scope: z.string().optional(),
    sourceBranch: z.string().optional(),
    sourceProjectId: z.string().optional(),
    targetBranch: z.string().optional(),
    search: z.string().optional(),
    in: z.string().optional(),
    wip: z.string().optional(),
    'not[authorId]': z.string().optional(),
    'not[authorUsername]': z.string().optional(),
    'not[assigneeId]': z.string().optional(),
    'not[assigneeUsername]': z.string().optional(),
    'not[reviewerUsername]': z.string().optional(),
    'not[labels]': z.string().optional(),
    'not[milestone]': z.string().optional(),
    'not[myReactionEmoji]': z.string().optional(),
    'not[reviewerId]': z.string().optional(),
    deployedBefore: z.string().optional(),
    deployedAfter: z.string().optional(),
    environment: z.string().optional(),
    approved: z.string().optional(),
    mergeUserId: z.string().optional(),
    mergeUserUsername: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, deploymentId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/deployments/${deploymentId}/merge_requests`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('deploymentId' in mappedParams) {
        mappedParams['deployment_id'] = mappedParams['deploymentId']
        delete mappedParams['deploymentId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('authorId' in mappedParams) {
        mappedParams['author_id'] = mappedParams['authorId']
        delete mappedParams['authorId']
      }
      if ('authorUsername' in mappedParams) {
        mappedParams['author_username'] = mappedParams['authorUsername']
        delete mappedParams['authorUsername']
      }
      if ('assigneeId' in mappedParams) {
        mappedParams['assignee_id'] = mappedParams['assigneeId']
        delete mappedParams['assigneeId']
      }
      if ('assigneeUsername' in mappedParams) {
        mappedParams['assignee_username'] = mappedParams['assigneeUsername']
        delete mappedParams['assigneeUsername']
      }
      if ('reviewerUsername' in mappedParams) {
        mappedParams['reviewer_username'] = mappedParams['reviewerUsername']
        delete mappedParams['reviewerUsername']
      }
      if ('myReactionEmoji' in mappedParams) {
        mappedParams['my_reaction_emoji'] = mappedParams['myReactionEmoji']
        delete mappedParams['myReactionEmoji']
      }
      if ('reviewerId' in mappedParams) {
        mappedParams['reviewer_id'] = mappedParams['reviewerId']
        delete mappedParams['reviewerId']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('withLabelsDetails' in mappedParams) {
        mappedParams['with_labels_details'] = mappedParams['withLabelsDetails']
        delete mappedParams['withLabelsDetails']
      }
      if ('withMergeStatusRecheck' in mappedParams) {
        mappedParams['with_merge_status_recheck'] = mappedParams['withMergeStatusRecheck']
        delete mappedParams['withMergeStatusRecheck']
      }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('updatedAfter' in mappedParams) {
        mappedParams['updated_after'] = mappedParams['updatedAfter']
        delete mappedParams['updatedAfter']
      }
      if ('updatedBefore' in mappedParams) {
        mappedParams['updated_before'] = mappedParams['updatedBefore']
        delete mappedParams['updatedBefore']
      }
      if ('sourceBranch' in mappedParams) {
        mappedParams['source_branch'] = mappedParams['sourceBranch']
        delete mappedParams['sourceBranch']
      }
      if ('sourceProjectId' in mappedParams) {
        mappedParams['source_project_id'] = mappedParams['sourceProjectId']
        delete mappedParams['sourceProjectId']
      }
      if ('targetBranch' in mappedParams) {
        mappedParams['target_branch'] = mappedParams['targetBranch']
        delete mappedParams['targetBranch']
      }
      if ('not[authorId]' in mappedParams) {
        mappedParams['not[author_id]'] = mappedParams['not[authorId]']
        delete mappedParams['not[authorId]']
      }
      if ('not[authorUsername]' in mappedParams) {
        mappedParams['not[author_username]'] = mappedParams['not[authorUsername]']
        delete mappedParams['not[authorUsername]']
      }
      if ('not[assigneeId]' in mappedParams) {
        mappedParams['not[assignee_id]'] = mappedParams['not[assigneeId]']
        delete mappedParams['not[assigneeId]']
      }
      if ('not[assigneeUsername]' in mappedParams) {
        mappedParams['not[assignee_username]'] = mappedParams['not[assigneeUsername]']
        delete mappedParams['not[assigneeUsername]']
      }
      if ('not[reviewerUsername]' in mappedParams) {
        mappedParams['not[reviewer_username]'] = mappedParams['not[reviewerUsername]']
        delete mappedParams['not[reviewerUsername]']
      }
      if ('not[myReactionEmoji]' in mappedParams) {
        mappedParams['not[my_reaction_emoji]'] = mappedParams['not[myReactionEmoji]']
        delete mappedParams['not[myReactionEmoji]']
      }
      if ('not[reviewerId]' in mappedParams) {
        mappedParams['not[reviewer_id]'] = mappedParams['not[reviewerId]']
        delete mappedParams['not[reviewerId]']
      }
      if ('deployedBefore' in mappedParams) {
        mappedParams['deployed_before'] = mappedParams['deployedBefore']
        delete mappedParams['deployedBefore']
      }
      if ('deployedAfter' in mappedParams) {
        mappedParams['deployed_after'] = mappedParams['deployedAfter']
        delete mappedParams['deployedAfter']
      }
      if ('mergeUserId' in mappedParams) {
        mappedParams['merge_user_id'] = mappedParams['mergeUserId']
        delete mappedParams['mergeUserId']
      }
      if ('mergeUserUsername' in mappedParams) {
        mappedParams['merge_user_username'] = mappedParams['mergeUserUsername']
        delete mappedParams['mergeUserUsername']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-deployments-deployment-id-approval',
  `Approve or reject a blocked deployment`,
  {
    id: z.string(),
    deploymentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, deploymentId, ...requestData } = args
      const url = `/api/v4/projects/${id}/deployments/${deploymentId}/approval`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('deploymentId' in mappedParams) {
        mappedParams['deployment_id'] = mappedParams['deploymentId']
        delete mappedParams['deploymentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-draft-notes',
  `Get a list of merge request draft notes`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/draft_notes`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-draft-notes',
  `Create a new draft note`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/draft_notes`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-draft-notes-draft-note-id',
  `Get a single draft note`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    draftNoteId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, draftNoteId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/draft_notes/${draftNoteId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('draftNoteId' in mappedParams) {
        mappedParams['draft_note_id'] = mappedParams['draftNoteId']
        delete mappedParams['draftNoteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-merge-requests-merge-request-iid-draft-notes-draft-note-id',
  `Modify an existing draft note`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    draftNoteId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, draftNoteId, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/draft_notes/${draftNoteId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('draftNoteId' in mappedParams) {
        mappedParams['draft_note_id'] = mappedParams['draftNoteId']
        delete mappedParams['draftNoteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-merge-requests-merge-request-iid-draft-notes-draft-note-id',
  `Delete a draft note`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    draftNoteId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, draftNoteId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/draft_notes/${draftNoteId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('draftNoteId' in mappedParams) {
        mappedParams['draft_note_id'] = mappedParams['draftNoteId']
        delete mappedParams['draftNoteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-merge-requests-merge-request-iid-draft-notes-draft-note-id-publish',
  `Publish a pending draft note`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    draftNoteId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, draftNoteId, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/draft_notes/${draftNoteId}/publish`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('draftNoteId' in mappedParams) {
        mappedParams['draft_note_id'] = mappedParams['draftNoteId']
        delete mappedParams['draftNoteId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-draft-notes-bulk-publish',
  `Bulk publish all pending draft notes`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/draft_notes/bulk_publish`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-environments',
  `List environments`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    name: z.string().optional(),
    search: z.string().optional(),
    states: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/environments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-environments',
  `Create a new environment`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/environments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-environments-environment-id',
  `Update an existing environment`,
  {
    id: z.string(),
    environmentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, environmentId, ...requestData } = args
      const url = `/api/v4/projects/${id}/environments/${environmentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('environmentId' in mappedParams) {
        mappedParams['environment_id'] = mappedParams['environmentId']
        delete mappedParams['environmentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-environments-environment-id',
  `Delete an environment`,
  {
    id: z.string(),
    environmentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, environmentId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/environments/${environmentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentId' in mappedParams) {
        mappedParams['environment_id'] = mappedParams['environmentId']
        delete mappedParams['environmentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-environments-environment-id',
  `Get a specific environment`,
  {
    id: z.string(),
    environmentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, environmentId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/environments/${environmentId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('environmentId' in mappedParams) {
        mappedParams['environment_id'] = mappedParams['environmentId']
        delete mappedParams['environmentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-environments-review-apps',
  `Delete multiple stopped review apps`,
  {
    id: z.string(),
    before: z.string().optional(),
    limit: z.string().optional(),
    dryRun: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/environments/review_apps`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('dryRun' in mappedParams) {
        mappedParams['dry_run'] = mappedParams['dryRun']
        delete mappedParams['dryRun']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-environments-environment-id-stop',
  `Stop an environment`,
  {
    id: z.string(),
    environmentId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, environmentId, ...requestData } = args
      const url = `/api/v4/projects/${id}/environments/${environmentId}/stop`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('environmentId' in mappedParams) {
        mappedParams['environment_id'] = mappedParams['environmentId']
        delete mappedParams['environmentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-environments-stop-stale',
  `Stop stale environments`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/environments/stop_stale`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-error-tracking-client-keys',
  `List project client keys`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/error_tracking/client_keys`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-error-tracking-client-keys',
  `Create a client key`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/error_tracking/client_keys`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-error-tracking-client-keys-key-id',
  `Delete a client key`,
  {
    id: z.string(),
    keyId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, keyId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/error_tracking/client_keys/${keyId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('keyId' in mappedParams) {
        mappedParams['key_id'] = mappedParams['keyId']
        delete mappedParams['keyId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-error-tracking-settings',
  `Get Error Tracking settings`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/error_tracking/settings`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'patch-api-v4-projects-id-error-tracking-settings',
  `Enable or disable the Error Tracking project settings`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/error_tracking/settings`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-error-tracking-settings',
  `Update Error Tracking project settings. Available in GitLab 15.10 and later.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/error_tracking/settings`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-feature-flags',
  `List feature flags for a project`,
  {
    id: z.string(),
    scope: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/feature_flags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-feature-flags',
  `Create a new feature flag`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/feature_flags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-feature-flags-feature-flag-name',
  `Get a single feature flag`,
  {
    id: z.string(),
    featureFlagName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, featureFlagName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/feature_flags/${featureFlagName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('featureFlagName' in mappedParams) {
        mappedParams['feature_flag_name'] = mappedParams['featureFlagName']
        delete mappedParams['featureFlagName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-feature-flags-feature-flag-name',
  `Update a feature flag`,
  {
    id: z.string(),
    featureFlagName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, featureFlagName, ...requestData } = args
      const url = `/api/v4/projects/${id}/feature_flags/${featureFlagName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('featureFlagName' in mappedParams) {
        mappedParams['feature_flag_name'] = mappedParams['featureFlagName']
        delete mappedParams['featureFlagName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-feature-flags-feature-flag-name',
  `Delete a feature flag`,
  {
    id: z.string(),
    featureFlagName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, featureFlagName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/feature_flags/${featureFlagName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('featureFlagName' in mappedParams) {
        mappedParams['feature_flag_name'] = mappedParams['featureFlagName']
        delete mappedParams['featureFlagName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-feature-flags-user-lists',
  `List all feature flag user lists for a project`,
  {
    id: z.string(),
    search: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/feature_flags_user_lists`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-feature-flags-user-lists',
  `Create a feature flag user list`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/feature_flags_user_lists`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-feature-flags-user-lists-iid',
  `Get a feature flag user list`,
  {
    id: z.string(),
    iid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, iid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/feature_flags_user_lists/${iid}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-feature-flags-user-lists-iid',
  `Update a feature flag user list`,
  {
    id: z.string(),
    iid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, iid, ...requestData } = args
      const url = `/api/v4/projects/${id}/feature_flags_user_lists/${iid}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-feature-flags-user-lists-iid',
  `Delete feature flag user list`,
  {
    id: z.string(),
    iid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, iid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/feature_flags_user_lists/${iid}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-files-file-path-blame',
  `Get blame file from the repository`,
  {
    id: z.string(),
    filePath: z.string(),
    ref: z.string(),
    'range[start]': z.string(),
    'range[end]': z.string(),
  },
  async (args, extra) => {
    try {
      const { id, filePath, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/files/${filePath}/blame`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('filePath' in mappedParams) {
        mappedParams['file_path'] = mappedParams['filePath']
        delete mappedParams['filePath']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-files-file-path-raw',
  `Get raw file contents from the repository`,
  {
    id: z.string(),
    filePath: z.string(),
    ref: z.string().optional(),
    lfs: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, filePath, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/files/${filePath}/raw`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('filePath' in mappedParams) {
        mappedParams['file_path'] = mappedParams['filePath']
        delete mappedParams['filePath']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-files-file-path',
  `Get a file from the repository`,
  {
    id: z.string(),
    filePath: z.string(),
    ref: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, filePath, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/files/${filePath}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('filePath' in mappedParams) {
        mappedParams['file_path'] = mappedParams['filePath']
        delete mappedParams['filePath']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-repository-files-file-path',
  `Create new file in repository`,
  {
    id: z.string(),
    filePath: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, filePath, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository/files/${filePath}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('filePath' in mappedParams) {
        mappedParams['file_path'] = mappedParams['filePath']
        delete mappedParams['filePath']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-repository-files-file-path',
  `Update existing file in repository`,
  {
    id: z.string(),
    filePath: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, filePath, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository/files/${filePath}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('filePath' in mappedParams) {
        mappedParams['file_path'] = mappedParams['filePath']
        delete mappedParams['filePath']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-repository-files-file-path',
  `Delete an existing file in repository`,
  {
    id: z.string(),
    filePath: z.string(),
    branch: z.string(),
    commitMessage: z.string(),
    startBranch: z.string().optional(),
    authorEmail: z.string().optional(),
    authorName: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, filePath, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/files/${filePath}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('filePath' in mappedParams) {
        mappedParams['file_path'] = mappedParams['filePath']
        delete mappedParams['filePath']
      }
      if ('commitMessage' in mappedParams) {
        mappedParams['commit_message'] = mappedParams['commitMessage']
        delete mappedParams['commitMessage']
      }
      if ('startBranch' in mappedParams) {
        mappedParams['start_branch'] = mappedParams['startBranch']
        delete mappedParams['startBranch']
      }
      if ('authorEmail' in mappedParams) {
        mappedParams['author_email'] = mappedParams['authorEmail']
        delete mappedParams['authorEmail']
      }
      if ('authorName' in mappedParams) {
        mappedParams['author_name'] = mappedParams['authorName']
        delete mappedParams['authorName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-freeze-periods',
  `List freeze periods`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/freeze_periods`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-freeze-periods',
  `Create a freeze period`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/freeze_periods`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-freeze-periods-freeze-period-id',
  `Get a freeze period`,
  {
    id: z.string(),
    freezePeriodId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, freezePeriodId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/freeze_periods/${freezePeriodId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('freezePeriodId' in mappedParams) {
        mappedParams['freeze_period_id'] = mappedParams['freezePeriodId']
        delete mappedParams['freezePeriodId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-freeze-periods-freeze-period-id',
  `Update a freeze period`,
  {
    id: z.string(),
    freezePeriodId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, freezePeriodId, ...requestData } = args
      const url = `/api/v4/projects/${id}/freeze_periods/${freezePeriodId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('freezePeriodId' in mappedParams) {
        mappedParams['freeze_period_id'] = mappedParams['freezePeriodId']
        delete mappedParams['freezePeriodId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-freeze-periods-freeze-period-id',
  `Delete a freeze period`,
  {
    id: z.string(),
    freezePeriodId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, freezePeriodId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/freeze_periods/${freezePeriodId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('freezePeriodId' in mappedParams) {
        mappedParams['freeze_period_id'] = mappedParams['freezePeriodId']
        delete mappedParams['freezePeriodId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-generic-package-namepath)file-name-authorize',
  `Workhorse authorize generic package file`,
  {
    id: z.string(),
    packageName: z.string(),
    fileName: z.string(),
    packageVersion: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, fileName, packageVersion, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/generic/${packageName}/${packageVersion}/${fileName}/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-generic-package-namepath)file-name',
  `Upload package file`,
  {
    id: z.string(),
    packageName: z.string(),
    fileName: z.string(),
    packageVersion: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, fileName, packageVersion, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/generic/${packageName}/${packageVersion}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-generic-package-namepath)file-name',
  `Download package file`,
  {
    id: z.string(),
    packageName: z.string(),
    fileName: z.string(),
    packageVersion: z.string(),
    path: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, fileName, packageVersion, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/generic/${packageName}/${packageVersion}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-go',
  `List`,
  {
    id: z.string(),
    moduleName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, moduleName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/go/${moduleName}/@v/list`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-go',
  `Version metadata`,
  {
    id: z.string(),
    moduleVersion: z.string(),
    moduleName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, moduleVersion, moduleName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/go/${moduleName}/@v/${moduleVersion}.info`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('moduleVersion' in mappedParams) {
        mappedParams['module_version'] = mappedParams['moduleVersion']
        delete mappedParams['moduleVersion']
      }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-go',
  `Download module file`,
  {
    id: z.string(),
    moduleVersion: z.string(),
    moduleName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, moduleVersion, moduleName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/go/${moduleName}/@v/${moduleVersion}.mod`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('moduleVersion' in mappedParams) {
        mappedParams['module_version'] = mappedParams['moduleVersion']
        delete mappedParams['moduleVersion']
      }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-go',
  `Download module source`,
  {
    id: z.string(),
    moduleVersion: z.string(),
    moduleName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, moduleVersion, moduleName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/go/${moduleName}/@v/${moduleVersion}.zip`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('moduleVersion' in mappedParams) {
        mappedParams['module_version'] = mappedParams['moduleVersion']
        delete mappedParams['moduleVersion']
      }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-helm-channel-index-yaml',
  `Download a chart index`,
  {
    id: z.string(),
    channel: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, channel, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/helm/${channel}/index.yaml`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-helm-channel-charts-file-name-tgz',
  `Download a chart`,
  {
    id: z.string(),
    channel: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, channel, fileName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/helm/${channel}/charts/${fileName}.tgz`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-helm-api-channel-charts-authorize',
  `Authorize a chart upload from workhorse`,
  {
    id: z.string(),
    channel: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, channel, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/helm/api/${channel}/charts/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-helm-api-channel-charts',
  `Upload a chart`,
  {
    id: z.string(),
    channel: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, channel, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/helm/api/${channel}/charts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-services',
  `List all active integrations`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/services`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-apple-app-store',
  `Create/Edit Apple App Store integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/apple-app-store`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-asana',
  `Create/Edit Asana integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/asana`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-assembla',
  `Create/Edit Assembla integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/assembla`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-bamboo',
  `Create/Edit Bamboo integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/bamboo`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-bugzilla',
  `Create/Edit Bugzilla integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/bugzilla`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-buildkite',
  `Create/Edit Buildkite integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/buildkite`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-campfire',
  `Create/Edit Campfire integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/campfire`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-confluence',
  `Create/Edit Confluence integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/confluence`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-custom-issue-tracker',
  `Create/Edit Custom Issue Tracker integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/custom-issue-tracker`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-datadog',
  `Create/Edit Datadog integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/datadog`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-diffblue-cover',
  `Create/Edit Diffblue Cover integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/diffblue-cover`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-discord',
  `Create/Edit Discord integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/discord`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-drone-ci',
  `Create/Edit Drone Ci integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/drone-ci`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-emails-on-push',
  `Create/Edit Emails On Push integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/emails-on-push`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-external-wiki',
  `Create/Edit External Wiki integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/external-wiki`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-gitlab-slack-application',
  `Create/Edit Gitlab Slack Application integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/gitlab-slack-application`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-google-play',
  `Create/Edit Google Play integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/google-play`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-hangouts-chat',
  `Create/Edit Hangouts Chat integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/hangouts-chat`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-harbor',
  `Create/Edit Harbor integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/harbor`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-irker',
  `Create/Edit Irker integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/irker`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-jenkins',
  `Create/Edit Jenkins integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/jenkins`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-jira',
  `Create/Edit Jira integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/jira`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-jira-cloud-app',
  `Create/Edit Jira Cloud App integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/jira-cloud-app`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-matrix',
  `Create/Edit Matrix integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/matrix`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-mattermost-slash-commands',
  `Create/Edit Mattermost Slash Commands integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/mattermost-slash-commands`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-slack-slash-commands',
  `Create/Edit Slack Slash Commands integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/slack-slash-commands`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-packagist',
  `Create/Edit Packagist integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/packagist`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-phorge',
  `Create/Edit Phorge integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/phorge`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-pipelines-email',
  `Create/Edit Pipelines Email integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/pipelines-email`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-pivotaltracker',
  `Create/Edit Pivotaltracker integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/pivotaltracker`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-pumble',
  `Create/Edit Pumble integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/pumble`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-pushover',
  `Create/Edit Pushover integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/pushover`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-redmine',
  `Create/Edit Redmine integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/redmine`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-ewm',
  `Create/Edit Ewm integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/ewm`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-youtrack',
  `Create/Edit Youtrack integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/youtrack`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-clickup',
  `Create/Edit Clickup integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/clickup`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-slack',
  `Create/Edit Slack integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/slack`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-microsoft-teams',
  `Create/Edit Microsoft Teams integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/microsoft-teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-mattermost',
  `Create/Edit Mattermost integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/mattermost`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-teamcity',
  `Create/Edit Teamcity integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/teamcity`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-telegram',
  `Create/Edit Telegram integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/telegram`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-unify-circuit',
  `Create/Edit Unify Circuit integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/unify-circuit`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-webex-teams',
  `Create/Edit Webex Teams integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/webex-teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-zentao',
  `Create/Edit Zentao integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/zentao`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-squash-tm',
  `Create/Edit Squash Tm integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/squash-tm`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-github',
  `Create/Edit Github integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/github`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-git-guardian',
  `Create/Edit Git Guardian integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/git-guardian`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-google-cloud-platform-artifact-registry',
  `Create/Edit Google Cloud Platform Artifact Registry integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/google-cloud-platform-artifact-registry`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-google-cloud-platform-workload-identity-federation',
  `Create/Edit Google Cloud Platform Workload Identity Federation integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/google-cloud-platform-workload-identity-federation`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-mock-ci',
  `Create/Edit Mock Ci integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/mock-ci`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-services-mock-monitoring',
  `Create/Edit Mock Monitoring integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/mock-monitoring`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-services-slug',
  `Disable an integration`,
  {
    id: z.string(),
    slug: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, slug, ...queryParams } = args
      const url = `/api/v4/projects/${id}/services/${slug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-services-slug',
  `Get an integration settings`,
  {
    id: z.string(),
    slug: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, slug, ...queryParams } = args
      const url = `/api/v4/projects/${id}/services/${slug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-services-mattermost-slash-commands-trigger',
  `Trigger a slash command for mattermost-slash-commands`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/mattermost_slash_commands/trigger`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-services-slack-slash-commands-trigger',
  `Trigger a slash command for slack-slash-commands`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/services/slack_slash_commands/trigger`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-integrations',
  `List all active integrations`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/integrations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-apple-app-store',
  `Create/Edit Apple App Store integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/apple-app-store`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-asana',
  `Create/Edit Asana integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/asana`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-assembla',
  `Create/Edit Assembla integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/assembla`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-bamboo',
  `Create/Edit Bamboo integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/bamboo`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-bugzilla',
  `Create/Edit Bugzilla integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/bugzilla`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-buildkite',
  `Create/Edit Buildkite integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/buildkite`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-campfire',
  `Create/Edit Campfire integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/campfire`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-confluence',
  `Create/Edit Confluence integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/confluence`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-custom-issue-tracker',
  `Create/Edit Custom Issue Tracker integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/custom-issue-tracker`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-datadog',
  `Create/Edit Datadog integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/datadog`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-diffblue-cover',
  `Create/Edit Diffblue Cover integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/diffblue-cover`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-discord',
  `Create/Edit Discord integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/discord`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-drone-ci',
  `Create/Edit Drone Ci integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/drone-ci`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-emails-on-push',
  `Create/Edit Emails On Push integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/emails-on-push`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-external-wiki',
  `Create/Edit External Wiki integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/external-wiki`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-gitlab-slack-application',
  `Create/Edit Gitlab Slack Application integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/gitlab-slack-application`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-google-play',
  `Create/Edit Google Play integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/google-play`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-hangouts-chat',
  `Create/Edit Hangouts Chat integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/hangouts-chat`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-harbor',
  `Create/Edit Harbor integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/harbor`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-irker',
  `Create/Edit Irker integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/irker`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-jenkins',
  `Create/Edit Jenkins integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/jenkins`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-jira',
  `Create/Edit Jira integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/jira`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-jira-cloud-app',
  `Create/Edit Jira Cloud App integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/jira-cloud-app`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-matrix',
  `Create/Edit Matrix integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/matrix`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-mattermost-slash-commands',
  `Create/Edit Mattermost Slash Commands integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/mattermost-slash-commands`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-slack-slash-commands',
  `Create/Edit Slack Slash Commands integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/slack-slash-commands`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-packagist',
  `Create/Edit Packagist integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/packagist`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-phorge',
  `Create/Edit Phorge integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/phorge`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-pipelines-email',
  `Create/Edit Pipelines Email integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/pipelines-email`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-pivotaltracker',
  `Create/Edit Pivotaltracker integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/pivotaltracker`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-pumble',
  `Create/Edit Pumble integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/pumble`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-pushover',
  `Create/Edit Pushover integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/pushover`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-redmine',
  `Create/Edit Redmine integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/redmine`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-ewm',
  `Create/Edit Ewm integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/ewm`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-youtrack',
  `Create/Edit Youtrack integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/youtrack`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-clickup',
  `Create/Edit Clickup integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/clickup`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-slack',
  `Create/Edit Slack integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/slack`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-microsoft-teams',
  `Create/Edit Microsoft Teams integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/microsoft-teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-mattermost',
  `Create/Edit Mattermost integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/mattermost`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-teamcity',
  `Create/Edit Teamcity integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/teamcity`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-telegram',
  `Create/Edit Telegram integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/telegram`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-unify-circuit',
  `Create/Edit Unify Circuit integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/unify-circuit`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-webex-teams',
  `Create/Edit Webex Teams integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/webex-teams`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-zentao',
  `Create/Edit Zentao integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/zentao`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-squash-tm',
  `Create/Edit Squash Tm integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/squash-tm`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-github',
  `Create/Edit Github integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/github`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-git-guardian',
  `Create/Edit Git Guardian integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/git-guardian`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-google-cloud-platform-artifact-registry',
  `Create/Edit Google Cloud Platform Artifact Registry integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/google-cloud-platform-artifact-registry`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-google-cloud-platform-workload-identity-federation',
  `Create/Edit Google Cloud Platform Workload Identity Federation integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/google-cloud-platform-workload-identity-federation`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-mock-ci',
  `Create/Edit Mock Ci integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/mock-ci`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-integrations-mock-monitoring',
  `Create/Edit Mock Monitoring integration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/mock-monitoring`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-integrations-slug',
  `Disable an integration`,
  {
    id: z.string(),
    slug: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, slug, ...queryParams } = args
      const url = `/api/v4/projects/${id}/integrations/${slug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-integrations-slug',
  `Get an integration settings`,
  {
    id: z.string(),
    slug: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, slug, ...queryParams } = args
      const url = `/api/v4/projects/${id}/integrations/${slug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-integrations-mattermost-slash-commands-trigger',
  `Trigger a slash command for mattermost-slash-commands`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/mattermost_slash_commands/trigger`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-integrations-slack-slash-commands-trigger',
  `Trigger a slash command for slack-slash-commands`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/integrations/slack_slash_commands/trigger`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-invitations',
  `Invite non-members by email address to a group or project.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/invitations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-invitations',
  `Get a list of group or project invitations viewable by the authenticated user`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    query: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/invitations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-invitations-email',
  `Updates a group or project invitation.`,
  {
    id: z.string(),
    email: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, email, ...requestData } = args
      const url = `/api/v4/projects/${id}/invitations/${email}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-invitations-email',
  `Removes an invitation from a group or project.`,
  {
    id: z.string(),
    email: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, email, ...queryParams } = args
      const url = `/api/v4/projects/${id}/invitations/${email}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-issues-issue-iid-links',
  `List issue relations`,
  {
    id: z.string(),
    issueIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, issueIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/issues/${issueIid}/links`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueIid' in mappedParams) {
        mappedParams['issue_iid'] = mappedParams['issueIid']
        delete mappedParams['issueIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-issues-issue-iid-links',
  `Create an issue link`,
  {
    id: z.string(),
    issueIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, issueIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/issues/${issueIid}/links`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('issueIid' in mappedParams) {
        mappedParams['issue_iid'] = mappedParams['issueIid']
        delete mappedParams['issueIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-issues-issue-iid-links-issue-link-id',
  `Get an issue link`,
  {
    id: z.string(),
    issueIid: z.string(),
    issueLinkId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, issueIid, issueLinkId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/issues/${issueIid}/links/${issueLinkId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueIid' in mappedParams) {
        mappedParams['issue_iid'] = mappedParams['issueIid']
        delete mappedParams['issueIid']
      }
      if ('issueLinkId' in mappedParams) {
        mappedParams['issue_link_id'] = mappedParams['issueLinkId']
        delete mappedParams['issueLinkId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-issues-issue-iid-links-issue-link-id',
  `Delete an issue link`,
  {
    id: z.string(),
    issueIid: z.string(),
    issueLinkId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, issueIid, issueLinkId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/issues/${issueIid}/links/${issueLinkId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('issueIid' in mappedParams) {
        mappedParams['issue_iid'] = mappedParams['issueIid']
        delete mappedParams['issueIid']
      }
      if ('issueLinkId' in mappedParams) {
        mappedParams['issue_link_id'] = mappedParams['issueLinkId']
        delete mappedParams['issueLinkId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-ci-lint',
  `Validates a CI YAML configuration with a namespace`,
  {
    id: z.string(),
    sha: z.string().optional(),
    contentRef: z.string().optional(),
    dryRun: z.string().optional(),
    includeJobs: z.string().optional(),
    ref: z.string().optional(),
    dryRunRef: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/ci/lint`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('contentRef' in mappedParams) {
        mappedParams['content_ref'] = mappedParams['contentRef']
        delete mappedParams['contentRef']
      }
      if ('dryRun' in mappedParams) {
        mappedParams['dry_run'] = mappedParams['dryRun']
        delete mappedParams['dryRun']
      }
      if ('includeJobs' in mappedParams) {
        mappedParams['include_jobs'] = mappedParams['includeJobs']
        delete mappedParams['includeJobs']
      }
      if ('dryRunRef' in mappedParams) {
        mappedParams['dry_run_ref'] = mappedParams['dryRunRef']
        delete mappedParams['dryRunRef']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-ci-lint',
  `Validate a CI YAML configuration with a namespace`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/ci/lint`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-uploads-authorize',
  `Workhorse authorize the file upload`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/uploads/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-uploads',
  `Upload a file`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/uploads`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-uploads',
  `Get the list of uploads of a project`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/uploads`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-uploads-upload-id',
  `Download a single project upload by ID`,
  {
    id: z.string(),
    uploadId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, uploadId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/uploads/${uploadId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('uploadId' in mappedParams) {
        mappedParams['upload_id'] = mappedParams['uploadId']
        delete mappedParams['uploadId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-uploads-upload-id',
  `Delete a single project upload by ID`,
  {
    id: z.string(),
    uploadId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, uploadId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/uploads/${uploadId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('uploadId' in mappedParams) {
        mappedParams['upload_id'] = mappedParams['uploadId']
        delete mappedParams['uploadId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-uploads-secret-filename',
  `Download a single project upload by secret and filename`,
  {
    id: z.string(),
    secret: z.string(),
    filename: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, secret, filename, ...queryParams } = args
      const url = `/api/v4/projects/${id}/uploads/${secret}/${filename}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-uploads-secret-filename',
  `Delete a single project upload by secret and filename`,
  {
    id: z.string(),
    secret: z.string(),
    filename: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, secret, filename, ...queryParams } = args
      const url = `/api/v4/projects/${id}/uploads/${secret}/${filename}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-maven',
  `Download the maven package file at a project level`,
  {
    id: z.string(),
    fileName: z.string(),
    path: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, fileName, path, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/maven/${path}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-maven',
  `Upload the maven package file`,
  {
    id: z.string(),
    fileName: z.string(),
    path: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, fileName, path, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/maven/${path}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-maven',
  `Workhorse authorize the maven package file upload`,
  {
    id: z.string(),
    fileName: z.string(),
    path: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, fileName, path, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/maven/${path}/${fileName}/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-members',
  `Gets a list of group or project members viewable by the authenticated user.`,
  {
    id: z.string(),
    query: z.string().optional(),
    userIds: z.string().optional(),
    skipUsers: z.string().optional(),
    showSeatInfo: z.string().optional(),
    withSamlIdentity: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/members`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userIds' in mappedParams) {
        mappedParams['user_ids'] = mappedParams['userIds']
        delete mappedParams['userIds']
      }
      if ('skipUsers' in mappedParams) {
        mappedParams['skip_users'] = mappedParams['skipUsers']
        delete mappedParams['skipUsers']
      }
      if ('showSeatInfo' in mappedParams) {
        mappedParams['show_seat_info'] = mappedParams['showSeatInfo']
        delete mappedParams['showSeatInfo']
      }
      if ('withSamlIdentity' in mappedParams) {
        mappedParams['with_saml_identity'] = mappedParams['withSamlIdentity']
        delete mappedParams['withSamlIdentity']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-members',
  `Adds a member to a group or project.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/members`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-members-all',
  `Gets a list of group or project members viewable by the authenticated user, including those who gained membership through ancestor group.`,
  {
    id: z.string(),
    query: z.string().optional(),
    userIds: z.string().optional(),
    showSeatInfo: z.string().optional(),
    state: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/members/all`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userIds' in mappedParams) {
        mappedParams['user_ids'] = mappedParams['userIds']
        delete mappedParams['userIds']
      }
      if ('showSeatInfo' in mappedParams) {
        mappedParams['show_seat_info'] = mappedParams['showSeatInfo']
        delete mappedParams['showSeatInfo']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-members-user-id',
  `Gets a member of a group or project.`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/members/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-members-user-id',
  `Updates a member of a group or project.`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...requestData } = args
      const url = `/api/v4/projects/${id}/members/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-members-user-id',
  `Removes a user from a group or project.`,
  {
    id: z.string(),
    userId: z.string(),
    skipSubresources: z.string().optional(),
    unassignIssuables: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/members/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }
      if ('skipSubresources' in mappedParams) {
        mappedParams['skip_subresources'] = mappedParams['skipSubresources']
        delete mappedParams['skipSubresources']
      }
      if ('unassignIssuables' in mappedParams) {
        mappedParams['unassign_issuables'] = mappedParams['unassignIssuables']
        delete mappedParams['unassignIssuables']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-members-all-user-id',
  `Gets a member of a group or project, including those who gained membership through ancestor group`,
  {
    id: z.string(),
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, userId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/members/all/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-approvals',
  `List approvals for merge request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/approvals`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-approvals',
  `Deprecated in 16.0: Use the merge request approvals API instead. Change approval-related configuration`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/approvals`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-approve',
  `Approve a merge request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/approve`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-unapprove',
  `Remove an approval from a merge request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/unapprove`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-merge-requests-merge-request-iid-reset-approvals',
  `Remove all merge request approvals`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/reset_approvals`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-approval-state',
  `Get approval state of merge request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/approval_state`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-create-ci-config',
  `Creates merge request for missing ci config in project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/create_ci_config`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-time-estimate',
  `Set a time estimate for a merge_request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/time_estimate`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-reset-time-estimate',
  `Reset the time estimate for a project merge_request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/reset_time_estimate`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-add-spent-time',
  `Add spent time for a merge_request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/add_spent_time`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-reset-spent-time',
  `Reset spent time for a merge_request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/reset_spent_time`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-time-stats',
  `Get time tracking stats`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/time_stats`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests',
  `List project merge requests`,
  {
    id: z.string(),
    authorId: z.string().optional(),
    authorUsername: z.string().optional(),
    assigneeId: z.string().optional(),
    assigneeUsername: z.string().optional(),
    reviewerUsername: z.string().optional(),
    labels: z.string().optional(),
    milestone: z.string().optional(),
    myReactionEmoji: z.string().optional(),
    reviewerId: z.string().optional(),
    state: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    withLabelsDetails: z.string().optional(),
    withMergeStatusRecheck: z.string().optional(),
    createdAfter: z.string().optional(),
    createdBefore: z.string().optional(),
    updatedAfter: z.string().optional(),
    updatedBefore: z.string().optional(),
    view: z.string().optional(),
    scope: z.string().optional(),
    sourceBranch: z.string().optional(),
    sourceProjectId: z.string().optional(),
    targetBranch: z.string().optional(),
    search: z.string().optional(),
    in: z.string().optional(),
    wip: z.string().optional(),
    'not[authorId]': z.string().optional(),
    'not[authorUsername]': z.string().optional(),
    'not[assigneeId]': z.string().optional(),
    'not[assigneeUsername]': z.string().optional(),
    'not[reviewerUsername]': z.string().optional(),
    'not[labels]': z.string().optional(),
    'not[milestone]': z.string().optional(),
    'not[myReactionEmoji]': z.string().optional(),
    'not[reviewerId]': z.string().optional(),
    deployedBefore: z.string().optional(),
    deployedAfter: z.string().optional(),
    environment: z.string().optional(),
    approved: z.string().optional(),
    mergeUserId: z.string().optional(),
    mergeUserUsername: z.string().optional(),
    approverIds: z.string().optional(),
    approvedByIds: z.string().optional(),
    approvedByUsernames: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    iids: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('authorId' in mappedParams) {
        mappedParams['author_id'] = mappedParams['authorId']
        delete mappedParams['authorId']
      }
      if ('authorUsername' in mappedParams) {
        mappedParams['author_username'] = mappedParams['authorUsername']
        delete mappedParams['authorUsername']
      }
      if ('assigneeId' in mappedParams) {
        mappedParams['assignee_id'] = mappedParams['assigneeId']
        delete mappedParams['assigneeId']
      }
      if ('assigneeUsername' in mappedParams) {
        mappedParams['assignee_username'] = mappedParams['assigneeUsername']
        delete mappedParams['assigneeUsername']
      }
      if ('reviewerUsername' in mappedParams) {
        mappedParams['reviewer_username'] = mappedParams['reviewerUsername']
        delete mappedParams['reviewerUsername']
      }
      if ('myReactionEmoji' in mappedParams) {
        mappedParams['my_reaction_emoji'] = mappedParams['myReactionEmoji']
        delete mappedParams['myReactionEmoji']
      }
      if ('reviewerId' in mappedParams) {
        mappedParams['reviewer_id'] = mappedParams['reviewerId']
        delete mappedParams['reviewerId']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('withLabelsDetails' in mappedParams) {
        mappedParams['with_labels_details'] = mappedParams['withLabelsDetails']
        delete mappedParams['withLabelsDetails']
      }
      if ('withMergeStatusRecheck' in mappedParams) {
        mappedParams['with_merge_status_recheck'] = mappedParams['withMergeStatusRecheck']
        delete mappedParams['withMergeStatusRecheck']
      }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('updatedAfter' in mappedParams) {
        mappedParams['updated_after'] = mappedParams['updatedAfter']
        delete mappedParams['updatedAfter']
      }
      if ('updatedBefore' in mappedParams) {
        mappedParams['updated_before'] = mappedParams['updatedBefore']
        delete mappedParams['updatedBefore']
      }
      if ('sourceBranch' in mappedParams) {
        mappedParams['source_branch'] = mappedParams['sourceBranch']
        delete mappedParams['sourceBranch']
      }
      if ('sourceProjectId' in mappedParams) {
        mappedParams['source_project_id'] = mappedParams['sourceProjectId']
        delete mappedParams['sourceProjectId']
      }
      if ('targetBranch' in mappedParams) {
        mappedParams['target_branch'] = mappedParams['targetBranch']
        delete mappedParams['targetBranch']
      }
      if ('not[authorId]' in mappedParams) {
        mappedParams['not[author_id]'] = mappedParams['not[authorId]']
        delete mappedParams['not[authorId]']
      }
      if ('not[authorUsername]' in mappedParams) {
        mappedParams['not[author_username]'] = mappedParams['not[authorUsername]']
        delete mappedParams['not[authorUsername]']
      }
      if ('not[assigneeId]' in mappedParams) {
        mappedParams['not[assignee_id]'] = mappedParams['not[assigneeId]']
        delete mappedParams['not[assigneeId]']
      }
      if ('not[assigneeUsername]' in mappedParams) {
        mappedParams['not[assignee_username]'] = mappedParams['not[assigneeUsername]']
        delete mappedParams['not[assigneeUsername]']
      }
      if ('not[reviewerUsername]' in mappedParams) {
        mappedParams['not[reviewer_username]'] = mappedParams['not[reviewerUsername]']
        delete mappedParams['not[reviewerUsername]']
      }
      if ('not[myReactionEmoji]' in mappedParams) {
        mappedParams['not[my_reaction_emoji]'] = mappedParams['not[myReactionEmoji]']
        delete mappedParams['not[myReactionEmoji]']
      }
      if ('not[reviewerId]' in mappedParams) {
        mappedParams['not[reviewer_id]'] = mappedParams['not[reviewerId]']
        delete mappedParams['not[reviewerId]']
      }
      if ('deployedBefore' in mappedParams) {
        mappedParams['deployed_before'] = mappedParams['deployedBefore']
        delete mappedParams['deployedBefore']
      }
      if ('deployedAfter' in mappedParams) {
        mappedParams['deployed_after'] = mappedParams['deployedAfter']
        delete mappedParams['deployedAfter']
      }
      if ('mergeUserId' in mappedParams) {
        mappedParams['merge_user_id'] = mappedParams['mergeUserId']
        delete mappedParams['mergeUserId']
      }
      if ('mergeUserUsername' in mappedParams) {
        mappedParams['merge_user_username'] = mappedParams['mergeUserUsername']
        delete mappedParams['mergeUserUsername']
      }
      if ('approverIds' in mappedParams) {
        mappedParams['approver_ids'] = mappedParams['approverIds']
        delete mappedParams['approverIds']
      }
      if ('approvedByIds' in mappedParams) {
        mappedParams['approved_by_ids'] = mappedParams['approvedByIds']
        delete mappedParams['approvedByIds']
      }
      if ('approvedByUsernames' in mappedParams) {
        mappedParams['approved_by_usernames'] = mappedParams['approvedByUsernames']
        delete mappedParams['approvedByUsernames']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests',
  `Create merge request`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-merge-requests-merge-request-iid',
  `Delete a merge request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid',
  `Get single merge request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    renderHtml: z.string().optional(),
    includeDivergedCommitsCount: z.string().optional(),
    includeRebaseInProgress: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('renderHtml' in mappedParams) {
        mappedParams['render_html'] = mappedParams['renderHtml']
        delete mappedParams['renderHtml']
      }
      if ('includeDivergedCommitsCount' in mappedParams) {
        mappedParams['include_diverged_commits_count'] = mappedParams['includeDivergedCommitsCount']
        delete mappedParams['includeDivergedCommitsCount']
      }
      if ('includeRebaseInProgress' in mappedParams) {
        mappedParams['include_rebase_in_progress'] = mappedParams['includeRebaseInProgress']
        delete mappedParams['includeRebaseInProgress']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-merge-requests-merge-request-iid',
  `Update merge request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-participants',
  `Get single merge request participants`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/participants`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-reviewers',
  `Get single merge request reviewers`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/reviewers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-commits',
  `Get single merge request commits`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/commits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-context-commits',
  `List merge request context commits`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/context_commits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-context-commits',
  `Create merge request context commits`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/context_commits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-merge-requests-merge-request-iid-context-commits',
  `Delete merge request context commits`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    commits: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/context_commits`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-changes',
  `Get single merge request changes`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    unidiff: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/changes`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-diffs',
  `Get the merge request diffs`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    unidiff: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/diffs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-raw-diffs',
  `Get the merge request raw diffs`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/raw_diffs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-pipelines',
  `Get single merge request pipelines`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/pipelines`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-pipelines',
  `Create merge request pipeline`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/pipelines`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-merge-requests-merge-request-iid-merge',
  `Merge a merge request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/merge`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-merge-ref',
  `Returns the up to date merge-ref HEAD commit`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/merge_ref`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-merge-requests-merge-request-iid-cancel-merge-when-pipeline-succeeds',
  `Cancel Merge When Pipeline Succeeds`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/cancel_merge_when_pipeline_succeeds`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-merge-requests-merge-request-iid-rebase',
  `Rebase a merge request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...requestData } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/rebase`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-closes-issues',
  `List issues that close on merge`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/closes_issues`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-related-issues',
  `List issues related to merge request`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/related_issues`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-versions',
  `Get a list of merge request diff versions`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/versions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-merge-request-iid-versions-version-id',
  `Get a single merge request diff version`,
  {
    id: z.string(),
    mergeRequestIid: z.string(),
    versionId: z.string(),
    unidiff: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, mergeRequestIid, versionId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${mergeRequestIid}/versions/${versionId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mergeRequestIid' in mappedParams) {
        mappedParams['merge_request_iid'] = mappedParams['mergeRequestIid']
        delete mappedParams['mergeRequestIid']
      }
      if ('versionId' in mappedParams) {
        mappedParams['version_id'] = mappedParams['versionId']
        delete mappedParams['versionId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-ml-models-model-version-id-files(',
  `Workhorse authorize model package file`,
  {
    id: z.string(),
    modelVersionId: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, modelVersionId, fileName, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/ml_models/${modelVersionId}/files/${fileName}/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('modelVersionId' in mappedParams) {
        mappedParams['model_version_id'] = mappedParams['modelVersionId']
        delete mappedParams['modelVersionId']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-ml-models-model-version-id-files(',
  `Workhorse upload model package file`,
  {
    id: z.string(),
    modelVersionId: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, modelVersionId, fileName, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/ml_models/${modelVersionId}/files/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('modelVersionId' in mappedParams) {
        mappedParams['model_version_id'] = mappedParams['modelVersionId']
        delete mappedParams['modelVersionId']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-ml-models-model-version-id-files(',
  `Download an ml_model package file`,
  {
    id: z.string(),
    modelVersionId: z.string(),
    fileName: z.string(),
    path: z.string().optional(),
    status: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, modelVersionId, fileName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/ml_models/${modelVersionId}/files/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('modelVersionId' in mappedParams) {
        mappedParams['model_version_id'] = mappedParams['modelVersionId']
        delete mappedParams['modelVersionId']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-npm-package',
  `Get all tags for a given an NPM package`,
  {
    id: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/npm/-/package/${packageName}/dist-tags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-npm-package',
  `Create or Update the given tag for the given NPM package and version`,
  {
    id: z.string(),
    tag: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tag, packageName, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/npm/-/package/${packageName}/dist-tags/${tag}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-packages-npm-package',
  `Deletes the given tag`,
  {
    id: z.string(),
    tag: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tag, packageName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/npm/-/package/${packageName}/dist-tags/${tag}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-npm-npm-v1-security-advisories-bulk',
  `NPM registry bulk advisory endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/npm/-/npm/v1/security/advisories/bulk`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-npm-npm-v1-security-audits-quick',
  `NPM registry quick audit endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/npm/-/npm/v1/security/audits/quick`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-npmfile-name',
  `Download the NPM tarball`,
  {
    id: z.string(),
    packageName: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, fileName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/npm/${packageName}/-/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-npm-package-name',
  `Create or deprecate NPM package`,
  {
    id: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/npm/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-npm',
  `NPM registry metadata endpoint`,
  {
    id: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/npm/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-nuget-index',
  `The NuGet V3 Feed Service Index`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/nuget/index`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-nuget-symbolfilessignature',
  `The NuGet Symbol File Download Endpoint`,
  {
    id: z.string(),
    fileName: z.string(),
    signature: z.string(),
    sameFileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, fileName, signature, sameFileName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/nuget/symbolfiles/${fileName}/${signature}/${sameFileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }
      if ('sameFileName' in mappedParams) {
        mappedParams['same_file_name'] = mappedParams['sameFileName']
        delete mappedParams['sameFileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-nuget-v2',
  `The NuGet V2 Feed Service Index`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/nuget/v2`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-nuget-v2',
  `The NuGet V2 Feed Package Publish endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/nuget/v2`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-nuget-v2$metadata',
  `The NuGet V2 Feed Package $metadata endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/nuget/v2/$metadata`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-nuget-metadata',
  `The NuGet Metadata Service - Package name level`,
  {
    id: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/nuget/metadata/${packageName}/index`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-nuget-metadatapackage-version',
  `The NuGet Metadata Service - Package name and version level`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/nuget/metadata/${packageName}/${packageVersion}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-nuget-query',
  `The NuGet Search Service`,
  {
    id: z.string(),
    q: z.string().optional(),
    skip: z.string().optional(),
    take: z.string().optional(),
    prerelease: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/nuget/query`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-nuget-download',
  `The NuGet Content Service - index request`,
  {
    id: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/nuget/download/${packageName}/index`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-nuget-downloadpackage-version',
  `The NuGet Content Service - content request`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
    packageFilename: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, packageFilename, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/nuget/download/${packageName}/${packageVersion}/${packageFilename}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageFilename' in mappedParams) {
        mappedParams['package_filename'] = mappedParams['packageFilename']
        delete mappedParams['packageFilename']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-nuget',
  `The NuGet V3 Feed Package Publish endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/nuget`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-nuget-authorize',
  `The NuGet Package Authorize endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/nuget/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-nuget-symbolpackage',
  `The NuGet Symbol Package Publish endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/nuget/symbolpackage`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-nuget-symbolpackage-authorize',
  `The NuGet Symbol Package Authorize endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/nuget/symbolpackage/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-packages-nugetpackage-version',
  `The NuGet Package Delete endpoint`,
  {
    id: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, packageVersion, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/nuget/${packageName}/${packageVersion}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-nuget-v2-authorize',
  `The NuGet V2 Feed Package Authorize endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/nuget/v2/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-project-id-packages-nuget-v2-findpackagesbyid',
  `The NuGet V2 Feed Find Packages by ID endpoint`,
  {
    projectId: z.string(),
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...queryParams } = args
      const url = `/api/v4/projects/${projectId}/packages/nuget/v2/FindPackagesById`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-project-id-packages-nuget-v2-packages',
  `The NuGet V2 Feed Enumerate Packages endpoint`,
  {
    projectId: z.string(),
    $filter: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...queryParams } = args
      const url = `/api/v4/projects/${projectId}/packages/nuget/v2/Packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-project-id-packages-nuget-v2-packages',
  `The NuGet V2 Feed Single Package Metadata endpoint`,
  {
    projectId: z.string(),
    packageName: z.string(),
    packageVersion: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...queryParams } = args
      const url = `/api/v4/projects/${projectId}/packages/nuget/v2/Packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-package-id-package-files',
  `List package files`,
  {
    id: z.string(),
    packageId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, packageId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/${packageId}/package_files`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageId' in mappedParams) {
        mappedParams['package_id'] = mappedParams['packageId']
        delete mappedParams['packageId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-packages-package-id-package-files-package-file-id',
  `Delete a package file`,
  {
    id: z.string(),
    packageId: z.string(),
    packageFileId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageId, packageFileId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/${packageId}/package_files/${packageFileId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageId' in mappedParams) {
        mappedParams['package_id'] = mappedParams['packageId']
        delete mappedParams['packageId']
      }
      if ('packageFileId' in mappedParams) {
        mappedParams['package_file_id'] = mappedParams['packageFileId']
        delete mappedParams['packageFileId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-pages',
  `Unpublish pages`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'patch-api-v4-projects-id-pages',
  `Update pages settings`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/pages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pages',
  `Get pages settings`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pages-domains',
  `Get all pages domains`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pages/domains`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-pages-domains',
  `Create a new pages domain`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/pages/domains`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pages-domains-domain',
  `Get a single pages domain`,
  {
    id: z.string(),
    domain: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, domain, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pages/domains/${domain}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-pages-domains-domain',
  `Updates a pages domain`,
  {
    id: z.string(),
    domain: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, domain, ...requestData } = args
      const url = `/api/v4/projects/${id}/pages/domains/${domain}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-pages-domains-domain',
  `Delete a pages domain`,
  {
    id: z.string(),
    domain: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, domain, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pages/domains/${domain}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-pages-domains-domain-verify',
  `Verify a pages domain`,
  {
    id: z.string(),
    domain: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, domain, ...requestData } = args
      const url = `/api/v4/projects/${id}/pages/domains/${domain}/verify`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-avatar',
  `Download a project avatar`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/avatar`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-clusters',
  `List project clusters`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/clusters`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-clusters-cluster-id',
  `Get a single project cluster`,
  {
    id: z.string(),
    clusterId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, clusterId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/clusters/${clusterId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('clusterId' in mappedParams) {
        mappedParams['cluster_id'] = mappedParams['clusterId']
        delete mappedParams['clusterId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-clusters-cluster-id',
  `Edit project cluster`,
  {
    id: z.string(),
    clusterId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, clusterId, ...requestData } = args
      const url = `/api/v4/projects/${id}/clusters/${clusterId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('clusterId' in mappedParams) {
        mappedParams['cluster_id'] = mappedParams['clusterId']
        delete mappedParams['clusterId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-clusters-cluster-id',
  `Delete project cluster`,
  {
    id: z.string(),
    clusterId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, clusterId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/clusters/${clusterId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('clusterId' in mappedParams) {
        mappedParams['cluster_id'] = mappedParams['clusterId']
        delete mappedParams['clusterId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-clusters-user',
  `Add existing cluster to project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/clusters/user`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-registry-repositories',
  `List container repositories within a project`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    tags: z.string().optional(),
    tagsCount: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/registry/repositories`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('tagsCount' in mappedParams) {
        mappedParams['tags_count'] = mappedParams['tagsCount']
        delete mappedParams['tagsCount']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-registry-repositories-repository-id',
  `Delete repository`,
  {
    id: z.string(),
    repositoryId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, repositoryId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/registry/repositories/${repositoryId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-registry-repositories-repository-id-tags',
  `List tags of a repository`,
  {
    id: z.string(),
    repositoryId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, repositoryId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/registry/repositories/${repositoryId}/tags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-registry-repositories-repository-id-tags',
  `Delete repository tags (in bulk)`,
  {
    id: z.string(),
    repositoryId: z.string(),
    nameRegexDelete: z.string().optional(),
    nameRegex: z.string().optional(),
    nameRegexKeep: z.string().optional(),
    keepN: z.string().optional(),
    olderThan: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, repositoryId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/registry/repositories/${repositoryId}/tags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }
      if ('nameRegexDelete' in mappedParams) {
        mappedParams['name_regex_delete'] = mappedParams['nameRegexDelete']
        delete mappedParams['nameRegexDelete']
      }
      if ('nameRegex' in mappedParams) {
        mappedParams['name_regex'] = mappedParams['nameRegex']
        delete mappedParams['nameRegex']
      }
      if ('nameRegexKeep' in mappedParams) {
        mappedParams['name_regex_keep'] = mappedParams['nameRegexKeep']
        delete mappedParams['nameRegexKeep']
      }
      if ('keepN' in mappedParams) {
        mappedParams['keep_n'] = mappedParams['keepN']
        delete mappedParams['keepN']
      }
      if ('olderThan' in mappedParams) {
        mappedParams['older_than'] = mappedParams['olderThan']
        delete mappedParams['olderThan']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-registry-repositories-repository-id-tags-tag-name',
  `Get details about a repository tag`,
  {
    id: z.string(),
    repositoryId: z.string(),
    tagName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, repositoryId, tagName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/registry/repositories/${repositoryId}/tags/${tagName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-registry-repositories-repository-id-tags-tag-name',
  `Delete repository tag`,
  {
    id: z.string(),
    repositoryId: z.string(),
    tagName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, repositoryId, tagName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/registry/repositories/${repositoryId}/tags/${tagName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('repositoryId' in mappedParams) {
        mappedParams['repository_id'] = mappedParams['repositoryId']
        delete mappedParams['repositoryId']
      }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-registry-protection-repository-rules',
  `Get list of container registry protection rules for a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/registry/protection/repository/rules`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-registry-protection-repository-rules',
  `Create a container protection rule for a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/registry/protection/repository/rules`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'patch-api-v4-projects-id-registry-protection-repository-rules-protection-rule-id',
  `Update a container protection rule for a project`,
  {
    id: z.string(),
    protectionRuleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, protectionRuleId, ...requestData } = args
      const url = `/api/v4/projects/${id}/registry/protection/repository/rules/${protectionRuleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('protectionRuleId' in mappedParams) {
        mappedParams['protection_rule_id'] = mappedParams['protectionRuleId']
        delete mappedParams['protectionRuleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-registry-protection-repository-rules-protection-rule-id',
  `Delete container protection rule`,
  {
    id: z.string(),
    protectionRuleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, protectionRuleId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/registry/protection/repository/rules/${protectionRuleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('protectionRuleId' in mappedParams) {
        mappedParams['protection_rule_id'] = mappedParams['protectionRuleId']
        delete mappedParams['protectionRuleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-debian-distributions',
  `Create a Debian Distribution`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/debian_distributions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-debian-distributions',
  `Get a list of Debian Distributions`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    codename: z.string().optional(),
    suite: z.string().optional(),
    origin: z.string().optional(),
    label: z.string().optional(),
    version: z.string().optional(),
    description: z.string().optional(),
    validTimeDurationSeconds: z.string().optional(),
    components: z.string().optional(),
    architectures: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/debian_distributions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('validTimeDurationSeconds' in mappedParams) {
        mappedParams['valid_time_duration_seconds'] = mappedParams['validTimeDurationSeconds']
        delete mappedParams['validTimeDurationSeconds']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-debian-distributions-codename',
  `Get a Debian Distribution`,
  {
    id: z.string(),
    codename: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, codename, ...queryParams } = args
      const url = `/api/v4/projects/${id}/debian_distributions/${codename}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-debian-distributions-codename',
  `Update a Debian Distribution`,
  {
    id: z.string(),
    codename: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, codename, ...requestData } = args
      const url = `/api/v4/projects/${id}/debian_distributions/${codename}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-debian-distributions-codename',
  `Delete a Debian Distribution`,
  {
    id: z.string(),
    codename: z.string(),
    suite: z.string().optional(),
    origin: z.string().optional(),
    label: z.string().optional(),
    version: z.string().optional(),
    description: z.string().optional(),
    validTimeDurationSeconds: z.string().optional(),
    components: z.string().optional(),
    architectures: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, codename, ...queryParams } = args
      const url = `/api/v4/projects/${id}/debian_distributions/${codename}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('validTimeDurationSeconds' in mappedParams) {
        mappedParams['valid_time_duration_seconds'] = mappedParams['validTimeDurationSeconds']
        delete mappedParams['validTimeDurationSeconds']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-debian-distributions-codename-key-asc',
  `Get a Debian Distribution Key`,
  {
    id: z.string(),
    codename: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, codename, ...queryParams } = args
      const url = `/api/v4/projects/${id}/debian_distributions/${codename}/key.asc`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-events',
  `List a project&#x27;s visible events`,
  {
    id: z.string(),
    action: z.string().optional(),
    targetType: z.string().optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    sort: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('targetType' in mappedParams) {
        mappedParams['target_type'] = mappedParams['targetType']
        delete mappedParams['targetType']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-export',
  `Get export status`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/export`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-export',
  `Start export`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/export`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-export-download',
  `Download export`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/export/download`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-export-relations',
  `Start relations export`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/export_relations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-export-relations-download',
  `Download relations export`,
  {
    id: z.string(),
    relation: z.string(),
    batched: z.string().optional(),
    batchNumber: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/export_relations/download`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('batchNumber' in mappedParams) {
        mappedParams['batch_number'] = mappedParams['batchNumber']
        delete mappedParams['batchNumber']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-export-relations-status',
  `Relations export status`,
  {
    id: z.string(),
    relation: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/export_relations/status`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-hooks-hook-id-url-variables-key',
  `Set a url variable`,
  {
    id: z.string(),
    hookId: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, hookId, key, ...requestData } = args
      const url = `/api/v4/projects/${id}/hooks/${hookId}/url_variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-hooks-hook-id-url-variables-key',
  `Un-Set a url variable`,
  {
    id: z.string(),
    hookId: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, hookId, key, ...queryParams } = args
      const url = `/api/v4/projects/${id}/hooks/${hookId}/url_variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-hooks-hook-id-custom-headers-key',
  `Set a custom header`,
  {
    id: z.string(),
    hookId: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, hookId, key, ...requestData } = args
      const url = `/api/v4/projects/${id}/hooks/${hookId}/custom_headers/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-hooks-hook-id-custom-headers-key',
  `Un-Set a custom header`,
  {
    id: z.string(),
    hookId: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, hookId, key, ...queryParams } = args
      const url = `/api/v4/projects/${id}/hooks/${hookId}/custom_headers/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-hooks',
  `List project hooks`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/hooks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-hooks',
  `Add project hook`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/hooks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-hooks-hook-id',
  `Get project hook`,
  {
    id: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, hookId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-hooks-hook-id',
  `Edit project hook`,
  {
    id: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, hookId, ...requestData } = args
      const url = `/api/v4/projects/${id}/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-hooks-hook-id',
  `Delete a project hook`,
  {
    id: z.string(),
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, hookId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-hooks-hook-id-events',
  `Get events for a given hook id`,
  {
    id: z.string(),
    hookId: z.string(),
    status: z.string().optional(),
    perPage: z.string().optional(),
    page: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, hookId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/hooks/${hookId}/events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-hooks-hook-id-test-trigger',
  `Triggers a hook test`,
  {
    id: z.string(),
    hookId: z.string(),
    trigger: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, hookId, trigger, ...requestData } = args
      const url = `/api/v4/projects/${id}/hooks/${hookId}/test/${trigger}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-hooks-hook-id-events-hook-log-id-resend',
  `Resend a webhook event`,
  {
    id: z.string(),
    hookId: z.string(),
    hookLogId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, hookId, hookLogId, ...requestData } = args
      const url = `/api/v4/projects/${id}/hooks/${hookId}/events/${hookLogId}/resend`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }
      if ('hookLogId' in mappedParams) {
        mappedParams['hook_log_id'] = mappedParams['hookLogId']
        delete mappedParams['hookLogId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-import-authorize',
  `Workhorse authorize the project import upload`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/projects/import/authorize',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-projects-import', `Create a new project import`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/projects/import',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-projects-id-import',
  `Get a project import status`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/import`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-remote-import',
  `Create a new project import using a remote object storage path`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/projects/remote-import',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-import-relation-authorize',
  `Workhorse authorize the project relation import upload`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/projects/import-relation/authorize',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-import-relation',
  `Re-import a relation into a project`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/projects/import-relation',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-relation-imports',
  `Get the statuses of relation imports for specified project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/relation-imports`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-remote-import-s3',
  `Create a new project import using a file from AWS S3`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/projects/remote-import-s3',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-job-token-scope',
  `Fetch CI_JOB_TOKEN access settings.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/job_token_scope`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'patch-api-v4-projects-id-job-token-scope',
  `Patch CI_JOB_TOKEN access settings.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/job_token_scope`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-job-token-scope-allowlist',
  `Fetch project inbound allowlist for CI_JOB_TOKEN access settings.`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/job_token_scope/allowlist`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-job-token-scope-allowlist',
  `Add target project to allowlist.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/job_token_scope/allowlist`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-job-token-scope-groups-allowlist',
  `Fetch project groups allowlist for CI_JOB_TOKEN access settings.`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/job_token_scope/groups_allowlist`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-job-token-scope-groups-allowlist',
  `Add target group to allowlist.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/job_token_scope/groups_allowlist`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-job-token-scope-groups-allowlist-target-group-id',
  `Delete target group from allowlist.`,
  {
    id: z.string(),
    targetGroupId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, targetGroupId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/job_token_scope/groups_allowlist/${targetGroupId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('targetGroupId' in mappedParams) {
        mappedParams['target_group_id'] = mappedParams['targetGroupId']
        delete mappedParams['targetGroupId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-job-token-scope-allowlist-target-project-id',
  `Delete project from allowlist.`,
  {
    id: z.string(),
    targetProjectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, targetProjectId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/job_token_scope/allowlist/${targetProjectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('targetProjectId' in mappedParams) {
        mappedParams['target_project_id'] = mappedParams['targetProjectId']
        delete mappedParams['targetProjectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages',
  `Get a list of project packages`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    packageType: z.string().optional(),
    packageName: z.string().optional(),
    packageVersion: z.string().optional(),
    includeVersionless: z.string().optional(),
    status: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('packageType' in mappedParams) {
        mappedParams['package_type'] = mappedParams['packageType']
        delete mappedParams['packageType']
      }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('includeVersionless' in mappedParams) {
        mappedParams['include_versionless'] = mappedParams['includeVersionless']
        delete mappedParams['includeVersionless']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-package-id',
  `Get a single project package`,
  {
    id: z.string(),
    packageId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/${packageId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageId' in mappedParams) {
        mappedParams['package_id'] = mappedParams['packageId']
        delete mappedParams['packageId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-packages-package-id',
  `Delete a project package`,
  {
    id: z.string(),
    packageId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/${packageId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageId' in mappedParams) {
        mappedParams['package_id'] = mappedParams['packageId']
        delete mappedParams['packageId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-package-id-pipelines',
  `Get the pipelines for a single project package`,
  {
    id: z.string(),
    packageId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    cursor: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, packageId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/${packageId}/pipelines`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageId' in mappedParams) {
        mappedParams['package_id'] = mappedParams['packageId']
        delete mappedParams['packageId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-protection-rules',
  `Get list of package protection rules for a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/protection/rules`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-protection-rules',
  `Create a package protection rule for a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/protection/rules`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'patch-api-v4-projects-id-packages-protection-rules-package-protection-rule-id',
  `Update a package protection rule for a project`,
  {
    id: z.string(),
    packageProtectionRuleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageProtectionRuleId, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/protection/rules/${packageProtectionRuleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageProtectionRuleId' in mappedParams) {
        mappedParams['package_protection_rule_id'] = mappedParams['packageProtectionRuleId']
        delete mappedParams['packageProtectionRuleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-packages-protection-rules-package-protection-rule-id',
  `Delete package protection rule`,
  {
    id: z.string(),
    packageProtectionRuleId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageProtectionRuleId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/protection/rules/${packageProtectionRuleId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageProtectionRuleId' in mappedParams) {
        mappedParams['package_protection_rule_id'] = mappedParams['packageProtectionRuleId']
        delete mappedParams['packageProtectionRuleId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-snapshot',
  `Download a (possibly inconsistent) snapshot of a repository`,
  {
    id: z.string(),
    wiki: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snapshot`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-snippets',
  `Get all project snippets`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snippets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-snippets',
  `Create a new project snippet`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/snippets`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-snippets-snippet-id',
  `Get a single project snippet`,
  {
    id: z.string(),
    snippetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-snippets-snippet-id',
  `Update an existing project snippet`,
  {
    id: z.string(),
    snippetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, ...requestData } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-snippets-snippet-id',
  `Delete a project snippet`,
  {
    id: z.string(),
    snippetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-snippets-snippet-id-raw',
  `Get a raw project snippet`,
  {
    id: z.string(),
    snippetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}/raw`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-snippets-snippet-id-files-ref-file-path-raw',
  `Get raw project snippet file contents from the repository`,
  {
    id: z.string(),
    snippetId: z.string(),
    ref: z.string(),
    filePath: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, ref, filePath, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}/files/${ref}/${filePath}/raw`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }
      if ('filePath' in mappedParams) {
        mappedParams['file_path'] = mappedParams['filePath']
        delete mappedParams['filePath']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-snippets-snippet-id-user-agent-detail',
  `Get the user agent details for a project snippet`,
  {
    id: z.string(),
    snippetId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, snippetId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/snippets/${snippetId}/user_agent_detail`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('snippetId' in mappedParams) {
        mappedParams['snippet_id'] = mappedParams['snippetId']
        delete mappedParams['snippetId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-statistics',
  `Get the list of project fetch statistics for the last 30 days`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/statistics`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-templates-type',
  `Get a list of templates available to this project`,
  {
    id: z.string(),
    type: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, type, ...queryParams } = args
      const url = `/api/v4/projects/${id}/templates/${type}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-templates-type-name',
  `Download a template available to this project`,
  {
    id: z.string(),
    type: z.string(),
    name: z.string(),
    sourceTemplateProjectId: z.string().optional(),
    project: z.string().optional(),
    fullname: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, type, name, ...queryParams } = args
      const url = `/api/v4/projects/${id}/templates/${type}/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('sourceTemplateProjectId' in mappedParams) {
        mappedParams['source_template_project_id'] = mappedParams['sourceTemplateProjectId']
        delete mappedParams['sourceTemplateProjectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-custom-attributes',
  `Get all custom attributes on a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/custom_attributes`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-custom-attributes-key',
  `Get a custom attribute on a project`,
  {
    id: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...queryParams } = args
      const url = `/api/v4/projects/${id}/custom_attributes/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-custom-attributes-key',
  `Set a custom attribute on a project`,
  {
    id: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...requestData } = args
      const url = `/api/v4/projects/${id}/custom_attributes/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-custom-attributes-key',
  `Delete a custom attribute on a project`,
  {
    id: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, key, ...queryParams } = args
      const url = `/api/v4/projects/${id}/custom_attributes/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-restore',
  `Restore a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/restore`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects',
  `Get a list of visible projects for authenticated user`,
  {
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    archived: z.string().optional(),
    visibility: z.string().optional(),
    search: z.string().optional(),
    searchNamespaces: z.string().optional(),
    owned: z.string().optional(),
    starred: z.string().optional(),
    imported: z.string().optional(),
    membership: z.string().optional(),
    withIssuesEnabled: z.string().optional(),
    withMergeRequestsEnabled: z.string().optional(),
    withProgrammingLanguage: z.string().optional(),
    minAccessLevel: z.string().optional(),
    idAfter: z.string().optional(),
    idBefore: z.string().optional(),
    lastActivityAfter: z.string().optional(),
    lastActivityBefore: z.string().optional(),
    repositoryStorage: z.string().optional(),
    topic: z.string().optional(),
    topicId: z.string().optional(),
    updatedBefore: z.string().optional(),
    updatedAfter: z.string().optional(),
    includePendingDelete: z.string().optional(),
    markedForDeletionOn: z.string().optional(),
    active: z.string().optional(),
    wikiChecksumFailed: z.string().optional(),
    repositoryChecksumFailed: z.string().optional(),
    includeHidden: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    simple: z.string().optional(),
    statistics: z.string().optional(),
    withCustomAttributes: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('searchNamespaces' in mappedParams) {
        mappedParams['search_namespaces'] = mappedParams['searchNamespaces']
        delete mappedParams['searchNamespaces']
      }
      if ('withIssuesEnabled' in mappedParams) {
        mappedParams['with_issues_enabled'] = mappedParams['withIssuesEnabled']
        delete mappedParams['withIssuesEnabled']
      }
      if ('withMergeRequestsEnabled' in mappedParams) {
        mappedParams['with_merge_requests_enabled'] = mappedParams['withMergeRequestsEnabled']
        delete mappedParams['withMergeRequestsEnabled']
      }
      if ('withProgrammingLanguage' in mappedParams) {
        mappedParams['with_programming_language'] = mappedParams['withProgrammingLanguage']
        delete mappedParams['withProgrammingLanguage']
      }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('idAfter' in mappedParams) {
        mappedParams['id_after'] = mappedParams['idAfter']
        delete mappedParams['idAfter']
      }
      if ('idBefore' in mappedParams) {
        mappedParams['id_before'] = mappedParams['idBefore']
        delete mappedParams['idBefore']
      }
      if ('lastActivityAfter' in mappedParams) {
        mappedParams['last_activity_after'] = mappedParams['lastActivityAfter']
        delete mappedParams['lastActivityAfter']
      }
      if ('lastActivityBefore' in mappedParams) {
        mappedParams['last_activity_before'] = mappedParams['lastActivityBefore']
        delete mappedParams['lastActivityBefore']
      }
      if ('repositoryStorage' in mappedParams) {
        mappedParams['repository_storage'] = mappedParams['repositoryStorage']
        delete mappedParams['repositoryStorage']
      }
      if ('topicId' in mappedParams) {
        mappedParams['topic_id'] = mappedParams['topicId']
        delete mappedParams['topicId']
      }
      if ('updatedBefore' in mappedParams) {
        mappedParams['updated_before'] = mappedParams['updatedBefore']
        delete mappedParams['updatedBefore']
      }
      if ('updatedAfter' in mappedParams) {
        mappedParams['updated_after'] = mappedParams['updatedAfter']
        delete mappedParams['updatedAfter']
      }
      if ('includePendingDelete' in mappedParams) {
        mappedParams['include_pending_delete'] = mappedParams['includePendingDelete']
        delete mappedParams['includePendingDelete']
      }
      if ('markedForDeletionOn' in mappedParams) {
        mappedParams['marked_for_deletion_on'] = mappedParams['markedForDeletionOn']
        delete mappedParams['markedForDeletionOn']
      }
      if ('wikiChecksumFailed' in mappedParams) {
        mappedParams['wiki_checksum_failed'] = mappedParams['wikiChecksumFailed']
        delete mappedParams['wikiChecksumFailed']
      }
      if ('repositoryChecksumFailed' in mappedParams) {
        mappedParams['repository_checksum_failed'] = mappedParams['repositoryChecksumFailed']
        delete mappedParams['repositoryChecksumFailed']
      }
      if ('includeHidden' in mappedParams) {
        mappedParams['include_hidden'] = mappedParams['includeHidden']
        delete mappedParams['includeHidden']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/projects',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-projects', `Create new project`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/projects',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'post-api-v4-projects-user-user-id',
  `Create new project for a specified user. Only available to admin users.`,
  {
    userId: z.string(),
  },
  async (args, extra) => {
    try {
      const { userId, ...requestData } = args
      const url = `/api/v4/projects/user/${userId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-share-locations',
  `Returns group that can be shared with the given project`,
  {
    id: z.string(),
    search: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/share_locations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id',
  `Get a single project`,
  {
    id: z.string(),
    statistics: z.string().optional(),
    withCustomAttributes: z.string().optional(),
    license: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id',
  `Update an existing project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id',
  `Delete a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-fork',
  `Fork new project for the current user or provided namespace.`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/fork`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-fork',
  `Remove a forked_from relationship`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/fork`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-forks',
  `List forks of this project`,
  {
    id: z.string(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    archived: z.string().optional(),
    visibility: z.string().optional(),
    search: z.string().optional(),
    searchNamespaces: z.string().optional(),
    owned: z.string().optional(),
    starred: z.string().optional(),
    imported: z.string().optional(),
    membership: z.string().optional(),
    withIssuesEnabled: z.string().optional(),
    withMergeRequestsEnabled: z.string().optional(),
    withProgrammingLanguage: z.string().optional(),
    minAccessLevel: z.string().optional(),
    idAfter: z.string().optional(),
    idBefore: z.string().optional(),
    lastActivityAfter: z.string().optional(),
    lastActivityBefore: z.string().optional(),
    repositoryStorage: z.string().optional(),
    topic: z.string().optional(),
    topicId: z.string().optional(),
    updatedBefore: z.string().optional(),
    updatedAfter: z.string().optional(),
    includePendingDelete: z.string().optional(),
    markedForDeletionOn: z.string().optional(),
    active: z.string().optional(),
    wikiChecksumFailed: z.string().optional(),
    repositoryChecksumFailed: z.string().optional(),
    includeHidden: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    simple: z.string().optional(),
    withCustomAttributes: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/forks`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('searchNamespaces' in mappedParams) {
        mappedParams['search_namespaces'] = mappedParams['searchNamespaces']
        delete mappedParams['searchNamespaces']
      }
      if ('withIssuesEnabled' in mappedParams) {
        mappedParams['with_issues_enabled'] = mappedParams['withIssuesEnabled']
        delete mappedParams['withIssuesEnabled']
      }
      if ('withMergeRequestsEnabled' in mappedParams) {
        mappedParams['with_merge_requests_enabled'] = mappedParams['withMergeRequestsEnabled']
        delete mappedParams['withMergeRequestsEnabled']
      }
      if ('withProgrammingLanguage' in mappedParams) {
        mappedParams['with_programming_language'] = mappedParams['withProgrammingLanguage']
        delete mappedParams['withProgrammingLanguage']
      }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('idAfter' in mappedParams) {
        mappedParams['id_after'] = mappedParams['idAfter']
        delete mappedParams['idAfter']
      }
      if ('idBefore' in mappedParams) {
        mappedParams['id_before'] = mappedParams['idBefore']
        delete mappedParams['idBefore']
      }
      if ('lastActivityAfter' in mappedParams) {
        mappedParams['last_activity_after'] = mappedParams['lastActivityAfter']
        delete mappedParams['lastActivityAfter']
      }
      if ('lastActivityBefore' in mappedParams) {
        mappedParams['last_activity_before'] = mappedParams['lastActivityBefore']
        delete mappedParams['lastActivityBefore']
      }
      if ('repositoryStorage' in mappedParams) {
        mappedParams['repository_storage'] = mappedParams['repositoryStorage']
        delete mappedParams['repositoryStorage']
      }
      if ('topicId' in mappedParams) {
        mappedParams['topic_id'] = mappedParams['topicId']
        delete mappedParams['topicId']
      }
      if ('updatedBefore' in mappedParams) {
        mappedParams['updated_before'] = mappedParams['updatedBefore']
        delete mappedParams['updatedBefore']
      }
      if ('updatedAfter' in mappedParams) {
        mappedParams['updated_after'] = mappedParams['updatedAfter']
        delete mappedParams['updatedAfter']
      }
      if ('includePendingDelete' in mappedParams) {
        mappedParams['include_pending_delete'] = mappedParams['includePendingDelete']
        delete mappedParams['includePendingDelete']
      }
      if ('markedForDeletionOn' in mappedParams) {
        mappedParams['marked_for_deletion_on'] = mappedParams['markedForDeletionOn']
        delete mappedParams['markedForDeletionOn']
      }
      if ('wikiChecksumFailed' in mappedParams) {
        mappedParams['wiki_checksum_failed'] = mappedParams['wikiChecksumFailed']
        delete mappedParams['wikiChecksumFailed']
      }
      if ('repositoryChecksumFailed' in mappedParams) {
        mappedParams['repository_checksum_failed'] = mappedParams['repositoryChecksumFailed']
        delete mappedParams['repositoryChecksumFailed']
      }
      if ('includeHidden' in mappedParams) {
        mappedParams['include_hidden'] = mappedParams['includeHidden']
        delete mappedParams['includeHidden']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-pages-access',
  `Check pages access of this project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/pages_access`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-archive',
  `Archive a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/archive`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-unarchive',
  `Unarchive a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/unarchive`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-star',
  `Star a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/star`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-unstar',
  `Unstar a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/unstar`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-starrers',
  `Get the users who starred a project`,
  {
    id: z.string(),
    search: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/starrers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-languages',
  `Get languages in project repository`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/languages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-fork-forked-from-id',
  `Mark this project as forked from another`,
  {
    id: z.string(),
    forkedFromId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, forkedFromId, ...requestData } = args
      const url = `/api/v4/projects/${id}/fork/${forkedFromId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('forkedFromId' in mappedParams) {
        mappedParams['forked_from_id'] = mappedParams['forkedFromId']
        delete mappedParams['forkedFromId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-share',
  `Share the project with a group`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/share`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-share-group-id',
  `Remove a group share`,
  {
    id: z.string(),
    groupId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, groupId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/share/${groupId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('groupId' in mappedParams) {
        mappedParams['group_id'] = mappedParams['groupId']
        delete mappedParams['groupId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-import-project-members-project-id',
  `Import members from another project`,
  {
    id: z.string(),
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, projectId, ...requestData } = args
      const url = `/api/v4/projects/${id}/import_project_members/${projectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-users',
  `Get the users list of a project`,
  {
    id: z.string(),
    search: z.string().optional(),
    skipUsers: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/users`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('skipUsers' in mappedParams) {
        mappedParams['skip_users'] = mappedParams['skipUsers']
        delete mappedParams['skipUsers']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-groups',
  `Get ancestor and shared groups for a project`,
  {
    id: z.string(),
    search: z.string().optional(),
    skipGroups: z.string().optional(),
    withShared: z.string().optional(),
    sharedVisibleOnly: z.string().optional(),
    sharedMinAccessLevel: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/groups`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('skipGroups' in mappedParams) {
        mappedParams['skip_groups'] = mappedParams['skipGroups']
        delete mappedParams['skipGroups']
      }
      if ('withShared' in mappedParams) {
        mappedParams['with_shared'] = mappedParams['withShared']
        delete mappedParams['withShared']
      }
      if ('sharedVisibleOnly' in mappedParams) {
        mappedParams['shared_visible_only'] = mappedParams['sharedVisibleOnly']
        delete mappedParams['sharedVisibleOnly']
      }
      if ('sharedMinAccessLevel' in mappedParams) {
        mappedParams['shared_min_access_level'] = mappedParams['sharedMinAccessLevel']
        delete mappedParams['sharedMinAccessLevel']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-invited-groups',
  `Get a list of invited groups in this project`,
  {
    id: z.string(),
    relation: z.string().optional(),
    search: z.string().optional(),
    minAccessLevel: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    withCustomAttributes: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/invited_groups`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-housekeeping',
  `Start the housekeeping task for a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/housekeeping`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-repository-size',
  `Start a task to recalculate repository size for a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository_size`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-transfer',
  `Transfer a project to a new namespace`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/transfer`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-transfer-locations',
  `Get the namespaces to where the project can be transferred`,
  {
    id: z.string(),
    search: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/transfer_locations`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-storage',
  `Show the storage information`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/storage`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-audit-events',
  `Get a list of audit events in this project.`,
  {
    id: z.string(),
    createdAfter: z.string().optional(),
    createdBefore: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/audit_events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-audit-events-audit-event-id',
  `Get a specific audit event in this project.`,
  {
    id: z.string(),
    auditEventId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, auditEventId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/audit_events/${auditEventId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('auditEventId' in mappedParams) {
        mappedParams['audit_event_id'] = mappedParams['auditEventId']
        delete mappedParams['auditEventId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-protected-branches',
  `Get a project&#x27;s protected branches`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    search: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/protected_branches`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-protected-branches',
  `Protect a single branch`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/protected_branches`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-protected-branches-name',
  `Get a single protected branch`,
  {
    id: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, name, ...queryParams } = args
      const url = `/api/v4/projects/${id}/protected_branches/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'patch-api-v4-projects-id-protected-branches-name',
  `Update a protected branch`,
  {
    id: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, name, ...requestData } = args
      const url = `/api/v4/projects/${id}/protected_branches/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-protected-branches-name',
  `Unprotect a single branch`,
  {
    id: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, name, ...queryParams } = args
      const url = `/api/v4/projects/${id}/protected_branches/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-protected-tags',
  `Get a project&#x27;s protected tags`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/protected_tags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-protected-tags',
  `Protect a single tag or wildcard`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/protected_tags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-protected-tags-name',
  `Get a single protected tag`,
  {
    id: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, name, ...queryParams } = args
      const url = `/api/v4/projects/${id}/protected_tags/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-protected-tags-name',
  `Unprotect a single tag`,
  {
    id: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, name, ...queryParams } = args
      const url = `/api/v4/projects/${id}/protected_tags/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-pypi-files-sha256',
  `The PyPi package download endpoint`,
  {
    id: z.string(),
    sha256: z.string(),
    fileIdentifier: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, sha256, fileIdentifier, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/pypi/files/${sha256}/${fileIdentifier}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileIdentifier' in mappedParams) {
        mappedParams['file_identifier'] = mappedParams['fileIdentifier']
        delete mappedParams['fileIdentifier']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-pypi-simple',
  `The PyPi Simple Project Index Endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/pypi/simple`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-pypi-simple',
  `The PyPi Simple Project Package Endpoint`,
  {
    id: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/pypi/simple/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-pypi',
  `The PyPi Package upload endpoint`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/pypi`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-pypi-authorize',
  `Authorize the PyPi package upload from workhorse`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/pypi/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-releases',
  `List Releases`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    includeHtmlDescription: z.string().optional(),
    updatedBefore: z.string().optional(),
    updatedAfter: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/releases`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('includeHtmlDescription' in mappedParams) {
        mappedParams['include_html_description'] = mappedParams['includeHtmlDescription']
        delete mappedParams['includeHtmlDescription']
      }
      if ('updatedBefore' in mappedParams) {
        mappedParams['updated_before'] = mappedParams['updatedBefore']
        delete mappedParams['updatedBefore']
      }
      if ('updatedAfter' in mappedParams) {
        mappedParams['updated_after'] = mappedParams['updatedAfter']
        delete mappedParams['updatedAfter']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-releases',
  `Create a release`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/releases`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-releases-tag-name',
  `Get a release by a tag name`,
  {
    id: z.string(),
    tagName: z.string(),
    includeHtmlDescription: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/releases/${tagName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }
      if ('includeHtmlDescription' in mappedParams) {
        mappedParams['include_html_description'] = mappedParams['includeHtmlDescription']
        delete mappedParams['includeHtmlDescription']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-releases-tag-name',
  `Update a release`,
  {
    id: z.string(),
    tagName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, ...requestData } = args
      const url = `/api/v4/projects/${id}/releases/${tagName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-releases-tag-name',
  `Delete a release`,
  {
    id: z.string(),
    tagName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/releases/${tagName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-releases-tag-name-downloads',
  `Download a project release asset file`,
  {
    id: z.string(),
    tagName: z.string(),
    directAssetPath: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, directAssetPath, ...queryParams } = args
      const url = `/api/v4/projects/${id}/releases/${tagName}/downloads/${directAssetPath}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }
      if ('directAssetPath' in mappedParams) {
        mappedParams['direct_asset_path'] = mappedParams['directAssetPath']
        delete mappedParams['directAssetPath']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-releases-permalink-latest(',
  `Get the latest project release`,
  {
    id: z.string(),
    suffixPath: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/releases/permalink/latest`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('suffixPath' in mappedParams) {
        mappedParams['suffix_path'] = mappedParams['suffixPath']
        delete mappedParams['suffixPath']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-releases-tag-name-evidence',
  `Collect release evidence`,
  {
    id: z.string(),
    tagName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, ...requestData } = args
      const url = `/api/v4/projects/${id}/releases/${tagName}/evidence`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-releases-tag-name-assets-links',
  `List links of a release`,
  {
    id: z.string(),
    tagName: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/releases/${tagName}/assets/links`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-releases-tag-name-assets-links',
  `Create a release link`,
  {
    id: z.string(),
    tagName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, ...requestData } = args
      const url = `/api/v4/projects/${id}/releases/${tagName}/assets/links`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-releases-tag-name-assets-links-link-id',
  `Get a release link`,
  {
    id: z.string(),
    tagName: z.string(),
    linkId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, linkId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/releases/${tagName}/assets/links/${linkId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }
      if ('linkId' in mappedParams) {
        mappedParams['link_id'] = mappedParams['linkId']
        delete mappedParams['linkId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-releases-tag-name-assets-links-link-id',
  `Update a release link`,
  {
    id: z.string(),
    tagName: z.string(),
    linkId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, linkId, ...requestData } = args
      const url = `/api/v4/projects/${id}/releases/${tagName}/assets/links/${linkId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }
      if ('linkId' in mappedParams) {
        mappedParams['link_id'] = mappedParams['linkId']
        delete mappedParams['linkId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-releases-tag-name-assets-links-link-id',
  `Delete a release link`,
  {
    id: z.string(),
    tagName: z.string(),
    linkId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, linkId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/releases/${tagName}/assets/links/${linkId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }
      if ('linkId' in mappedParams) {
        mappedParams['link_id'] = mappedParams['linkId']
        delete mappedParams['linkId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-remote-mirrors',
  `List the project&#x27;s remote mirrors`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/remote_mirrors`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-remote-mirrors',
  `Create remote mirror for a project`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/remote_mirrors`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-remote-mirrors-mirror-id',
  `Get a single remote mirror`,
  {
    id: z.string(),
    mirrorId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mirrorId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/remote_mirrors/${mirrorId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mirrorId' in mappedParams) {
        mappedParams['mirror_id'] = mappedParams['mirrorId']
        delete mappedParams['mirrorId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-remote-mirrors-mirror-id',
  `Update the attributes of a single remote mirror`,
  {
    id: z.string(),
    mirrorId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mirrorId, ...requestData } = args
      const url = `/api/v4/projects/${id}/remote_mirrors/${mirrorId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mirrorId' in mappedParams) {
        mappedParams['mirror_id'] = mappedParams['mirrorId']
        delete mappedParams['mirrorId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-remote-mirrors-mirror-id',
  `Delete a single remote mirror`,
  {
    id: z.string(),
    mirrorId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mirrorId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/remote_mirrors/${mirrorId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mirrorId' in mappedParams) {
        mappedParams['mirror_id'] = mappedParams['mirrorId']
        delete mappedParams['mirrorId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-remote-mirrors-mirror-id-sync',
  `Triggers a push mirror operation`,
  {
    id: z.string(),
    mirrorId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mirrorId, ...requestData } = args
      const url = `/api/v4/projects/${id}/remote_mirrors/${mirrorId}/sync`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('mirrorId' in mappedParams) {
        mappedParams['mirror_id'] = mappedParams['mirrorId']
        delete mappedParams['mirrorId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-remote-mirrors-mirror-id-public-key',
  `Get the public key of a single remote mirror`,
  {
    id: z.string(),
    mirrorId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, mirrorId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/remote_mirrors/${mirrorId}/public_key`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('mirrorId' in mappedParams) {
        mappedParams['mirror_id'] = mappedParams['mirrorId']
        delete mappedParams['mirrorId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-tree',
  `Get a project repository tree`,
  {
    id: z.string(),
    ref: z.string().optional(),
    path: z.string().optional(),
    recursive: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    pagination: z.string().optional(),
    pageToken: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/tree`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('pageToken' in mappedParams) {
        mappedParams['page_token'] = mappedParams['pageToken']
        delete mappedParams['pageToken']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-blobs-sha-raw',
  `Get raw blob contents from the repository`,
  {
    id: z.string(),
    sha: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/blobs/${sha}/raw`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-blobs-sha',
  `Get a blob from the repository`,
  {
    id: z.string(),
    sha: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/blobs/${sha}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-archive',
  `Get an archive of the repository`,
  {
    id: z.string(),
    sha: z.string().optional(),
    format: z.string().optional(),
    path: z.string().optional(),
    includeLfsBlobs: z.string().optional(),
    excludePaths: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/archive`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('includeLfsBlobs' in mappedParams) {
        mappedParams['include_lfs_blobs'] = mappedParams['includeLfsBlobs']
        delete mappedParams['includeLfsBlobs']
      }
      if ('excludePaths' in mappedParams) {
        mappedParams['exclude_paths'] = mappedParams['excludePaths']
        delete mappedParams['excludePaths']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-compare',
  `Compare two branches, tags, or commits`,
  {
    id: z.string(),
    from: z.string(),
    to: z.string(),
    fromProjectId: z.string().optional(),
    straight: z.string().optional(),
    unidiff: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/compare`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fromProjectId' in mappedParams) {
        mappedParams['from_project_id'] = mappedParams['fromProjectId']
        delete mappedParams['fromProjectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-health',
  `Get repository health`,
  {
    id: z.string(),
    generate: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/health`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-contributors',
  `Get repository contributors`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    ref: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/contributors`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-merge-base',
  `Get the common ancestor between commits`,
  {
    id: z.string(),
    refs: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/merge_base`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-changelog',
  `Generates a changelog section for a release and returns it`,
  {
    id: z.string(),
    version: z.string(),
    from: z.string().optional(),
    to: z.string().optional(),
    date: z.string().optional(),
    trailer: z.string().optional(),
    configFile: z.string().optional(),
    configFileRef: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/changelog`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('configFile' in mappedParams) {
        mappedParams['config_file'] = mappedParams['configFile']
        delete mappedParams['configFile']
      }
      if ('configFileRef' in mappedParams) {
        mappedParams['config_file_ref'] = mappedParams['configFileRef']
        delete mappedParams['configFileRef']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-repository-changelog',
  `Generates a changelog section for a release and commits it in a changelog file`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository/changelog`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-access-tokens-self-rotate',
  `Rotate a resource access token`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/access_tokens/self/rotate`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-issues-eventable-id-resource-milestone-events',
  `List project Issue milestone events`,
  {
    id: z.string(),
    eventableId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, eventableId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/issues/${eventableId}/resource_milestone_events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('eventableId' in mappedParams) {
        mappedParams['eventable_id'] = mappedParams['eventableId']
        delete mappedParams['eventableId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-issues-eventable-id-resource-milestone-events-event-id',
  `Get single Issue milestone event`,
  {
    id: z.string(),
    eventableId: z.string(),
    eventId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, eventableId, eventId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/issues/${eventableId}/resource_milestone_events/${eventId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('eventableId' in mappedParams) {
        mappedParams['eventable_id'] = mappedParams['eventableId']
        delete mappedParams['eventableId']
      }
      if ('eventId' in mappedParams) {
        mappedParams['event_id'] = mappedParams['eventId']
        delete mappedParams['eventId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-eventable-id-resource-milestone-events',
  `List project Merge request milestone events`,
  {
    id: z.string(),
    eventableId: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, eventableId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${eventableId}/resource_milestone_events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('eventableId' in mappedParams) {
        mappedParams['eventable_id'] = mappedParams['eventableId']
        delete mappedParams['eventableId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-merge-requests-eventable-id-resource-milestone-events-event-id',
  `Get single Merge request milestone event`,
  {
    id: z.string(),
    eventableId: z.string(),
    eventId: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, eventableId, eventId, ...queryParams } = args
      const url = `/api/v4/projects/${id}/merge_requests/${eventableId}/resource_milestone_events/${eventId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('eventableId' in mappedParams) {
        mappedParams['eventable_id'] = mappedParams['eventableId']
        delete mappedParams['eventableId']
      }
      if ('eventId' in mappedParams) {
        mappedParams['event_id'] = mappedParams['eventId']
        delete mappedParams['eventId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-rpm-repodata',
  `Download repository metadata files`,
  {
    id: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, fileName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/rpm/repodata/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-rpmfile-name',
  `Download RPM package files`,
  {
    id: z.string(),
    packageFileId: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageFileId, fileName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/rpm/${packageFileId}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageFileId' in mappedParams) {
        mappedParams['package_file_id'] = mappedParams['packageFileId']
        delete mappedParams['packageFileId']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-rpm',
  `Upload a RPM package`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/rpm`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-rpm-authorize',
  `Authorize package upload from workhorse`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/rpm/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-rubygems-file-name',
  `Download the spec index file`,
  {
    id: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, fileName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/rubygems/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-rubygems-quick-marshal48-file-name',
  `Download the gemspec file`,
  {
    id: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, fileName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/rubygems/quick/Marshal.4.8/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-rubygems-gems-file-name',
  `Download the .gem package`,
  {
    id: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, fileName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/rubygems/gems/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-rubygems-api-v1-gems-authorize',
  `Authorize a gem upload from workhorse`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/rubygems/api/v1/gems/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-packages-rubygems-api-v1-gems',
  `Upload a gem`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/rubygems/api/v1/gems`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-rubygems-api-v1-dependencies',
  `Fetch a list of dependencies`,
  {
    id: z.string(),
    gems: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/rubygems/api/v1/dependencies`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-repository-submodules-submodule',
  `Update existing submodule reference in repository`,
  {
    id: z.string(),
    submodule: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, submodule, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository/submodules/${submodule}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-tags',
  `Get a project repository tags`,
  {
    id: z.string(),
    sort: z.string().optional(),
    orderBy: z.string().optional(),
    search: z.string().optional(),
    pageToken: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/tags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('pageToken' in mappedParams) {
        mappedParams['page_token'] = mappedParams['pageToken']
        delete mappedParams['pageToken']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-repository-tags',
  `Create a new repository tag`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/repository/tags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-tags-tag-name',
  `Get a single repository tag`,
  {
    id: z.string(),
    tagName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/tags/${tagName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-repository-tags-tag-name',
  `Delete a repository tag`,
  {
    id: z.string(),
    tagName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/tags/${tagName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-repository-tags-tag-name-signature',
  `Get a tag&#x27;s signature`,
  {
    id: z.string(),
    tagName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, tagName, ...queryParams } = args
      const url = `/api/v4/projects/${id}/repository/tags/${tagName}/signature`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagName' in mappedParams) {
        mappedParams['tag_name'] = mappedParams['tagName']
        delete mappedParams['tagName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-terraform-modules-module-name-module-system',
  `Download the latest version of a module`,
  {
    id: z.string(),
    moduleName: z.string(),
    moduleSystem: z.string(),
    terraformGet: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, moduleName, moduleSystem, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/terraform/modules/${moduleName}/${moduleSystem}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }
      if ('moduleSystem' in mappedParams) {
        mappedParams['module_system'] = mappedParams['moduleSystem']
        delete mappedParams['moduleSystem']
      }
      if ('terraformGet' in mappedParams) {
        mappedParams['terraform-get'] = mappedParams['terraformGet']
        delete mappedParams['terraformGet']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-packages-terraform-modules-module-name-module-system',
  `Download a specific version of a module`,
  {
    id: z.string(),
    moduleName: z.string(),
    moduleSystem: z.string(),
    moduleVersion: z.string(),
    terraformGet: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, moduleName, moduleSystem, moduleVersion, ...queryParams } = args
      const url = `/api/v4/projects/${id}/packages/terraform/modules/${moduleName}/${moduleSystem}/${moduleVersion}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }
      if ('moduleSystem' in mappedParams) {
        mappedParams['module_system'] = mappedParams['moduleSystem']
        delete mappedParams['moduleSystem']
      }
      if ('moduleVersion' in mappedParams) {
        mappedParams['module_version'] = mappedParams['moduleVersion']
        delete mappedParams['moduleVersion']
      }
      if ('terraformGet' in mappedParams) {
        mappedParams['terraform-get'] = mappedParams['terraformGet']
        delete mappedParams['terraformGet']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-terraform-modules-module-name-module-system',
  `Workhorse authorize Terraform Module package file`,
  {
    id: z.string(),
    moduleName: z.string(),
    moduleSystem: z.string(),
    moduleVersion: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, moduleName, moduleSystem, moduleVersion, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/terraform/modules/${moduleName}/${moduleSystem}/${moduleVersion}/file/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }
      if ('moduleSystem' in mappedParams) {
        mappedParams['module_system'] = mappedParams['moduleSystem']
        delete mappedParams['moduleSystem']
      }
      if ('moduleVersion' in mappedParams) {
        mappedParams['module_version'] = mappedParams['moduleVersion']
        delete mappedParams['moduleVersion']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-packages-terraform-modules-module-name-module-system',
  `Upload Terraform Module package file`,
  {
    id: z.string(),
    moduleName: z.string(),
    moduleSystem: z.string(),
    moduleVersion: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, moduleName, moduleSystem, moduleVersion, ...requestData } = args
      const url = `/api/v4/projects/${id}/packages/terraform/modules/${moduleName}/${moduleSystem}/${moduleVersion}/file`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }
      if ('moduleSystem' in mappedParams) {
        mappedParams['module_system'] = mappedParams['moduleSystem']
        delete mappedParams['moduleSystem']
      }
      if ('moduleVersion' in mappedParams) {
        mappedParams['module_version'] = mappedParams['moduleVersion']
        delete mappedParams['moduleVersion']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-terraform-state-name',
  `Get a Terraform state by its name`,
  {
    id: z.string(),
    name: z.string(),
    ID: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, name, ...queryParams } = args
      const url = `/api/v4/projects/${id}/terraform/state/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-terraform-state-name',
  `Add a new Terraform state or update an existing one`,
  {
    id: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, name, ...requestData } = args
      const url = `/api/v4/projects/${id}/terraform/state/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-terraform-state-name',
  `Delete a Terraform state of a certain name`,
  {
    id: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, name, ...queryParams } = args
      const url = `/api/v4/projects/${id}/terraform/state/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-terraform-state-name-lock',
  `Lock a Terraform state of a certain name`,
  {
    id: z.string(),
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, name, ...requestData } = args
      const url = `/api/v4/projects/${id}/terraform/state/${name}/lock`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-terraform-state-name-lock',
  `Unlock a Terraform state of a certain name`,
  {
    id: z.string(),
    name: z.string(),
    ID: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, name, ...queryParams } = args
      const url = `/api/v4/projects/${id}/terraform/state/${name}/lock`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-terraform-state-name-versions-serial',
  `Get a Terraform state version`,
  {
    id: z.string(),
    name: z.string(),
    serial: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, name, serial, ...queryParams } = args
      const url = `/api/v4/projects/${id}/terraform/state/${name}/versions/${serial}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-terraform-state-name-versions-serial',
  `Delete a Terraform state version`,
  {
    id: z.string(),
    name: z.string(),
    serial: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, name, serial, ...queryParams } = args
      const url = `/api/v4/projects/${id}/terraform/state/${name}/versions/${serial}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-wikis',
  `Get a list of wiki pages`,
  {
    id: z.string(),
    withContent: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/projects/${id}/wikis`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('withContent' in mappedParams) {
        mappedParams['with_content'] = mappedParams['withContent']
        delete mappedParams['withContent']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-wikis',
  `Create a wiki page`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/wikis`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-projects-id-wikis-slug',
  `Get a wiki page`,
  {
    id: z.string(),
    slug: z.string(),
    version: z.string().optional(),
    renderHtml: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, slug, ...queryParams } = args
      const url = `/api/v4/projects/${id}/wikis/${slug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('renderHtml' in mappedParams) {
        mappedParams['render_html'] = mappedParams['renderHtml']
        delete mappedParams['renderHtml']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-projects-id-wikis-slug',
  `Update a wiki page`,
  {
    id: z.string(),
    slug: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, slug, ...requestData } = args
      const url = `/api/v4/projects/${id}/wikis/${slug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-projects-id-wikis-slug',
  `Delete a wiki page`,
  {
    id: z.string(),
    slug: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, slug, ...queryParams } = args
      const url = `/api/v4/projects/${id}/wikis/${slug}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-projects-id-wikis-attachments',
  `Upload an attachment to the wiki repository`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/projects/${id}/wikis/attachments`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-admin-batched-background-migrations-id',
  `Retrieve a batched background migration`,
  {
    id: z.string(),
    database: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/admin/batched_background_migrations/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-admin-batched-background-migrations-id-resume',
  `Resume a batched background migration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/admin/batched_background_migrations/${id}/resume`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-admin-batched-background-migrations-id-pause',
  `Pause a batched background migration`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/admin/batched_background_migrations/${id}/pause`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-admin-batched-background-migrations',
  `Get the list of batched background migrations`,
  {
    database: z.string().optional(),
    jobClassName: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('jobClassName' in mappedParams) {
        mappedParams['job_class_name'] = mappedParams['jobClassName']
        delete mappedParams['jobClassName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/admin/batched_background_migrations',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-admin-ci-variables',
  `List all instance-level variables`,
  {
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/admin/ci/variables',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-admin-ci-variables', `Create a new instance-level variable`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/admin/ci/variables',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-admin-ci-variables-key',
  `Get the details of a specific instance-level variable`,
  {
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { key, ...queryParams } = args
      const url = `/api/v4/admin/ci/variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-admin-ci-variables-key',
  `Update an instance-level variable`,
  {
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { key, ...requestData } = args
      const url = `/api/v4/admin/ci/variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-admin-ci-variables-key',
  `Delete an existing instance-level variable`,
  {
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { key, ...queryParams } = args
      const url = `/api/v4/admin/ci/variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-admin-databases-database-name-dictionary-tables-table-name',
  `Retrieve dictionary details`,
  {
    databaseName: z.string(),
    tableName: z.string(),
  },
  async (args, extra) => {
    try {
      const { databaseName, tableName, ...queryParams } = args
      const url = `/api/v4/admin/databases/${databaseName}/dictionary/tables/${tableName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('databaseName' in mappedParams) {
        mappedParams['database_name'] = mappedParams['databaseName']
        delete mappedParams['databaseName']
      }
      if ('tableName' in mappedParams) {
        mappedParams['table_name'] = mappedParams['tableName']
        delete mappedParams['tableName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('get-api-v4-admin-clusters', `List instance clusters`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/admin/clusters',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-admin-clusters-cluster-id',
  `Get a single instance cluster`,
  {
    clusterId: z.string(),
  },
  async (args, extra) => {
    try {
      const { clusterId, ...queryParams } = args
      const url = `/api/v4/admin/clusters/${clusterId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('clusterId' in mappedParams) {
        mappedParams['cluster_id'] = mappedParams['clusterId']
        delete mappedParams['clusterId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-admin-clusters-cluster-id',
  `Edit instance cluster`,
  {
    clusterId: z.string(),
  },
  async (args, extra) => {
    try {
      const { clusterId, ...requestData } = args
      const url = `/api/v4/admin/clusters/${clusterId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('clusterId' in mappedParams) {
        mappedParams['cluster_id'] = mappedParams['clusterId']
        delete mappedParams['clusterId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-admin-clusters-cluster-id',
  `Delete instance cluster`,
  {
    clusterId: z.string(),
  },
  async (args, extra) => {
    try {
      const { clusterId, ...queryParams } = args
      const url = `/api/v4/admin/clusters/${clusterId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('clusterId' in mappedParams) {
        mappedParams['cluster_id'] = mappedParams['clusterId']
        delete mappedParams['clusterId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-admin-clusters-add', `Add existing instance cluster`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/admin/clusters/add',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'post-api-v4-admin-migrations-timestamp-mark',
  `Mark the migration as successfully executed`,
  {
    timestamp: z.string(),
  },
  async (args, extra) => {
    try {
      const { timestamp, ...requestData } = args
      const url = `/api/v4/admin/migrations/${timestamp}/mark`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-broadcast-messages',
  `Get all broadcast messages`,
  {
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/broadcast_messages',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-broadcast-messages', `Create a broadcast message`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/broadcast_messages',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-broadcast-messages-id',
  `Get a specific broadcast message`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/broadcast_messages/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-broadcast-messages-id',
  `Update a broadcast message`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/broadcast_messages/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-broadcast-messages-id',
  `Delete a broadcast message`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/broadcast_messages/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-applications', `Create a new application`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/applications',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('get-api-v4-applications', `Get applications`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/applications',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'delete-api-v4-applications-id',
  `Delete an application`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/applications/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-applications-id-renew-secret',
  `Renew an application secret`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/applications/${id}/renew-secret`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-avatar',
  `Return avatar url for a user`,
  {
    email: z.string(),
    size: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/avatar',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-bulk-imports', `Start a new GitLab Migration`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/bulk_imports',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-bulk-imports',
  `List all GitLab Migrations`,
  {
    page: z.string().optional(),
    perPage: z.string().optional(),
    sort: z.string().optional(),
    status: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/bulk_imports',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-bulk-imports-entities',
  `List all GitLab Migrations&#x27; entities`,
  {
    page: z.string().optional(),
    perPage: z.string().optional(),
    sort: z.string().optional(),
    status: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/bulk_imports/entities',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-bulk-imports-import-id',
  `Get GitLab Migration details`,
  {
    importId: z.string(),
  },
  async (args, extra) => {
    try {
      const { importId, ...queryParams } = args
      const url = `/api/v4/bulk_imports/${importId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('importId' in mappedParams) {
        mappedParams['import_id'] = mappedParams['importId']
        delete mappedParams['importId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-bulk-imports-import-id-entities',
  `List GitLab Migration entities`,
  {
    importId: z.string(),
    status: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { importId, ...queryParams } = args
      const url = `/api/v4/bulk_imports/${importId}/entities`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('importId' in mappedParams) {
        mappedParams['import_id'] = mappedParams['importId']
        delete mappedParams['importId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-bulk-imports-import-id-entities-entity-id',
  `Get GitLab Migration entity details`,
  {
    importId: z.string(),
    entityId: z.string(),
  },
  async (args, extra) => {
    try {
      const { importId, entityId, ...queryParams } = args
      const url = `/api/v4/bulk_imports/${importId}/entities/${entityId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('importId' in mappedParams) {
        mappedParams['import_id'] = mappedParams['importId']
        delete mappedParams['importId']
      }
      if ('entityId' in mappedParams) {
        mappedParams['entity_id'] = mappedParams['entityId']
        delete mappedParams['entityId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-bulk-imports-import-id-entities-entity-id-failures',
  `Get GitLab Migration entity failures`,
  {
    importId: z.string(),
    entityId: z.string(),
  },
  async (args, extra) => {
    try {
      const { importId, entityId, ...queryParams } = args
      const url = `/api/v4/bulk_imports/${importId}/entities/${entityId}/failures`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('importId' in mappedParams) {
        mappedParams['import_id'] = mappedParams['importId']
        delete mappedParams['importId']
      }
      if ('entityId' in mappedParams) {
        mappedParams['entity_id'] = mappedParams['entityId']
        delete mappedParams['entityId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-bulk-imports-import-id-cancel',
  `Cancel GitLab Migration`,
  {
    importId: z.string(),
  },
  async (args, extra) => {
    try {
      const { importId, ...requestData } = args
      const url = `/api/v4/bulk_imports/${importId}/cancel`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('importId' in mappedParams) {
        mappedParams['import_id'] = mappedParams['importId']
        delete mappedParams['importId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('get-api-v4-job', `Get current job using job token`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/job',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('get-api-v4-job-allowed-agents', `Get current agents`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/job/allowed_agents',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('post-api-v4-runners', `Register a new runner`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/runners',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'delete-api-v4-runners',
  `Delete a runner by authentication token`,
  {
    token: z.string(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: '/api/v4/runners',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-runners',
  `List available runners`,
  {
    scope: z.string().optional(),
    type: z.string().optional(),
    paused: z.string().optional(),
    status: z.string().optional(),
    tagList: z.string().optional(),
    versionPrefix: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagList' in mappedParams) {
        mappedParams['tag_list'] = mappedParams['tagList']
        delete mappedParams['tagList']
      }
      if ('versionPrefix' in mappedParams) {
        mappedParams['version_prefix'] = mappedParams['versionPrefix']
        delete mappedParams['versionPrefix']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/runners',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-runners-managers',
  `Internal endpoint that deletes a runner manager by authentication token and system ID.`,
  {
    token: z.string(),
    systemId: z.string(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('systemId' in mappedParams) {
        mappedParams['system_id'] = mappedParams['systemId']
        delete mappedParams['systemId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: '/api/v4/runners/managers',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-runners-verify',
  `Verify authentication for a registered runner`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/runners/verify',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-runners-reset-authentication-token',
  `Reset runner authentication token with current token`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/runners/reset_authentication_token',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-runners-all',
  `List all runners`,
  {
    scope: z.string().optional(),
    type: z.string().optional(),
    paused: z.string().optional(),
    status: z.string().optional(),
    tagList: z.string().optional(),
    versionPrefix: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagList' in mappedParams) {
        mappedParams['tag_list'] = mappedParams['tagList']
        delete mappedParams['tagList']
      }
      if ('versionPrefix' in mappedParams) {
        mappedParams['version_prefix'] = mappedParams['versionPrefix']
        delete mappedParams['versionPrefix']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/runners/all',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-runners-id',
  `Get runner&#x27;s details`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/runners/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-runners-id',
  `Update details of a runner`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/runners/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-runners-id',
  `Delete a runner`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/runners/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-runners-id-managers',
  `Get a list of all runner&#x27;s managers`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/runners/${id}/managers`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-runners-id-jobs',
  `List runner&#x27;s jobs`,
  {
    id: z.string(),
    systemId: z.string().optional(),
    status: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    cursor: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/runners/${id}/jobs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('systemId' in mappedParams) {
        mappedParams['system_id'] = mappedParams['systemId']
        delete mappedParams['systemId']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-runners-id-reset-authentication-token',
  `Reset runner&#x27;s authentication token`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/runners/${id}/reset_authentication_token`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-runners-reset-registration-token',
  `Reset instance&#x27;s runner registration token`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/runners/reset_registration_token',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-jobs-request', `Request a job`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/jobs/request',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'put-api-v4-jobs-id',
  `Update a job`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/jobs/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'patch-api-v4-jobs-id-trace',
  `Append a patch to the job trace`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/jobs/${id}/trace`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PATCH',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-jobs-id-artifacts-authorize',
  `Authorize uploading job artifact`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/jobs/${id}/artifacts/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-jobs-id-artifacts',
  `Upload a job artifact`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/jobs/${id}/artifacts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-jobs-id-artifacts',
  `Download the artifacts file for job`,
  {
    id: z.string(),
    token: z.string().optional(),
    directDownload: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/jobs/${id}/artifacts`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('directDownload' in mappedParams) {
        mappedParams['direct_download'] = mappedParams['directDownload']
        delete mappedParams['directDownload']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-group-id-packages-composer-packages',
  `Composer packages endpoint at group level`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/group/${id}/-/packages/composer/packages`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-group-id-packages-composer-psha',
  `Composer packages endpoint at group level for packages list`,
  {
    id: z.string(),
    sha: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, sha, ...queryParams } = args
      const url = `/api/v4/group/${id}/-/packages/composer/p/${sha}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-group-id-packages-composer-p2',
  `Composer v2 packages p2 endpoint at group level for package versions metadata`,
  {
    id: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...queryParams } = args
      const url = `/api/v4/group/${id}/-/packages/composer/p2/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-group-id-packages-composer',
  `Composer packages endpoint at group level for package versions metadata`,
  {
    id: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, packageName, ...queryParams } = args
      const url = `/api/v4/group/${id}/-/packages/composer/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-conan-v1-users-authenticate',
  `Authenticate user against conan CLI`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/packages/conan/v1/users/authenticate',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-conan-v1-users-check-credentials',
  `Check for valid user credentials per conan CLI`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/packages/conan/v1/users/check_credentials',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-conan-v1-conans-search',
  `Search for packages`,
  {
    q: z.string(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/packages/conan/v1/conans/search',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-search',
  `Get package references metadata`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/search`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('get-api-v4-packages-conan-v1-ping', `Ping the Conan API`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/packages/conan/v1/ping',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-packages-conan-package-reference',
  `Package Snapshot`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    conanPackageReference: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, conanPackageReference, ...queryParams } =
        args
      const url = `/api/v4/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/packages/${conanPackageReference}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-conan-v1-conans-package-name-package-version-package-username-package-channel',
  `Recipe Snapshot`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-packages-conan-v1-conans-package-name-package-version-package-username-package-channel',
  `Delete Package`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-packages-conan-package-reference-digest',
  `Package Digest`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    conanPackageReference: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, conanPackageReference, ...queryParams } =
        args
      const url = `/api/v4/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/packages/${conanPackageReference}/digest`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-digest',
  `Recipe Digest`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/digest`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-packages-conan-package-reference-download-urls',
  `Package Download Urls`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    conanPackageReference: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, conanPackageReference, ...queryParams } =
        args
      const url = `/api/v4/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/packages/${conanPackageReference}/download_urls`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-download-urls',
  `Recipe Download Urls`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, ...queryParams } = args
      const url = `/api/v4/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/download_urls`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-packages-conan-package-reference-upload-urls',
  `Package Upload Urls`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    conanPackageReference: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, conanPackageReference, ...requestData } =
        args
      const url = `/api/v4/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/packages/${conanPackageReference}/upload_urls`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-packages-conan-v1-conans-package-name-package-version-package-username-package-channel-upload-urls',
  `Recipe Upload Urls`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, ...requestData } = args
      const url = `/api/v4/packages/conan/v1/conans/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/upload_urls`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-conan-v1-files-package-name-package-version-package-username-package-channel-recipe-revision-export-file-name',
  `Download recipe files`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, recipeRevision, fileName, ...queryParams } =
        args
      const url = `/api/v4/packages/conan/v1/files/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/${recipeRevision}/export/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-packages-conan-v1-files-package-name-package-version-package-username-package-channel-recipe-revision-export-file-name',
  `Upload recipe package files`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, recipeRevision, fileName, ...requestData } =
        args
      const url = `/api/v4/packages/conan/v1/files/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/${recipeRevision}/export/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-packages-conan-v1-files-package-name-package-version-package-username-package-channel-recipe-revision-export-file-name-authorize',
  `Workhorse authorize the conan recipe file`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, packageVersion, packageUsername, packageChannel, recipeRevision, fileName, ...requestData } =
        args
      const url = `/api/v4/packages/conan/v1/files/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/${recipeRevision}/export/${fileName}/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-conan-v1-files-package-name-package-version-package-username-package-channel-recipe-revision-package-conan-package-reference-package-revision-file-name',
  `Download package files`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
    packageRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        packageRevision,
        fileName,
        ...queryParams
      } = args
      const url = `/api/v4/packages/conan/v1/files/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/${recipeRevision}/package/${conanPackageReference}/${packageRevision}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }
      if ('packageRevision' in mappedParams) {
        mappedParams['package_revision'] = mappedParams['packageRevision']
        delete mappedParams['packageRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-packages-conan-v1-files-package-name-package-version-package-username-package-channel-recipe-revision-package-conan-package-reference-package-revision-file-name',
  `Upload package files`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
    packageRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        packageRevision,
        fileName,
        ...requestData
      } = args
      const url = `/api/v4/packages/conan/v1/files/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/${recipeRevision}/package/${conanPackageReference}/${packageRevision}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }
      if ('packageRevision' in mappedParams) {
        mappedParams['package_revision'] = mappedParams['packageRevision']
        delete mappedParams['packageRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-packages-conan-v1-files-package-name-package-version-package-username-package-channel-recipe-revision-package-conan-package-reference-package-revision-file-name-authorize',
  `Workhorse authorize the conan package file`,
  {
    packageName: z.string(),
    packageVersion: z.string(),
    packageUsername: z.string(),
    packageChannel: z.string(),
    recipeRevision: z.string(),
    conanPackageReference: z.string(),
    packageRevision: z.string(),
    fileName: z.string(),
  },
  async (args, extra) => {
    try {
      const {
        packageName,
        packageVersion,
        packageUsername,
        packageChannel,
        recipeRevision,
        conanPackageReference,
        packageRevision,
        fileName,
        ...requestData
      } = args
      const url = `/api/v4/packages/conan/v1/files/${packageName}/${packageVersion}/${packageUsername}/${packageChannel}/${recipeRevision}/package/${conanPackageReference}/${packageRevision}/${fileName}/authorize`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }
      if ('packageVersion' in mappedParams) {
        mappedParams['package_version'] = mappedParams['packageVersion']
        delete mappedParams['packageVersion']
      }
      if ('packageUsername' in mappedParams) {
        mappedParams['package_username'] = mappedParams['packageUsername']
        delete mappedParams['packageUsername']
      }
      if ('packageChannel' in mappedParams) {
        mappedParams['package_channel'] = mappedParams['packageChannel']
        delete mappedParams['packageChannel']
      }
      if ('recipeRevision' in mappedParams) {
        mappedParams['recipe_revision'] = mappedParams['recipeRevision']
        delete mappedParams['recipeRevision']
      }
      if ('conanPackageReference' in mappedParams) {
        mappedParams['conan_package_reference'] = mappedParams['conanPackageReference']
        delete mappedParams['conanPackageReference']
      }
      if ('packageRevision' in mappedParams) {
        mappedParams['package_revision'] = mappedParams['packageRevision']
        delete mappedParams['packageRevision']
      }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-maven',
  `Download the maven package file at instance level`,
  {
    fileName: z.string(),
    path: z.string(),
  },
  async (args, extra) => {
    try {
      const { fileName, path, ...queryParams } = args
      const url = `/api/v4/packages/maven/${path}/${fileName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('fileName' in mappedParams) {
        mappedParams['file_name'] = mappedParams['fileName']
        delete mappedParams['fileName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-npm-package',
  `Get all tags for a given an NPM package`,
  {
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, ...queryParams } = args
      const url = `/api/v4/packages/npm/-/package/${packageName}/dist-tags`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-packages-npm-package',
  `Create or Update the given tag for the given NPM package and version`,
  {
    tag: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { tag, packageName, ...requestData } = args
      const url = `/api/v4/packages/npm/-/package/${packageName}/dist-tags/${tag}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-packages-npm-package',
  `Deletes the given tag`,
  {
    tag: z.string(),
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { tag, packageName, ...queryParams } = args
      const url = `/api/v4/packages/npm/-/package/${packageName}/dist-tags/${tag}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-packages-npm-npm-v1-security-advisories-bulk',
  `NPM registry bulk advisory endpoint`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/packages/npm/-/npm/v1/security/advisories/bulk',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-packages-npm-npm-v1-security-audits-quick',
  `NPM registry quick audit endpoint`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/packages/npm/-/npm/v1/security/audits/quick',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-npm',
  `NPM registry metadata endpoint`,
  {
    packageName: z.string(),
  },
  async (args, extra) => {
    try {
      const { packageName, ...queryParams } = args
      const url = `/api/v4/packages/npm/${packageName}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('packageName' in mappedParams) {
        mappedParams['package_name'] = mappedParams['packageName']
        delete mappedParams['packageName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-terraform-modules-v1-module-namespace-module-name-module-system-versions',
  `List versions for a module`,
  {
    moduleNamespace: z.string(),
    moduleName: z.string(),
    moduleSystem: z.string(),
  },
  async (args, extra) => {
    try {
      const { moduleNamespace, moduleName, moduleSystem, ...queryParams } = args
      const url = `/api/v4/packages/terraform/modules/v1/${moduleNamespace}/${moduleName}/${moduleSystem}/versions`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('moduleNamespace' in mappedParams) {
        mappedParams['module_namespace'] = mappedParams['moduleNamespace']
        delete mappedParams['moduleNamespace']
      }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }
      if ('moduleSystem' in mappedParams) {
        mappedParams['module_system'] = mappedParams['moduleSystem']
        delete mappedParams['moduleSystem']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-terraform-modules-v1-module-namespace-module-name-module-system-download',
  `Get download location for the latest version of a module`,
  {
    moduleNamespace: z.string(),
    moduleName: z.string(),
    moduleSystem: z.string(),
  },
  async (args, extra) => {
    try {
      const { moduleNamespace, moduleName, moduleSystem, ...queryParams } = args
      const url = `/api/v4/packages/terraform/modules/v1/${moduleNamespace}/${moduleName}/${moduleSystem}/download`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('moduleNamespace' in mappedParams) {
        mappedParams['module_namespace'] = mappedParams['moduleNamespace']
        delete mappedParams['moduleNamespace']
      }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }
      if ('moduleSystem' in mappedParams) {
        mappedParams['module_system'] = mappedParams['moduleSystem']
        delete mappedParams['moduleSystem']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-terraform-modules-v1-module-namespace-module-name-module-system',
  `Get details about the latest version of a module`,
  {
    moduleNamespace: z.string(),
    moduleName: z.string(),
    moduleSystem: z.string(),
  },
  async (args, extra) => {
    try {
      const { moduleNamespace, moduleName, moduleSystem, ...queryParams } = args
      const url = `/api/v4/packages/terraform/modules/v1/${moduleNamespace}/${moduleName}/${moduleSystem}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('moduleNamespace' in mappedParams) {
        mappedParams['module_namespace'] = mappedParams['moduleNamespace']
        delete mappedParams['moduleNamespace']
      }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }
      if ('moduleSystem' in mappedParams) {
        mappedParams['module_system'] = mappedParams['moduleSystem']
        delete mappedParams['moduleSystem']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-terraform-modules-v1-module-namespace-module-name-module-system',
  `Get download location for specific version of a module`,
  {
    moduleNamespace: z.string(),
    moduleName: z.string(),
    moduleSystem: z.string(),
    moduleVersion: z.string(),
  },
  async (args, extra) => {
    try {
      const { moduleNamespace, moduleName, moduleSystem, moduleVersion, ...queryParams } = args
      const url = `/api/v4/packages/terraform/modules/v1/${moduleNamespace}/${moduleName}/${moduleSystem}/${moduleVersion}/download`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('moduleNamespace' in mappedParams) {
        mappedParams['module_namespace'] = mappedParams['moduleNamespace']
        delete mappedParams['moduleNamespace']
      }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }
      if ('moduleSystem' in mappedParams) {
        mappedParams['module_system'] = mappedParams['moduleSystem']
        delete mappedParams['moduleSystem']
      }
      if ('moduleVersion' in mappedParams) {
        mappedParams['module_version'] = mappedParams['moduleVersion']
        delete mappedParams['moduleVersion']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-terraform-modules-v1-module-namespace-module-name-module-system',
  `Download specific version of a module`,
  {
    moduleNamespace: z.string(),
    moduleName: z.string(),
    moduleSystem: z.string(),
    moduleVersion: z.string(),
  },
  async (args, extra) => {
    try {
      const { moduleNamespace, moduleName, moduleSystem, moduleVersion, ...queryParams } = args
      const url = `/api/v4/packages/terraform/modules/v1/${moduleNamespace}/${moduleName}/${moduleSystem}/${moduleVersion}/file`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('moduleNamespace' in mappedParams) {
        mappedParams['module_namespace'] = mappedParams['moduleNamespace']
        delete mappedParams['moduleNamespace']
      }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }
      if ('moduleSystem' in mappedParams) {
        mappedParams['module_system'] = mappedParams['moduleSystem']
        delete mappedParams['moduleSystem']
      }
      if ('moduleVersion' in mappedParams) {
        mappedParams['module_version'] = mappedParams['moduleVersion']
        delete mappedParams['moduleVersion']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-packages-terraform-modules-v1-module-namespace-module-name-module-system',
  `Get details about specific version of a module`,
  {
    moduleNamespace: z.string(),
    moduleName: z.string(),
    moduleSystem: z.string(),
    moduleVersion: z.string(),
  },
  async (args, extra) => {
    try {
      const { moduleNamespace, moduleName, moduleSystem, moduleVersion, ...queryParams } = args
      const url = `/api/v4/packages/terraform/modules/v1/${moduleNamespace}/${moduleName}/${moduleSystem}/${moduleVersion}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('moduleNamespace' in mappedParams) {
        mappedParams['module_namespace'] = mappedParams['moduleNamespace']
        delete mappedParams['moduleNamespace']
      }
      if ('moduleName' in mappedParams) {
        mappedParams['module_name'] = mappedParams['moduleName']
        delete mappedParams['moduleName']
      }
      if ('moduleSystem' in mappedParams) {
        mappedParams['module_system'] = mappedParams['moduleSystem']
        delete mappedParams['moduleSystem']
      }
      if ('moduleVersion' in mappedParams) {
        mappedParams['module_version'] = mappedParams['moduleVersion']
        delete mappedParams['moduleVersion']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-container-registry-event-events',
  `Receives notifications from the container registry when an operation occurs`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/container_registry_event/events',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-registry-repositories-id',
  `Get a container repository`,
  {
    id: z.string(),
    tags: z.string().optional(),
    tagsCount: z.string().optional(),
    size: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/registry/repositories/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('tagsCount' in mappedParams) {
        mappedParams['tags_count'] = mappedParams['tagsCount']
        delete mappedParams['tagsCount']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-events',
  `List currently authenticated user&#x27;s events`,
  {
    scope: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    action: z.string().optional(),
    targetType: z.string().optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('targetType' in mappedParams) {
        mappedParams['target_type'] = mappedParams['targetType']
        delete mappedParams['targetType']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/events',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-users-id-events',
  `Get the contribution events of a specified user`,
  {
    id: z.string(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    action: z.string().optional(),
    targetType: z.string().optional(),
    before: z.string().optional(),
    after: z.string().optional(),
    sort: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/users/${id}/events`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('targetType' in mappedParams) {
        mappedParams['target_type'] = mappedParams['targetType']
        delete mappedParams['targetType']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-users-user-id-projects',
  `Get a user projects`,
  {
    userId: z.string(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    archived: z.string().optional(),
    visibility: z.string().optional(),
    search: z.string().optional(),
    searchNamespaces: z.string().optional(),
    owned: z.string().optional(),
    starred: z.string().optional(),
    imported: z.string().optional(),
    membership: z.string().optional(),
    withIssuesEnabled: z.string().optional(),
    withMergeRequestsEnabled: z.string().optional(),
    withProgrammingLanguage: z.string().optional(),
    minAccessLevel: z.string().optional(),
    idAfter: z.string().optional(),
    idBefore: z.string().optional(),
    lastActivityAfter: z.string().optional(),
    lastActivityBefore: z.string().optional(),
    repositoryStorage: z.string().optional(),
    topic: z.string().optional(),
    topicId: z.string().optional(),
    updatedBefore: z.string().optional(),
    updatedAfter: z.string().optional(),
    includePendingDelete: z.string().optional(),
    markedForDeletionOn: z.string().optional(),
    active: z.string().optional(),
    wikiChecksumFailed: z.string().optional(),
    repositoryChecksumFailed: z.string().optional(),
    includeHidden: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    simple: z.string().optional(),
    statistics: z.string().optional(),
    withCustomAttributes: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { userId, ...queryParams } = args
      const url = `/api/v4/users/${userId}/projects`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('searchNamespaces' in mappedParams) {
        mappedParams['search_namespaces'] = mappedParams['searchNamespaces']
        delete mappedParams['searchNamespaces']
      }
      if ('withIssuesEnabled' in mappedParams) {
        mappedParams['with_issues_enabled'] = mappedParams['withIssuesEnabled']
        delete mappedParams['withIssuesEnabled']
      }
      if ('withMergeRequestsEnabled' in mappedParams) {
        mappedParams['with_merge_requests_enabled'] = mappedParams['withMergeRequestsEnabled']
        delete mappedParams['withMergeRequestsEnabled']
      }
      if ('withProgrammingLanguage' in mappedParams) {
        mappedParams['with_programming_language'] = mappedParams['withProgrammingLanguage']
        delete mappedParams['withProgrammingLanguage']
      }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('idAfter' in mappedParams) {
        mappedParams['id_after'] = mappedParams['idAfter']
        delete mappedParams['idAfter']
      }
      if ('idBefore' in mappedParams) {
        mappedParams['id_before'] = mappedParams['idBefore']
        delete mappedParams['idBefore']
      }
      if ('lastActivityAfter' in mappedParams) {
        mappedParams['last_activity_after'] = mappedParams['lastActivityAfter']
        delete mappedParams['lastActivityAfter']
      }
      if ('lastActivityBefore' in mappedParams) {
        mappedParams['last_activity_before'] = mappedParams['lastActivityBefore']
        delete mappedParams['lastActivityBefore']
      }
      if ('repositoryStorage' in mappedParams) {
        mappedParams['repository_storage'] = mappedParams['repositoryStorage']
        delete mappedParams['repositoryStorage']
      }
      if ('topicId' in mappedParams) {
        mappedParams['topic_id'] = mappedParams['topicId']
        delete mappedParams['topicId']
      }
      if ('updatedBefore' in mappedParams) {
        mappedParams['updated_before'] = mappedParams['updatedBefore']
        delete mappedParams['updatedBefore']
      }
      if ('updatedAfter' in mappedParams) {
        mappedParams['updated_after'] = mappedParams['updatedAfter']
        delete mappedParams['updatedAfter']
      }
      if ('includePendingDelete' in mappedParams) {
        mappedParams['include_pending_delete'] = mappedParams['includePendingDelete']
        delete mappedParams['includePendingDelete']
      }
      if ('markedForDeletionOn' in mappedParams) {
        mappedParams['marked_for_deletion_on'] = mappedParams['markedForDeletionOn']
        delete mappedParams['markedForDeletionOn']
      }
      if ('wikiChecksumFailed' in mappedParams) {
        mappedParams['wiki_checksum_failed'] = mappedParams['wikiChecksumFailed']
        delete mappedParams['wikiChecksumFailed']
      }
      if ('repositoryChecksumFailed' in mappedParams) {
        mappedParams['repository_checksum_failed'] = mappedParams['repositoryChecksumFailed']
        delete mappedParams['repositoryChecksumFailed']
      }
      if ('includeHidden' in mappedParams) {
        mappedParams['include_hidden'] = mappedParams['includeHidden']
        delete mappedParams['includeHidden']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('withCustomAttributes' in mappedParams) {
        mappedParams['with_custom_attributes'] = mappedParams['withCustomAttributes']
        delete mappedParams['withCustomAttributes']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-users-user-id-contributed-projects',
  `Get projects that a user has contributed to`,
  {
    userId: z.string(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    simple: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { userId, ...queryParams } = args
      const url = `/api/v4/users/${userId}/contributed_projects`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-users-user-id-starred-projects',
  `Get projects starred by a user`,
  {
    userId: z.string(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    archived: z.string().optional(),
    visibility: z.string().optional(),
    search: z.string().optional(),
    searchNamespaces: z.string().optional(),
    owned: z.string().optional(),
    starred: z.string().optional(),
    imported: z.string().optional(),
    membership: z.string().optional(),
    withIssuesEnabled: z.string().optional(),
    withMergeRequestsEnabled: z.string().optional(),
    withProgrammingLanguage: z.string().optional(),
    minAccessLevel: z.string().optional(),
    idAfter: z.string().optional(),
    idBefore: z.string().optional(),
    lastActivityAfter: z.string().optional(),
    lastActivityBefore: z.string().optional(),
    repositoryStorage: z.string().optional(),
    topic: z.string().optional(),
    topicId: z.string().optional(),
    updatedBefore: z.string().optional(),
    updatedAfter: z.string().optional(),
    includePendingDelete: z.string().optional(),
    markedForDeletionOn: z.string().optional(),
    active: z.string().optional(),
    wikiChecksumFailed: z.string().optional(),
    repositoryChecksumFailed: z.string().optional(),
    includeHidden: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    simple: z.string().optional(),
    statistics: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { userId, ...queryParams } = args
      const url = `/api/v4/users/${userId}/starred_projects`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('searchNamespaces' in mappedParams) {
        mappedParams['search_namespaces'] = mappedParams['searchNamespaces']
        delete mappedParams['searchNamespaces']
      }
      if ('withIssuesEnabled' in mappedParams) {
        mappedParams['with_issues_enabled'] = mappedParams['withIssuesEnabled']
        delete mappedParams['withIssuesEnabled']
      }
      if ('withMergeRequestsEnabled' in mappedParams) {
        mappedParams['with_merge_requests_enabled'] = mappedParams['withMergeRequestsEnabled']
        delete mappedParams['withMergeRequestsEnabled']
      }
      if ('withProgrammingLanguage' in mappedParams) {
        mappedParams['with_programming_language'] = mappedParams['withProgrammingLanguage']
        delete mappedParams['withProgrammingLanguage']
      }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('idAfter' in mappedParams) {
        mappedParams['id_after'] = mappedParams['idAfter']
        delete mappedParams['idAfter']
      }
      if ('idBefore' in mappedParams) {
        mappedParams['id_before'] = mappedParams['idBefore']
        delete mappedParams['idBefore']
      }
      if ('lastActivityAfter' in mappedParams) {
        mappedParams['last_activity_after'] = mappedParams['lastActivityAfter']
        delete mappedParams['lastActivityAfter']
      }
      if ('lastActivityBefore' in mappedParams) {
        mappedParams['last_activity_before'] = mappedParams['lastActivityBefore']
        delete mappedParams['lastActivityBefore']
      }
      if ('repositoryStorage' in mappedParams) {
        mappedParams['repository_storage'] = mappedParams['repositoryStorage']
        delete mappedParams['repositoryStorage']
      }
      if ('topicId' in mappedParams) {
        mappedParams['topic_id'] = mappedParams['topicId']
        delete mappedParams['topicId']
      }
      if ('updatedBefore' in mappedParams) {
        mappedParams['updated_before'] = mappedParams['updatedBefore']
        delete mappedParams['updatedBefore']
      }
      if ('updatedAfter' in mappedParams) {
        mappedParams['updated_after'] = mappedParams['updatedAfter']
        delete mappedParams['updatedAfter']
      }
      if ('includePendingDelete' in mappedParams) {
        mappedParams['include_pending_delete'] = mappedParams['includePendingDelete']
        delete mappedParams['includePendingDelete']
      }
      if ('markedForDeletionOn' in mappedParams) {
        mappedParams['marked_for_deletion_on'] = mappedParams['markedForDeletionOn']
        delete mappedParams['markedForDeletionOn']
      }
      if ('wikiChecksumFailed' in mappedParams) {
        mappedParams['wiki_checksum_failed'] = mappedParams['wikiChecksumFailed']
        delete mappedParams['wikiChecksumFailed']
      }
      if ('repositoryChecksumFailed' in mappedParams) {
        mappedParams['repository_checksum_failed'] = mappedParams['repositoryChecksumFailed']
        delete mappedParams['repositoryChecksumFailed']
      }
      if ('includeHidden' in mappedParams) {
        mappedParams['include_hidden'] = mappedParams['includeHidden']
        delete mappedParams['includeHidden']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('get-api-v4-features', `List all features`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/features',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('get-api-v4-features-definitions', `List all feature definitions`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/features/definitions',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'post-api-v4-features-name',
  `Set or create a feature`,
  {
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { name, ...requestData } = args
      const url = `/api/v4/features/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-features-name',
  `Delete a feature`,
  {
    name: z.string(),
  },
  async (args, extra) => {
    try {
      const { name, ...queryParams } = args
      const url = `/api/v4/features/${name}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('get-api-v4-geo-proxy', `Determine if a Geo site should proxy requests`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/geo/proxy',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-geo-retrieve-replicable-name-replicable-id',
  `Internal endpoint that returns a replicable file`,
  {
    replicableName: z.string(),
    replicableId: z.string(),
  },
  async (args, extra) => {
    try {
      const { replicableName, replicableId, ...queryParams } = args
      const url = `/api/v4/geo/retrieve/${replicableName}/${replicableId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('replicableName' in mappedParams) {
        mappedParams['replicable_name'] = mappedParams['replicableName']
        delete mappedParams['replicableName']
      }
      if ('replicableId' in mappedParams) {
        mappedParams['replicable_id'] = mappedParams['replicableId']
        delete mappedParams['replicableId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-geo-repositories-gl-repository-pipeline-refs',
  `Used by secondary runners to verify the secondary instance has the very latest version`,
  {
    glRepository: z.string(),
  },
  async (args, extra) => {
    try {
      const { glRepository, ...queryParams } = args
      const url = `/api/v4/geo/repositories/${glRepository}/pipeline_refs`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('glRepository' in mappedParams) {
        mappedParams['gl_repository'] = mappedParams['glRepository']
        delete mappedParams['glRepository']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-geo-status',
  `Internal endpoint that posts the current node status`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/geo/status',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-geo-proxy-git-ssh-info-refs-upload-pack',
  `Internal endpoint that returns info refs upload pack for git clone/pull`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/geo/proxy_git_ssh/info_refs_upload_pack',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-geo-proxy-git-ssh-upload-pack',
  `Internal endpoint that posts git-upload-pack for git clone/pull`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/geo/proxy_git_ssh/upload_pack',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-geo-proxy-git-ssh-info-refs-receive-pack',
  `Internal endpoint that returns git-received-pack output for git push`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/geo/proxy_git_ssh/info_refs_receive_pack',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-geo-proxy-git-ssh-receive-pack',
  `Internal endpoint that posts git-receive-pack for git push`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/geo/proxy_git_ssh/receive_pack',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-geo-node-proxy-id-graphql',
  `Query the GraphQL endpoint of an existing Geo node`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/geo/node_proxy/${id}/graphql`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-integrations-slack-events', `Receive Slack events`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/integrations/slack/events',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'post-api-v4-integrations-slack-interactions',
  `POST /api/v4/integrations/slack/interactions`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/integrations/slack/interactions',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-integrations-slack-options',
  `POST /api/v4/integrations/slack/options`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/integrations/slack/options',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-integrations-jira-connect-subscriptions',
  `Subscribe a namespace to a JiraConnectInstallation`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/integrations/jira_connect/subscriptions',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-keys-id',
  `Get single ssh key by id. Only available to admin users`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/keys/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-keys',
  `Get user by fingerprint of SSH key`,
  {
    fingerprint: z.string(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/keys',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-markdown', `Render an arbitrary Markdown document`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/markdown',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-merge-requests',
  `List merge requests`,
  {
    authorId: z.string().optional(),
    authorUsername: z.string().optional(),
    assigneeId: z.string().optional(),
    assigneeUsername: z.string().optional(),
    reviewerUsername: z.string().optional(),
    labels: z.string().optional(),
    milestone: z.string().optional(),
    myReactionEmoji: z.string().optional(),
    reviewerId: z.string().optional(),
    state: z.string().optional(),
    orderBy: z.string().optional(),
    sort: z.string().optional(),
    withLabelsDetails: z.string().optional(),
    withMergeStatusRecheck: z.string().optional(),
    createdAfter: z.string().optional(),
    createdBefore: z.string().optional(),
    updatedAfter: z.string().optional(),
    updatedBefore: z.string().optional(),
    view: z.string().optional(),
    scope: z.string().optional(),
    sourceBranch: z.string().optional(),
    sourceProjectId: z.string().optional(),
    targetBranch: z.string().optional(),
    search: z.string().optional(),
    in: z.string().optional(),
    wip: z.string().optional(),
    'not[authorId]': z.string().optional(),
    'not[authorUsername]': z.string().optional(),
    'not[assigneeId]': z.string().optional(),
    'not[assigneeUsername]': z.string().optional(),
    'not[reviewerUsername]': z.string().optional(),
    'not[labels]': z.string().optional(),
    'not[milestone]': z.string().optional(),
    'not[myReactionEmoji]': z.string().optional(),
    'not[reviewerId]': z.string().optional(),
    deployedBefore: z.string().optional(),
    deployedAfter: z.string().optional(),
    environment: z.string().optional(),
    approved: z.string().optional(),
    mergeUserId: z.string().optional(),
    mergeUserUsername: z.string().optional(),
    approverIds: z.string().optional(),
    approvedByIds: z.string().optional(),
    approvedByUsernames: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('authorId' in mappedParams) {
        mappedParams['author_id'] = mappedParams['authorId']
        delete mappedParams['authorId']
      }
      if ('authorUsername' in mappedParams) {
        mappedParams['author_username'] = mappedParams['authorUsername']
        delete mappedParams['authorUsername']
      }
      if ('assigneeId' in mappedParams) {
        mappedParams['assignee_id'] = mappedParams['assigneeId']
        delete mappedParams['assigneeId']
      }
      if ('assigneeUsername' in mappedParams) {
        mappedParams['assignee_username'] = mappedParams['assigneeUsername']
        delete mappedParams['assigneeUsername']
      }
      if ('reviewerUsername' in mappedParams) {
        mappedParams['reviewer_username'] = mappedParams['reviewerUsername']
        delete mappedParams['reviewerUsername']
      }
      if ('myReactionEmoji' in mappedParams) {
        mappedParams['my_reaction_emoji'] = mappedParams['myReactionEmoji']
        delete mappedParams['myReactionEmoji']
      }
      if ('reviewerId' in mappedParams) {
        mappedParams['reviewer_id'] = mappedParams['reviewerId']
        delete mappedParams['reviewerId']
      }
      if ('orderBy' in mappedParams) {
        mappedParams['order_by'] = mappedParams['orderBy']
        delete mappedParams['orderBy']
      }
      if ('withLabelsDetails' in mappedParams) {
        mappedParams['with_labels_details'] = mappedParams['withLabelsDetails']
        delete mappedParams['withLabelsDetails']
      }
      if ('withMergeStatusRecheck' in mappedParams) {
        mappedParams['with_merge_status_recheck'] = mappedParams['withMergeStatusRecheck']
        delete mappedParams['withMergeStatusRecheck']
      }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('updatedAfter' in mappedParams) {
        mappedParams['updated_after'] = mappedParams['updatedAfter']
        delete mappedParams['updatedAfter']
      }
      if ('updatedBefore' in mappedParams) {
        mappedParams['updated_before'] = mappedParams['updatedBefore']
        delete mappedParams['updatedBefore']
      }
      if ('sourceBranch' in mappedParams) {
        mappedParams['source_branch'] = mappedParams['sourceBranch']
        delete mappedParams['sourceBranch']
      }
      if ('sourceProjectId' in mappedParams) {
        mappedParams['source_project_id'] = mappedParams['sourceProjectId']
        delete mappedParams['sourceProjectId']
      }
      if ('targetBranch' in mappedParams) {
        mappedParams['target_branch'] = mappedParams['targetBranch']
        delete mappedParams['targetBranch']
      }
      if ('not[authorId]' in mappedParams) {
        mappedParams['not[author_id]'] = mappedParams['not[authorId]']
        delete mappedParams['not[authorId]']
      }
      if ('not[authorUsername]' in mappedParams) {
        mappedParams['not[author_username]'] = mappedParams['not[authorUsername]']
        delete mappedParams['not[authorUsername]']
      }
      if ('not[assigneeId]' in mappedParams) {
        mappedParams['not[assignee_id]'] = mappedParams['not[assigneeId]']
        delete mappedParams['not[assigneeId]']
      }
      if ('not[assigneeUsername]' in mappedParams) {
        mappedParams['not[assignee_username]'] = mappedParams['not[assigneeUsername]']
        delete mappedParams['not[assigneeUsername]']
      }
      if ('not[reviewerUsername]' in mappedParams) {
        mappedParams['not[reviewer_username]'] = mappedParams['not[reviewerUsername]']
        delete mappedParams['not[reviewerUsername]']
      }
      if ('not[myReactionEmoji]' in mappedParams) {
        mappedParams['not[my_reaction_emoji]'] = mappedParams['not[myReactionEmoji]']
        delete mappedParams['not[myReactionEmoji]']
      }
      if ('not[reviewerId]' in mappedParams) {
        mappedParams['not[reviewer_id]'] = mappedParams['not[reviewerId]']
        delete mappedParams['not[reviewerId]']
      }
      if ('deployedBefore' in mappedParams) {
        mappedParams['deployed_before'] = mappedParams['deployedBefore']
        delete mappedParams['deployedBefore']
      }
      if ('deployedAfter' in mappedParams) {
        mappedParams['deployed_after'] = mappedParams['deployedAfter']
        delete mappedParams['deployedAfter']
      }
      if ('mergeUserId' in mappedParams) {
        mappedParams['merge_user_id'] = mappedParams['mergeUserId']
        delete mappedParams['mergeUserId']
      }
      if ('mergeUserUsername' in mappedParams) {
        mappedParams['merge_user_username'] = mappedParams['mergeUserUsername']
        delete mappedParams['mergeUserUsername']
      }
      if ('approverIds' in mappedParams) {
        mappedParams['approver_ids'] = mappedParams['approverIds']
        delete mappedParams['approverIds']
      }
      if ('approvedByIds' in mappedParams) {
        mappedParams['approved_by_ids'] = mappedParams['approvedByIds']
        delete mappedParams['approvedByIds']
      }
      if ('approvedByUsernames' in mappedParams) {
        mappedParams['approved_by_usernames'] = mappedParams['approvedByUsernames']
        delete mappedParams['approvedByUsernames']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/merge_requests',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-namespaces-id',
  `[DEPRECATED] Update a namespace`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/namespaces/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-namespaces-id',
  `Get namespace by ID`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/namespaces/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-namespaces-id-gitlab-subscription',
  `Returns the subscription for the namespace`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/namespaces/${id}/gitlab_subscription`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-namespaces-id-storage-limit-exclusion',
  `Creates a storage limit exclusion for a Namespace`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/namespaces/${id}/storage/limit_exclusion`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-namespaces-id-storage-limit-exclusion',
  `Removes a storage limit exclusion for a Namespace`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/namespaces/${id}/storage/limit_exclusion`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-namespaces-storage-limit-exclusions',
  `Retrieve all limit exclusions`,
  {
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/namespaces/storage/limit_exclusions',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-namespaces',
  `List namespaces`,
  {
    search: z.string().optional(),
    ownedOnly: z.string().optional(),
    topLevelOnly: z.string().optional(),
    fullPathSearch: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    requestedHostedPlan: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('ownedOnly' in mappedParams) {
        mappedParams['owned_only'] = mappedParams['ownedOnly']
        delete mappedParams['ownedOnly']
      }
      if ('topLevelOnly' in mappedParams) {
        mappedParams['top_level_only'] = mappedParams['topLevelOnly']
        delete mappedParams['topLevelOnly']
      }
      if ('fullPathSearch' in mappedParams) {
        mappedParams['full_path_search'] = mappedParams['fullPathSearch']
        delete mappedParams['fullPathSearch']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('requestedHostedPlan' in mappedParams) {
        mappedParams['requested_hosted_plan'] = mappedParams['requestedHostedPlan']
        delete mappedParams['requestedHostedPlan']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/namespaces',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-namespaces-id-exists',
  `Get existence of a namespace`,
  {
    id: z.string(),
    parentId: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/namespaces/${id}/exists`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('parentId' in mappedParams) {
        mappedParams['parent_id'] = mappedParams['parentId']
        delete mappedParams['parentId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-organizations', `Create an organization`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/organizations',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-pages-domains',
  `Get all pages domains`,
  {
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/pages/domains',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-personal-access-tokens-self',
  `Get single personal access token`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/personal_access_tokens/self',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-personal-access-tokens-self',
  `Revoke a personal access token`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: '/api/v4/personal_access_tokens/self',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-personal-access-tokens-self-associations',
  `Return personal access token associations`,
  {
    minAccessLevel: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('minAccessLevel' in mappedParams) {
        mappedParams['min_access_level'] = mappedParams['minAccessLevel']
        delete mappedParams['minAccessLevel']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/personal_access_tokens/self/associations',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-personal-access-tokens-self-rotate',
  `Rotate a personal access token`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/personal_access_tokens/self/rotate',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-personal-access-tokens',
  `List personal access tokens`,
  {
    userId: z.string().optional(),
    revoked: z.string().optional(),
    state: z.string().optional(),
    createdBefore: z.string().optional(),
    createdAfter: z.string().optional(),
    lastUsedBefore: z.string().optional(),
    lastUsedAfter: z.string().optional(),
    expiresBefore: z.string().optional(),
    expiresAfter: z.string().optional(),
    search: z.string().optional(),
    sort: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('userId' in mappedParams) {
        mappedParams['user_id'] = mappedParams['userId']
        delete mappedParams['userId']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('lastUsedBefore' in mappedParams) {
        mappedParams['last_used_before'] = mappedParams['lastUsedBefore']
        delete mappedParams['lastUsedBefore']
      }
      if ('lastUsedAfter' in mappedParams) {
        mappedParams['last_used_after'] = mappedParams['lastUsedAfter']
        delete mappedParams['lastUsedAfter']
      }
      if ('expiresBefore' in mappedParams) {
        mappedParams['expires_before'] = mappedParams['expiresBefore']
        delete mappedParams['expiresBefore']
      }
      if ('expiresAfter' in mappedParams) {
        mappedParams['expires_after'] = mappedParams['expiresAfter']
        delete mappedParams['expiresAfter']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/personal_access_tokens',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-personal-access-tokens-id',
  `Get single personal access token`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/personal_access_tokens/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-personal-access-tokens-id',
  `Revoke a personal access token`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/personal_access_tokens/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-personal-access-tokens-id-rotate',
  `Rotate personal access token`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/personal_access_tokens/${id}/rotate`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-snippets',
  `Get a snippets list for an authenticated user`,
  {
    createdAfter: z.string().optional(),
    createdBefore: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/snippets',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-snippets', `Create new snippet`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/snippets',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-snippets-public',
  `List all public personal snippets current_user has access to`,
  {
    createdAfter: z.string().optional(),
    createdBefore: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/snippets/public',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-snippets-all',
  `List all snippets current_user has access to`,
  {
    createdAfter: z.string().optional(),
    createdBefore: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
    repositoryStorage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('createdAfter' in mappedParams) {
        mappedParams['created_after'] = mappedParams['createdAfter']
        delete mappedParams['createdAfter']
      }
      if ('createdBefore' in mappedParams) {
        mappedParams['created_before'] = mappedParams['createdBefore']
        delete mappedParams['createdBefore']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }
      if ('repositoryStorage' in mappedParams) {
        mappedParams['repository_storage'] = mappedParams['repositoryStorage']
        delete mappedParams['repositoryStorage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/snippets/all',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-snippets-id',
  `Get a single snippet`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/snippets/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-snippets-id',
  `Update an existing snippet`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/snippets/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-snippets-id',
  `Remove snippet`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/snippets/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-snippets-id-raw',
  `Get a raw snippet`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/snippets/${id}/raw`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-snippets-id-files-ref-file-path-raw',
  `Get raw snippet file contents from the repository`,
  {
    id: z.string(),
    ref: z.string(),
    filePath: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ref, filePath, ...queryParams } = args
      const url = `/api/v4/snippets/${id}/files/${ref}/${filePath}/raw`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('filePath' in mappedParams) {
        mappedParams['file_path'] = mappedParams['filePath']
        delete mappedParams['filePath']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-snippets-id-user-agent-detail',
  `Get the user agent details for a snippet`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/snippets/${id}/user_agent_detail`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-suggestions-id-apply',
  `Apply suggestion patch in the Merge Request it was created`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/suggestions/${id}/apply`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-suggestions-batch-apply',
  `Apply multiple suggestion patches in the Merge Request where they were created`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: '/api/v4/suggestions/batch_apply',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-hooks-hook-id-url-variables-key',
  `Set a url variable`,
  {
    hookId: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { hookId, key, ...requestData } = args
      const url = `/api/v4/hooks/${hookId}/url_variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-hooks-hook-id-url-variables-key',
  `Un-Set a url variable`,
  {
    hookId: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { hookId, key, ...queryParams } = args
      const url = `/api/v4/hooks/${hookId}/url_variables/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-hooks-hook-id-custom-headers-key',
  `Set a custom header`,
  {
    hookId: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { hookId, key, ...requestData } = args
      const url = `/api/v4/hooks/${hookId}/custom_headers/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-hooks-hook-id-custom-headers-key',
  `Un-Set a custom header`,
  {
    hookId: z.string(),
    key: z.string(),
  },
  async (args, extra) => {
    try {
      const { hookId, key, ...queryParams } = args
      const url = `/api/v4/hooks/${hookId}/custom_headers/${key}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-hooks',
  `List system hooks`,
  {
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/hooks',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-hooks', `Add new system hook`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/hooks',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-hooks-hook-id',
  `Get system hook`,
  {
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { hookId, ...queryParams } = args
      const url = `/api/v4/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-hooks-hook-id',
  `Edit system hook`,
  {
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { hookId, ...requestData } = args
      const url = `/api/v4/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-hooks-hook-id',
  `POST /api/v4/hooks/{hook_id}`,
  {
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { hookId, ...requestData } = args
      const url = `/api/v4/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-hooks-hook-id',
  `Delete system hook`,
  {
    hookId: z.string(),
  },
  async (args, extra) => {
    try {
      const { hookId, ...queryParams } = args
      const url = `/api/v4/hooks/${hookId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('hookId' in mappedParams) {
        mappedParams['hook_id'] = mappedParams['hookId']
        delete mappedParams['hookId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-feature-flags-unleash-project-id',
  `GET /api/v4/feature_flags/unleash/{project_id}`,
  {
    projectId: z.string(),
    instanceId: z.string().optional(),
    appName: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...queryParams } = args
      const url = `/api/v4/feature_flags/unleash/${projectId}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }
      if ('instanceId' in mappedParams) {
        mappedParams['instance_id'] = mappedParams['instanceId']
        delete mappedParams['instanceId']
      }
      if ('appName' in mappedParams) {
        mappedParams['app_name'] = mappedParams['appName']
        delete mappedParams['appName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-feature-flags-unleash-project-id-features',
  `Get a list of features (deprecated, v2 client support)`,
  {
    projectId: z.string(),
    instanceId: z.string().optional(),
    appName: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...queryParams } = args
      const url = `/api/v4/feature_flags/unleash/${projectId}/features`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }
      if ('instanceId' in mappedParams) {
        mappedParams['instance_id'] = mappedParams['instanceId']
        delete mappedParams['instanceId']
      }
      if ('appName' in mappedParams) {
        mappedParams['app_name'] = mappedParams['appName']
        delete mappedParams['appName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-feature-flags-unleash-project-id-client-features',
  `Get a list of features`,
  {
    projectId: z.string(),
    instanceId: z.string().optional(),
    appName: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...queryParams } = args
      const url = `/api/v4/feature_flags/unleash/${projectId}/client/features`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }
      if ('instanceId' in mappedParams) {
        mappedParams['instance_id'] = mappedParams['instanceId']
        delete mappedParams['instanceId']
      }
      if ('appName' in mappedParams) {
        mappedParams['app_name'] = mappedParams['appName']
        delete mappedParams['appName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-feature-flags-unleash-project-id-client-register',
  `POST /api/v4/feature_flags/unleash/{project_id}/client/register`,
  {
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...requestData } = args
      const url = `/api/v4/feature_flags/unleash/${projectId}/client/register`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-feature-flags-unleash-project-id-client-metrics',
  `POST /api/v4/feature_flags/unleash/{project_id}/client/metrics`,
  {
    projectId: z.string(),
  },
  async (args, extra) => {
    try {
      const { projectId, ...requestData } = args
      const url = `/api/v4/feature_flags/unleash/${projectId}/client/metrics`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }
      if ('projectId' in mappedParams) {
        mappedParams['project_id'] = mappedParams['projectId']
        delete mappedParams['projectId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-usage-data-increment-counter', `Track usage data event`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/usage_data/increment_counter',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'post-api-v4-usage-data-increment-unique-users',
  `Track usage data event for the current user`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/usage_data/increment_unique_users',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'post-api-v4-usage-data-track-events',
  `Track multiple gitlab internal events`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/usage_data/track_events',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-usage-data-metric-definitions',
  `Get a list of all metric definitions`,
  {
    includePaths: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('includePaths' in mappedParams) {
        mappedParams['include_paths'] = mappedParams['includePaths']
        delete mappedParams['includePaths']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/usage_data/metric_definitions',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('get-api-v4-usage-data-service-ping', `Get the latest ServicePing payload`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/usage_data/service_ping',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('post-api-v4-usage-data-track-event', `Track gitlab internal events`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/usage_data/track_event',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('get-api-v4-usage-data-non-sql-metrics', `Get Non SQL usage ping metrics`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/usage_data/non_sql_metrics',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-usage-data-queries',
  `Get raw SQL queries for usage data SQL metrics`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/usage_data/queries',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('get-api-v4-user-counts', `Return the user specific counts`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/user_counts',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'post-api-v4-user-runners',
  `Create a runner owned by currently authenticated user`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/user/runners',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-application-plan-limits',
  `Get current plan limits`,
  {
    planName: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('planName' in mappedParams) {
        mappedParams['plan_name'] = mappedParams['planName']
        delete mappedParams['planName']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/application/plan_limits',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('put-api-v4-application-plan-limits', `Change plan limits`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'PUT',
      url: '/api/v4/application/plan_limits',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('get-api-v4-application-appearance', `Get the current appearance`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/application/appearance',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('put-api-v4-application-appearance', `Modify appearance`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'PUT',
      url: '/api/v4/application/appearance',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-application-statistics',
  `Get the current application statistics`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/application/statistics',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-discover-cert-based-clusters',
  `Discover all descendant certificate-based clusters in a group`,
  {
    groupId: z.string(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('groupId' in mappedParams) {
        mappedParams['group_id'] = mappedParams['groupId']
        delete mappedParams['groupId']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/discover-cert-based-clusters',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-deploy-keys',
  `List all deploy keys`,
  {
    page: z.string().optional(),
    perPage: z.string().optional(),
    public: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/deploy_keys',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-deploy-keys', `Create a deploy key`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/deploy_keys',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-deploy-tokens',
  `List all deploy tokens`,
  {
    page: z.string().optional(),
    perPage: z.string().optional(),
    active: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/deploy_tokens',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-import-bitbucket', `Import a BitBucket Cloud repository`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/import/bitbucket',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'post-api-v4-import-bitbucket-server',
  `Import a BitBucket Server repository`,
  {},
  async (args, extra) => {
    try {
      const requestData = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'POST',
        url: '/api/v4/import/bitbucket_server',
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-import-github', `Import a GitHub project`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/import/github',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('post-api-v4-import-github-cancel', `Cancel GitHub project import`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/import/github/cancel',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('post-api-v4-import-github-gists', `Import User Gists`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/import/github/gists',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('post-api-v4-slack-trigger', `Trigger a global slack command`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/slack/trigger',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-metadata',
  `Retrieve metadata information for this GitLab instance`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/metadata',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-version',
  `Retrieves version information for the GitLab instance`,
  {},
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/version',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'get-api-v4-topics',
  `Get topics`,
  {
    search: z.string().optional(),
    withoutProjects: z.string().optional(),
    organizationId: z.string().optional(),
    page: z.string().optional(),
    perPage: z.string().optional(),
  },
  async (args, extra) => {
    try {
      const queryParams = args

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }
      if ('withoutProjects' in mappedParams) {
        mappedParams['without_projects'] = mappedParams['withoutProjects']
        delete mappedParams['withoutProjects']
      }
      if ('organizationId' in mappedParams) {
        mappedParams['organization_id'] = mappedParams['organizationId']
        delete mappedParams['organizationId']
      }
      if ('perPage' in mappedParams) {
        mappedParams['per_page'] = mappedParams['perPage']
        delete mappedParams['perPage']
      }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: '/api/v4/topics',
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-topics', `Create a topic`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/topics',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool(
  'get-api-v4-topics-id',
  `Get topic`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/topics/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'GET',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'put-api-v4-topics-id',
  `Update a topic`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...requestData } = args
      const url = `/api/v4/topics/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...requestData }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'PUT',
        url: url,
        data: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool(
  'delete-api-v4-topics-id',
  `Delete a topic`,
  {
    id: z.string(),
  },
  async (args, extra) => {
    try {
      const { id, ...queryParams } = args
      const url = `/api/v4/topics/${id}`

      // Map camelCase to original parameter names for API request
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const mappedParams: any = { ...queryParams }

      // Extract authorization token from HTTP request headers
      const authorization = extra?.requestInfo?.headers?.authorization as string
      const bearer = authorization?.replace('Bearer ', '')

      const response = await apiClient.request({
        headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
        method: 'DELETE',
        url: url,
        params: mappedParams,
      })

      return handleResult(response.data)
    } catch (error) {
      return handleError(error)
    }
  }
)

mcpServer.tool('post-api-v4-topics-merge', `Merge topics`, {}, async (args, extra) => {
  try {
    const requestData = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...requestData }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'POST',
      url: '/api/v4/topics/merge',
      data: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})

mcpServer.tool('get-api-v4-web-commits-public-key', `Get the public key for web commits`, {}, async (args, extra) => {
  try {
    const queryParams = args

    // Map camelCase to original parameter names for API request
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const mappedParams: any = { ...queryParams }

    // Extract authorization token from HTTP request headers
    const authorization = extra?.requestInfo?.headers?.authorization as string
    const bearer = authorization?.replace('Bearer ', '')

    const response = await apiClient.request({
      headers: bearer ? { Authorization: `Bearer ${bearer}` } : undefined,
      method: 'GET',
      url: '/api/v4/web_commits/public_key',
      params: mappedParams,
    })

    return handleResult(response.data)
  } catch (error) {
    return handleError(error)
  }
})
